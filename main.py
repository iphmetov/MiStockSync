"""
MiStockSync - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–π—Å–æ–≤
–í–µ—Ä—Å–∏—è: 0.9.5
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import sys
import os
import pandas as pd
from datetime import datetime
import logging
import json
import shutil
import warnings

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ PIL –æ –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
warnings.filterwarnings("ignore", category=UserWarning, module="PIL")

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel
try:
    from openpyxl import load_workbook

    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é excel_loader
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "excel_loader"))

try:
    from excel_loader.loader import (
        select_and_load_excel,
        get_available_configs,
        load_largest_file,
    )
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ excel_loader: {e}")
    sys.exit(1)


# –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò –î–ê–ù–ù–´–•
# ================================

# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –í–∏—Ç–∏ - —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
VITYA_BALANCE_AVAILABLE = ["–ò–º–µ—é—Ç—Å—è –≤ –Ω–∞–ª.", "–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞"]

# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –î–∏–º—ã
DIMI_BALANCE_EXPECTED = "–û–∂–∏–¥–∞–µ—Ç—Å—è"

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º 0 –∏ NaN)
MIN_PRICE_THRESHOLD = 0.01

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (–∏–∑ notebook)
MIN_PRICE_CHANGE_PERCENT = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
MAX_PRICE_CHANGE_PERCENT = 100.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
SIGNIFICANT_CHANGE_PERCENT = 20.0  # –ü–æ—Ä–æ–≥ "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ" –∏–∑–º–µ–Ω–µ–Ω–∏—è

# –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ (0.3 = 30%)
TRSH = 0.33


class MiStockSyncApp:
    def __init__(self, root):
        self.root = root
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ main()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        self.settings = self.load_settings()

        # –î–∞–Ω–Ω—ã–µ
        self.current_df = None
        self.current_config = None
        self.base_df = None
        self.comparison_result = None  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.price_updated = False  # –§–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
        self.articles_added = False  # –§–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É

        # –ï—Å–ª–∏ root –Ω–µ None, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GUI
        if self.root is not None:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            main_width = self.settings.get("main_window_width", 1000)
            main_height = self.settings.get("main_window_height", 800)
            self.root.geometry(f"{main_width}x{main_height}")
            self.logger.info(
                f"üìê –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {main_width}x{main_height}"
            )

            self.auto_load_base = tk.BooleanVar(value=True)  # –ß–µ–∫–±–æ–∫—Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            self.current_font_size = self.settings.get("font_size", "normal")
            self.auto_load_base_enabled = self.settings.get("auto_load_base", True)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.create_widgets()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
            self.load_available_configs()

            # –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            self.root.after(100, self.auto_open_file_dialog)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            self.root.bind("<Configure>", self.on_window_resize)
        else:
            # –†–µ–∂–∏–º –±–µ–∑ GUI - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.logger.info("üîß –†–µ–∂–∏–º –±–µ–∑ GUI (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
            self.auto_load_base = None
            self.current_font_size = "normal"
            self.auto_load_base_enabled = True

    def auto_open_file_dialog(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.log_info("üöÄ –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞...")
        self.select_file()

    def on_window_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (–Ω–µ –¥–æ—á–µ—Ä–Ω–∏–µ –æ–∫–Ω–∞)
        if event.widget == self.root:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            new_width = event.width
            new_height = event.height

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ
            current_width = self.settings.get("main_window_width", 0)
            current_height = self.settings.get("main_window_height", 0)

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (5 –ø–∏–∫—Å–µ–ª–µ–π)
            min_change = 5

            if (
                new_width > 100
                and new_height > 100
                and (
                    abs(new_width - current_width) >= min_change
                    or abs(new_height - current_height) >= min_change
                )
            ):
                # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
                if hasattr(self, "_resize_timer"):
                    self.root.after_cancel(self._resize_timer)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ä–∞–∑–º–µ—Ä–æ–≤ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 2 —Å–µ–∫—É–Ω–¥)
                self._resize_timer = self.root.after(
                    2000, lambda: self._save_window_size(new_width, new_height)
                )

    def _save_window_size(self, width, height):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
            current_width = self.settings.get("main_window_width", 0)
            current_height = self.settings.get("main_window_height", 0)

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if width != current_width or height != current_height:
                self.settings["main_window_width"] = width
                self.settings["main_window_height"] = height

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.save_settings(self.settings)
                self.log_info(
                    f"üíæ –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {width}x{height}"
                )
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞: {e}")

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.logger = logging.getLogger("MiStockSync")
        self.logger.setLevel(logging.INFO)

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)

        # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        console_handler.setFormatter(formatter)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.logger.addHandler(console_handler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logs_dir = "logs"
        if not os.path.exists(logs_dir):
            os.makedirs(logs_dir)

        self.log_file_path = os.path.join(
            logs_dir, f"mistocksync_{datetime.now().strftime('%Y%m%d')}.log"
        )
        file_handler = logging.FileHandler(self.log_file_path, encoding="utf-8")
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)

        self.logger.info("üöÄ MiStockSync –∑–∞–ø—É—â–µ–Ω")
        self.logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ settings.json"""
        settings_file = "settings.json"
        default_settings = {
            "auto_load_base": True,
            "font_size": "normal",
            "main_window_width": 1000,
            "main_window_height": 800,
            "add_articles_dialog_width": 800,
            "add_articles_dialog_height": 533,
            "confirm_exit": True,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        }

        try:
            if os.path.exists(settings_file):
                with open(settings_file, "r", encoding="utf-8") as f:
                    settings = json.load(f)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
                for key, default_value in default_settings.items():
                    if key not in settings:
                        settings[key] = default_value
                        self.logger.info(
                            f"‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–∫: {key} = {default_value}"
                        )

                self.logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {settings_file}")
                return settings
            else:
                self.logger.info(
                    "‚öôÔ∏è –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                )
                self.logger.info(
                    f"üìê –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_settings['main_window_width']}x{default_settings['main_window_height']}"
                )
                return default_settings

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return default_settings

    def save_settings(self, settings):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª settings.json"""
        settings_file = "settings.json"

        try:
            with open(settings_file, "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)

            self.logger.info(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {settings_file}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.create_menu()

        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(3, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="MiStockSync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–π—Å–æ–≤",
            font=("Arial", 16, "bold"),
        )
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 10))

        # –ú–∏–Ω–∏-–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar_frame = ttk.Frame(main_frame)
        toolbar_frame.grid(
            row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10)
        )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–∂–∞—Ç—ã–π –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é)
        tools_container = ttk.Frame(toolbar_frame)
        tools_container.grid(row=0, column=0, sticky=tk.W)

        # –û—Å—Ç–∞–≤–ª—è–µ–º toolbar –¥–ª—è –±—É–¥—É—â–∏—Ö –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º

        # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_frame = ttk.LabelFrame(main_frame, text="–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", padding="10")
        config_frame.grid(
            row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10)
        )
        config_frame.columnconfigure(1, weight=1)

        ttk.Label(config_frame, text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:").grid(
            row=0, column=0, sticky=tk.W, padx=(0, 10)
        )

        self.config_var = tk.StringVar()
        self.config_combo = ttk.Combobox(
            config_frame, textvariable=self.config_var, state="readonly"
        )
        self.config_combo.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        buttons_frame = ttk.Frame(config_frame)
        buttons_frame.grid(row=0, column=2, sticky=tk.E)

        ttk.Button(
            buttons_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=self.select_file
        ).grid(row=0, column=0, padx=(0, 5))

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ", padding="10")
        info_frame.grid(
            row=3, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10)
        )
        info_frame.columnconfigure(0, weight=1)
        info_frame.rowconfigure(0, weight=1)

        self.info_text = scrolledtext.ScrolledText(info_frame, width=80, height=15)
        self.info_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        self.apply_font_size(self.current_font_size)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = ttk.Frame(main_frame)
        action_frame.grid(
            row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0)
        )

        self.show_data_button = ttk.Button(
            action_frame,
            text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
            command=self.show_data_sample,
            state="disabled",
        )
        self.show_data_button.grid(row=0, column=0, sticky=tk.W)

        self.save_data_button = ttk.Button(
            action_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π",
            command=self.save_data,
            state="disabled",
        )
        self.save_data_button.grid(row=0, column=1, padx=(10, 0))

        self.compare_button = ttk.Button(
            action_frame,
            text="üîç –°—Ä–∞–≤–Ω–∏—Ç—å —Å –±–∞–∑–æ–π",
            command=self.compare_with_base,
            state="disabled",
        )
        self.compare_button.grid(row=0, column=2, padx=(10, 0))

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.update_prices_button = ttk.Button(
            action_frame,
            text="üè∑Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã",
            command=self.update_prices,
            state="disabled",
        )
        self.update_prices_button.grid(row=0, column=3, padx=(10, 0))

        self.report_button = ttk.Button(
            action_frame,
            text="üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
            command=self.save_report,
            state="disabled",
        )
        self.report_button.grid(row=0, column=4, padx=(10, 0))

        self.add_to_base_button = ttk.Button(
            action_frame,
            text="üì• –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É",
            command=self.add_to_base,
            state="disabled",
        )
        self.add_to_base_button.grid(row=0, column=5, padx=(10, 0))

        self.show_log_button = ttk.Button(
            action_frame,
            text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥",
            command=self.show_log_window,
            state="normal",  # –í—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
        )
        self.show_log_button.grid(row=0, column=6, padx=(10, 0))

        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.create_advanced_status_bar(main_frame)

    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.menubar = tk.Menu(self.root)

        # === –ú–ï–ù–Æ "–§–ê–ô–õ" ===
        file_menu = tk.Menu(self.menubar, tearoff=0)
        file_menu.add_command(
            label="üìÅ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", command=self.select_file, accelerator="Ctrl+O"
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.show_settings, accelerator="Ctrl+,"
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="üö™ –í—ã—Ö–æ–¥", command=self.quit_application, accelerator="Ctrl+Q"
        )
        self.menubar.add_cascade(label="üìÅ –§–∞–π–ª", menu=file_menu)

        # === –ú–ï–ù–Æ "–ü–†–ê–í–ö–ê" ===
        edit_menu = tk.Menu(self.menubar, tearoff=0)
        edit_menu.add_command(
            label="‚úÇÔ∏è –í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text, accelerator="Ctrl+X"
        )
        edit_menu.add_command(
            label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text, accelerator="Ctrl+C"
        )
        edit_menu.add_separator()
        edit_menu.add_command(
            label="üîò –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", command=self.select_all_text, accelerator="Ctrl+A"
        )
        edit_menu.add_command(
            label="üîÑ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ",
            command=self.invert_selection,
            accelerator="Ctrl+I",
        )
        self.menubar.add_cascade(label="‚úèÔ∏è –ü—Ä–∞–≤–∫–∞", menu=edit_menu)

        # === –ú–ï–ù–Æ "–í–ò–î" ===
        view_menu = tk.Menu(self.menubar, tearoff=0)
        view_menu.add_command(
            label="üßπ –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_info, accelerator="Ctrl+L"
        )
        view_menu.add_command(
            label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_interface, accelerator="F5"
        )
        view_menu.add_separator()

        # –ü–æ–¥–º–µ–Ω—é —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–∞
        font_menu = tk.Menu(view_menu, tearoff=0)
        font_menu.add_command(
            label="üìù –û–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç", command=lambda: self.change_font_size("normal")
        )
        font_menu.add_command(
            label="üìÑ –°—Ä–µ–¥–Ω–∏–π —à—Ä–∏—Ñ—Ç", command=lambda: self.change_font_size("medium")
        )
        font_menu.add_command(
            label="üìä –ö—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç", command=lambda: self.change_font_size("large")
        )
        view_menu.add_cascade(label="üî§ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", menu=font_menu)

        self.menubar.add_cascade(label="üëÅÔ∏è –í–∏–¥", menu=view_menu)

        # === –ú–ï–ù–Æ "–°–ü–†–ê–í–ö–ê" ===
        help_menu = tk.Menu(self.menubar, tearoff=0)
        help_menu.add_command(
            label="üìñ –ü–æ–º–æ—â—å", command=self.show_help, accelerator="F1"
        )
        help_menu.add_separator()
        help_menu.add_command(
            label="‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about, accelerator="Ctrl+F1"
        )
        self.menubar.add_cascade(label="‚ùì –°–ø—Ä–∞–≤–∫–∞", menu=help_menu)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫ –æ–∫–Ω—É
        self.root.config(menu=self.menubar)

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()

    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # –§–∞–π–ª
        self.root.bind("<Control-o>", lambda e: self.select_file())
        self.root.bind("<Control-comma>", lambda e: self.show_settings())
        self.root.bind("<Control-q>", lambda e: self.quit_application())

        # –ü—Ä–∞–≤–∫–∞
        self.root.bind("<Control-x>", lambda e: self.cut_text())
        self.root.bind("<Control-c>", lambda e: self.copy_text())
        self.root.bind("<Control-a>", lambda e: self.select_all_text())
        self.root.bind("<Control-i>", lambda e: self.invert_selection())

        # –í–∏–¥
        self.root.bind("<Control-l>", lambda e: self.clear_info())
        self.root.bind("<F5>", lambda e: self.refresh_interface())

        # –°–ø—Ä–∞–≤–∫–∞
        self.root.bind("<F1>", lambda e: self.show_help())
        self.root.bind("<Control-F1>", lambda e: self.show_about())

    def load_available_configs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        self.log_info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
        try:
            configs = get_available_configs()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ GUI
            if hasattr(self, "config_combo"):
                self.config_combo["values"] = configs

                # –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "auto" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if "auto" in configs:
                    self.config_combo.set("auto")
                elif configs:
                    self.config_combo.set(configs[0])

            self.log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(configs)}")
            self.log_info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏: {', '.join(configs)}")
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")

    def select_file(self):
        """–í—ã–±–æ—Ä –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        self.log_info("üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/input –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        input_dir = "data/input"
        if not os.path.exists(input_dir):
            os.makedirs(input_dir)
            self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {input_dir}")

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        from tkinter import filedialog

        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")],
            initialdir=input_dir,
        )

        if not file_path:
            self.log_info("‚ÑπÔ∏è –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω")
            return

        self.log_info(f"üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")

        # –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        if self.config_var.get() == "auto":
            detected_config = self.auto_select_config(file_path)
            config_name = detected_config
        else:
            config_name = self.config_var.get()

        if not config_name:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            )
            return

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            self.start_progress("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", 5, "file")

            # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            self.update_progress(1, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ")
            from excel_loader.loader import load_with_config

            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞
            self.update_progress(2, "–ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞")
            df = load_with_config(file_path, config_name)

            if df is not None:
                # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                self.update_progress(3, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                self.current_df = df
                self.current_config = config_name
                self.current_file_name = os.path.basename(
                    file_path
                )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                self.comparison_result = None

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–π—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                if hasattr(self, "price_updated"):
                    self.price_updated = False
                    self.log_info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω —Å–±—Ä–æ—à–µ–Ω–æ")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                self.articles_added = False
                self.log_info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–±—Ä–æ—à–µ–Ω–æ")

                # –®–∞–≥ 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                self.update_progress(4, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                self.show_file_info(df, config_name)

                # –®–∞–≥ 5: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
                self.update_progress(5, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                self.update_buttons_state()

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
                self.update_files_info()

                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                rows = len(df)
                cols = len(df.columns)
                size_mb = df.memory_usage(deep=True).sum() / 1024 / 1024
                self.finish_progress(
                    f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {rows:,} —Å—Ç—Ä–æ–∫, {cols} —Å—Ç–æ–ª–±—Ü–æ–≤ ({size_mb:.1f} –ú–ë)"
                )

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ "auto" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
                if "auto" in self.config_combo["values"]:
                    self.config_combo.set("auto")
                    self.log_info(
                        "üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ 'auto' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"
                    )
            else:
                self.finish_progress("–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω", auto_reset=False)
                self.set_status("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", "error")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            self.finish_progress("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", auto_reset=False)
            self.set_status(f"–û—à–∏–±–∫–∞: {str(e)}", "error")

    def load_largest(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞"""

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
        data_dir = "data/input"

        try:
            self.set_status("–ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞...", "loading")
            self.root.update()

            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
            excel_files = []
            for file in os.listdir(data_dir):
                if file.endswith((".xlsx", ".xls")):
                    file_path = os.path.join(data_dir, file)
                    file_size = os.path.getsize(file_path)
                    excel_files.append((file_path, file_size))

            if not excel_files:
                self.log_error("Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ data/input")
                self.set_status("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "warning")
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
            excel_files.sort(key=lambda x: x[1], reverse=True)
            largest_file_path, largest_size = excel_files[0]

            self.log_info(
                f"–ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {os.path.basename(largest_file_path)} ({largest_size} bytes)"
            )

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            config_name = self.auto_select_config(largest_file_path)

            from excel_loader.loader import load_with_config

            df = load_with_config(largest_file_path, config_name)

            if df is not None:
                self.current_df = df
                self.current_config = config_name

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                self.comparison_result = None

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–π—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                if hasattr(self, "price_updated"):
                    self.price_updated = False
                    self.log_info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω —Å–±—Ä–æ—à–µ–Ω–æ")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                self.articles_added = False
                self.log_info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–±—Ä–æ—à–µ–Ω–æ")

                self.show_file_info(df, config_name)
                self.set_status("–°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", "success")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                self.update_buttons_state()
            else:
                self.set_status("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", "error")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            self.set_status("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "error")

    def show_file_info(self, df, config_name):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
        self.log_info(f"üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ (–∫–æ–Ω—Ñ–∏–≥: {config_name})")
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞—è –¥–∞–Ω–Ω—ã–µ
        self.info_text.delete(1.0, tk.END)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –§–ê–ô–õ–ê–•\n"
        info += f"{'='*50}\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –ø—Ä–∞–π—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        info += f"üíº –ü–†–ê–ô–° –ü–û–°–¢–ê–í–©–ò–ö–ê:\n"
        info += f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}\n"
        if hasattr(self, "current_file_name") and self.current_file_name:
            info += f"   –§–∞–π–ª: {self.current_file_name}\n"
        info += f"   –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        info += f"   –°—Ç—Ä–æ–∫: {len(df):,}\n"
        info += f"   –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns):,}\n"
        info += (
            f"   –†–∞–∑–º–µ—Ä: {df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB\n\n"
        )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –±–∞–∑–µ
        info += f"üè¢ –ë–ê–ó–ê –î–ê–ù–ù–´–•:\n"
        if self.base_df is not None:
            info += f"   –°—Ç–∞—Ç—É—Å: ‚úÖ –ó–ê–ì–†–£–ñ–ï–ù–ê\n"
            if hasattr(self, "base_file_name") and self.base_file_name:
                info += f"   –§–∞–π–ª: {self.base_file_name}\n"
            info += f"   –°—Ç—Ä–æ–∫: {len(self.base_df):,}\n"
            info += f"   –°—Ç–æ–ª–±—Ü–æ–≤: {len(self.base_df.columns):,}\n"
            info += f"   –†–∞–∑–º–µ—Ä: {self.base_df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB\n\n"
        else:
            info += f"   –°—Ç–∞—Ç—É—Å: ‚ùå –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–ê\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
        info += f"üìã –°–¢–û–õ–ë–¶–´ ({len(df.columns)}):\n"
        info += f"{'-'*30}\n"
        for i, col in enumerate(df.columns, 1):
            info += f"{i:2d}. {col}\n"

        # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        info += f"\nüìä –¢–ò–ü–´ –î–ê–ù–ù–´–•:\n"
        info += f"{'-'*30}\n"
        for col in df.columns:
            non_null = df[col].notna().sum()
            info += f"{col}: {str(df[col].dtype)} ({non_null:,} –Ω–µ –ø—É—Å—Ç—ã—Ö)\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        info += f"\n‚ùå –ü–£–°–¢–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:\n"
        info += f"{'-'*30}\n"
        null_counts = df.isnull().sum()
        for col in df.columns:
            if null_counts[col] > 0:
                info += f"{col}: {null_counts[col]:,} –ø—É—Å—Ç—ã—Ö\n"

        if null_counts.sum() == 0:
            info += "–ü—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç! ‚úÖ\n"

        self.info_text.insert(tk.END, info)
        self.log_info(
            f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤, {df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB"
        )

    def show_data_sample(self):
        """–ü–æ–∫–∞–∑ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_df is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
            return

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞—è –¥–∞–Ω–Ω—ã–µ
        self.info_text.delete(1.0, tk.END)

        df = self.current_df

        info = f"üìã –û–ë–†–ê–ó–ï–¶ –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫)\n"
        info += f"{'='*80}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        sample_df = df.head(10)
        info += sample_df.to_string(max_cols=10, max_colwidth=20) + "\n\n"

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        important_cols = [
            "article",
            "name",
            "price",
            "article_vitya",
            "price_usd",
            "price_rub",
        ]
        existing_cols = [col for col in important_cols if col in df.columns]

        if existing_cols:
            info += f"üìä –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø (—Ç–æ–ø-10):\n"
            info += f"{'-'*50}\n"
            for col in existing_cols[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                unique_vals = df[col].value_counts().head(10)
                info += f"\n{col.upper()}:\n"
                for val, count in unique_vals.items():
                    info += f"  {val}: {count:,}\n"

        self.info_text.insert(tk.END, info)

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log_info("üíæ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        if self.current_df is None:
            self.log_error("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
            return

        from tkinter import filedialog

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_dir = "data/output"
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")

        self.log_info(f"üìÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ: {output_dir}")

        file_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[
                ("Excel files", "*.xlsx"),
                ("CSV files", "*.csv"),
                ("All files", "*.*"),
            ],
            initialdir=output_dir,
        )

        if file_path:
            try:
                self.set_status("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", "save")

                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                processed_df = self.preprocess_supplier_data(
                    self.current_df, self.current_config
                )

                if file_path.endswith(".xlsx"):
                    processed_df.to_excel(file_path, index=False)
                elif file_path.endswith(".csv"):
                    processed_df.to_csv(file_path, index=False, encoding="utf-8")

                self.log_info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {file_path}")
                self.log_info(
                    f"–ò—Å—Ö–æ–¥–Ω–æ: {len(self.current_df)} —Å—Ç—Ä–æ–∫ ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_df)} —Å—Ç—Ä–æ–∫"
                )
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}"
                )
                self.set_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "info")

            except Exception as e:
                self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
                self.set_status("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "error")

    def compare_with_base(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.log_info("üîç –ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, –ù–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–æ–Ω
            self.articles_added = False
            self.log_info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–±—Ä–æ—à–µ–Ω–æ")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            if self.current_df is None:
                self.log_error("–§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                )
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º progress bar (5 —à–∞–≥–æ–≤)
            self.start_progress("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π", 5, "compare")
            self.update_progress(0, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é")

            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
            self.log_info(f"üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
            self.log_info(
                f"   üíº –ü—Ä–∞–π—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {'‚úÖ' if self.current_df is not None else '‚ùå'} ({self.current_config or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})"
            )
            self.log_info(
                f"   üè¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if self.base_df is not None else '‚ùå'}"
            )
            if self.current_df is not None:
                self.log_info(f"   üìä –°—Ç—Ä–æ–∫ –≤ –ø—Ä–∞–π—Å–µ: {len(self.current_df):,}")
            if self.base_df is not None:
                self.log_info(f"   üìä –°—Ç—Ä–æ–∫ –≤ –±–∞–∑–µ: {len(self.base_df):,}")

            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.update_progress(1, "–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            if self.auto_load_base_enabled:
                self.set_status("–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", "loading")
                self.root.update()

                if self.base_df is None:
                    data_dir = "data/input"
                    result = load_largest_file(data_dir, "base")

                    if result is None:
                        self.finish_progress("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã", auto_reset=False)
                        messagebox.showerror(
                            "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
                        )
                        return

                    self.base_df, base_file_path = result
                    self.base_file_name = os.path.basename(base_file_path)
                    self.log_info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    self.update_files_info()
            else:
                if self.base_df is None:
                    self.finish_progress("–ë–∞–∑–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", auto_reset=False)
                    messagebox.showwarning(
                        "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                        "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É",
                    )
                    return

            # –®–∞–≥ 2: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.update_progress(2, "–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            self.set_status("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", "loading")
            self.root.update()

            processed_supplier_df = self.preprocess_supplier_data(
                self.current_df, self.current_config
            )

            # –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            self.update_progress(3, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
            self.set_status("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π...", "compare")
            self.root.update()

            comparison_result = self.perform_comparison(
                processed_supplier_df, self.base_df
            )

            # –®–∞–≥ 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.update_progress(4, "–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞")
            self.show_comparison_result(comparison_result)
            self.comparison_result = comparison_result

            if "error" in comparison_result:
                self.log_error(f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {comparison_result['error']}")
                self.finish_progress("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", auto_reset=False)
                return

            # –®–∞–≥ 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.update_progress(5, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
            self.update_buttons_state()
            self.finish_progress("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", auto_reset=True)
            self.set_status("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "success")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
            try:
                main_width = self.root.winfo_width()
                main_height = self.root.winfo_height()
                if main_width > 200 and main_height > 200:
                    self.settings["main_window_width"] = main_width
                    self.settings["main_window_height"] = main_height
                    self.save_settings(self.settings)
                    self.log_info("üíæ –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            except Exception as e:
                self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")
            self.finish_progress("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", auto_reset=False)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")

    def perform_comparison(self, supplier_df, base_df):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.set_status("üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...", "loading")
        self.start_progress("–ü–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", 10, "comparison")

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.log_info(
            f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –ø–æ—Å—Ç–∞–≤—â–∏–∫ {len(supplier_df)} —Å—Ç—Ä–æ–∫, –±–∞–∑–∞ {len(base_df)} —Å—Ç—Ä–æ–∫"
        )
        self.log_info(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {list(supplier_df.columns)}")
        self.log_info(f"üìä –ö–æ–ª–æ–Ω–∫–∏ –±–∞–∑—ã: {list(base_df.columns)}")

        # 1. –ü–ï–†–í–´–ô –≠–¢–ê–ü: –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        self.set_status("üîç –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º...", "loading")
        self.update_progress(1, "–≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º")
        self.log_info("üîç –≠—Ç–∞–ø 1: –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º...")
        article_results = self.compare_by_articles(supplier_df, base_df)

        matches = article_results["matches"]
        price_changes = article_results["price_changes"]
        new_items = article_results[
            "new_items"
        ]  # –≠—Ç–æ —Ç–æ–≤–∞—Ä—ã –ë–ï–ó —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        supplier_dict = article_results["supplier_dict"]
        base_dict = article_results["base_dict"]

        # 2. –°–û–ó–î–ê–ï–ú –î–ê–¢–ê–§–†–ï–ô–ú –¢–û–í–ê–†–û–í –ë–ï–ó –°–û–í–ü–ê–î–ï–ù–ò–ô –ü–û –ê–†–¢–ò–ö–£–õ–ê–ú
        # –≠—Ç–æ –±—É–¥—É—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥–∞–º –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò
        self.log_info(
            f"üì¶ –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –∏–∑ {len(new_items)} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º..."
        )

        unmatched_df = pd.DataFrame(new_items) if new_items else pd.DataFrame()

        if not unmatched_df.empty:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏
            unmatched_df["search_status"] = "no_article_match"
            unmatched_df["found_by"] = None
            unmatched_df["similarity_score"] = None

            self.log_info(f"üìä unmatched_df –∫–æ–ª–æ–Ω–∫–∏: {list(unmatched_df.columns)}")
            if len(unmatched_df) > 0:
                self.log_info(
                    f"üìä –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ unmatched_df: {unmatched_df.iloc[0].to_dict()}"
                )

        self.log_info(f"‚úÖ –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å–æ–∑–¥–∞–Ω: {len(unmatched_df)} —Å—Ç—Ä–æ–∫")

        # 3. –í–¢–û–†–û–ô –≠–¢–ê–ü: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤
        self.set_status("üîç –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö...", "loading")
        self.update_progress(2, "–≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö")
        self.log_info(
            "üîç –≠—Ç–∞–ø 2: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤..."
        )
        bracket_matches = []
        if not unmatched_df.empty:
            bracket_matches = self.compare_by_bracket_codes_advanced(
                supplier_df, base_df, self.current_config, new_items
            )

            # –£–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –Ω–µ–ø–æ–π—Å–∫–∞–Ω–Ω—ã—Ö
            if bracket_matches:
                found_articles = [
                    match["supplier_article"]
                    for match in bracket_matches
                    if "supplier_article" in match
                ]
                unmatched_df = unmatched_df[
                    ~unmatched_df["article"].isin(found_articles)
                ]
                self.log_info(
                    f"üì¶ –£–±—Ä–∞–ª–∏ {len(found_articles)} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö. –û—Å—Ç–∞–ª–æ—Å—å: {len(unmatched_df)}"
                )

        # 4. –¢–†–ï–¢–ò–ô –≠–¢–ê–ü: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ–±—â–∏–º –∫–æ–¥–∞–º —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤
        self.set_status("üîç –≠—Ç–∞–ø 3: –ü–æ–∏—Å–∫ –ø–æ –æ–±—â–∏–º –∫–æ–¥–∞–º...", "loading")
        self.update_progress(3, "–≠—Ç–∞–ø 3: –ü–æ–∏—Å–∫ –ø–æ –æ–±—â–∏–º –∫–æ–¥–∞–º")
        self.log_info("üîç –≠—Ç–∞–ø 3: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ–±—â–∏–º –∫–æ–¥–∞–º —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤...")
        code_matches = []
        if not unmatched_df.empty:
            code_matches = self.compare_by_product_code_advanced(
                supplier_df, base_df, self.current_config, new_items
            )

            # –£–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –Ω–µ–ø–æ–π—Å–∫–∞–Ω–Ω—ã—Ö
            if code_matches:
                found_articles = [
                    match["supplier_article"]
                    for match in code_matches
                    if "supplier_article" in match
                ]
                unmatched_df = unmatched_df[
                    ~unmatched_df["article"].isin(found_articles)
                ]
                self.log_info(
                    f"üì¶ –£–±—Ä–∞–ª–∏ {len(found_articles)} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ –æ–±—â–∏–º –∫–æ–¥–∞–º. –û—Å—Ç–∞–ª–æ—Å—å: {len(unmatched_df)}"
                )

        # 5. –ß–ï–¢–í–ï–†–¢–´–ô –≠–¢–ê–ü: –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
        self.set_status("üîç –≠—Ç–∞–ø 4: –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º...", "loading")
        self.update_progress(4, "–≠—Ç–∞–ø 4: –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º")
        self.log_info(
            f"üîç –≠—Ç–∞–ø 4: –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è {len(unmatched_df)} —Ç–æ–≤–∞—Ä–æ–≤..."
        )

        fuzzy_candidates = (
            unmatched_df.to_dict("records") if not unmatched_df.empty else []
        )

        self.log_info(
            f"üìä fuzzy_candidates –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º: {len(fuzzy_candidates)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
        )
        if fuzzy_candidates:
            self.log_info(f"üìä –¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {type(fuzzy_candidates[0])}")
            if isinstance(fuzzy_candidates[0], dict):
                self.log_info(
                    f"üìä –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {list(fuzzy_candidates[0].keys())}"
                )

        fuzzy_matches = []

        if fuzzy_candidates:
            self.log_info("üîç –í—ã–∑—ã–≤–∞–µ–º compare_by_fuzzy_string_matching...")
            fuzzy_matches = self.compare_by_fuzzy_string_matching(
                fuzzy_candidates, base_df, self.current_config
            )
            self.log_info(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {len(fuzzy_matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
            )

            # –£–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –Ω–µ–ø–æ–π—Å–∫–∞–Ω–Ω—ã—Ö
            if fuzzy_matches:
                # –£–±–∏—Ä–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É, —Ç–∞–∫ –∫–∞–∫ –∞—Ä—Ç–∏–∫—É–ª –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                found_indices = [
                    match["supplier_index"]
                    for match in fuzzy_matches
                    if "supplier_index" in match
                ]
                unmatched_df = unmatched_df[~unmatched_df.index.isin(found_indices)]
                self.log_info(
                    f"üì¶ –£–±—Ä–∞–ª–∏ {len(found_indices)} —Ç–æ–≤–∞—Ä–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–µ—á–µ—Ç–∫–∏–º –ø–æ–∏—Å–∫–æ–º. –û—Å—Ç–∞–ª–æ—Å—å: {len(unmatched_df)}"
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º fuzzy_candidates –ø–æ—Å–ª–µ –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.log_info(
            f"üìä unmatched_df –ø–æ—Å–ª–µ –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {len(unmatched_df)} —Å—Ç—Ä–æ–∫"
        )
        if not unmatched_df.empty:
            self.log_info(f"üìä –ö–æ–ª–æ–Ω–∫–∏ unmatched_df: {list(unmatched_df.columns)}")
            self.log_info(
                f"üìä –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ unmatched_df: {unmatched_df.iloc[0].to_dict()}"
            )

        # –°–æ–∑–¥–∞–µ–º final_unmatched_items –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        final_unmatched_items = (
            unmatched_df.to_dict("records") if not unmatched_df.empty else []
        )

        self.set_status("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", "success")
        self.update_progress(5, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        self.log_info(
            f"üìä final_unmatched_items –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {len(final_unmatched_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
        )
        if final_unmatched_items:
            self.log_info(f"üìä –¢–∏–ø –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {type(final_unmatched_items[0])}")
            if isinstance(final_unmatched_items[0], dict):
                self.log_info(
                    f"üìä –ö–ª—é—á–∏ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: {list(final_unmatched_items[0].keys())}"
                )

        return {
            "supplier_total": len(supplier_dict),
            "base_total": len(base_dict),
            "matches": matches,
            "price_changes": price_changes,
            "new_items": new_items,
            "code_matches": code_matches,  # –ü–æ–∏—Å–∫ –ø–æ –æ–±—â–∏–º –∫–æ–¥–∞–º
            "bracket_matches": bracket_matches,  # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö
            "fuzzy_matches": fuzzy_matches,  # –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
            "fuzzy_candidates": final_unmatched_items,  # –¢–æ–≤–∞—Ä—ã –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞
            "unmatched_count": len(unmatched_df),  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø–æ–π—Å–∫–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            "match_rate": (
                len(matches) / len(supplier_dict) * 100 if supplier_dict else 0
            ),
        }

    def show_comparison_result(self, result):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if "error" in result:
            messagebox.showerror("–û—à–∏–±–∫–∞", result["error"])
            return

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞—è –¥–∞–Ω–Ω—ã–µ
        self.info_text.delete(1.0, tk.END)

        info = f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•\n"
        info += f"{'='*60}\n"
        info += f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.current_config}\n"
        info += f"–î–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        info += f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        info += f"{'-'*40}\n"
        info += f"–¢–æ–≤–∞—Ä–æ–≤ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {result['supplier_total']:,}\n"
        info += f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {result['base_total']:,}\n"
        info += f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(result['matches']):,}\n"
        info += f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['match_rate']:.1f}%\n\n"

        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        if result["price_changes"]:
            info += f"üí∞ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù (>5%):\n"
            info += f"{'-'*50}\n"
            for i, item in enumerate(result["price_changes"][:10], 1):
                change_sign = "üìà" if item["price_diff"] > 0 else "üìâ"
                info += f"{i:2d}. {item['article']}: {item['base_price']:.2f} ‚Üí {item['supplier_price']:.2f} "
                info += f"({item['price_change_percent']:+.1f}%) {change_sign}\n"
            if len(result["price_changes"]) > 10:
                info += f"... –∏ –µ—â–µ {len(result['price_changes']) - 10} –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        else:
            info += f"üí∞ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚úÖ\n"

        info += "\n"

        # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        if result["new_items"]:
            info += f"üÜï –ù–û–í–´–ï –¢–û–í–ê–†–´ –£ –ü–û–°–¢–ê–í–©–ò–ö–ê:\n"
            info += f"{'-'*40}\n"
            for i, item in enumerate(result["new_items"][:10], 1):
                info += f"{i:2d}. {item['article']}: {item['price']:.2f} - {item['name'][:30]}\n"

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
                if (
                    item.get("fuzzy_match_name")
                    and item.get("fuzzy_match_similarity", 0) > 0
                ):
                    similarity_percent = item["fuzzy_match_similarity"] * 100
                    info += f"    üîç –í–æ–∑–º–æ–∂–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {item['fuzzy_match_name'][:40]}...\n"
                    info += f"    üìç –°—Ç—Ä–æ–∫–∞ –≤ –±–∞–∑–µ: {item['fuzzy_match_row']}, –¶–≤–µ—Ç: {item['fuzzy_match_color']}, –¶–µ–Ω–∞: {item['fuzzy_match_price']}\n"
                    info += f"    üìä –°—Ö–æ–∂–µ—Å—Ç—å: {similarity_percent:.1f}%\n"
                else:
                    info += f"    ‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
                info += "\n"

            if len(result["new_items"]) > 10:
                info += f"... –∏ –µ—â–µ {len(result['new_items']) - 10} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        else:
            info += f"üÜï –ù–û–í–´–ï –¢–û–í–ê–†–´: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n"

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥–∞–º
        if result.get("code_matches"):
            info += f"\nüîç –°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–û –ö–û–î–ê–ú –í –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–Ø–• (–æ–±—â–∏–µ –∫–æ–¥—ã):\n"
            info += f"{'-'*50}\n"
            for i, match in enumerate(result["code_matches"][:5], 1):
                info += f"{i:2d}. –ö–æ–¥: {match['code']}\n"
                info += f"    –ü–æ—Å—Ç–∞–≤—â–∏–∫: {match['supplier_name'][:40]}...\n"
                info += f"    –ë–∞–∑–∞: {match['base_name'][:40]}...\n"
                info += f"    –¶–µ–Ω—ã: {match['supplier_price']:.2f} ‚Üî {match['base_price']:.2f}\n\n"
            if len(result["code_matches"]) > 5:
                info += (
                    f"... –∏ –µ—â–µ {len(result['code_matches']) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º\n"
                )

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö
        if result.get("bracket_matches"):
            info += f"\nüîç –°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–û –ö–û–î–ê–ú –í –°–ö–û–ë–ö–ê–• (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è):\n"
            info += f"{'-'*50}\n"
            for i, match in enumerate(result["bracket_matches"][:5], 1):
                info += f"{i:2d}. –ö–æ–¥: {match['code']}\n"
                info += f"    –ü–æ—Å—Ç–∞–≤—â–∏–∫: {match['supplier_name'][:40]}...\n"
                info += f"    –ë–∞–∑–∞: {match['base_name'][:40]}...\n"
                info += f"    –ù–∞–π–¥–µ–Ω–æ –≤: {match['matched_in']}\n"
                info += f"    –¶–µ–Ω—ã: {match['supplier_price']:.2f} ‚Üî {match['base_price']:.2f}\n\n"
            if len(result["bracket_matches"]) > 5:
                info += f"... –∏ –µ—â–µ {len(result['bracket_matches']) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö\n"

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        if result.get("fuzzy_matches"):
            info += f"\nüîç –°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–û –ù–ï–ß–ï–¢–ö–û–ú–£ –ü–û–ò–°–ö–£ (—Å—Ç—Ä–æ–∫–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π):\n"
            info += f"{'-'*50}\n"
            for i, match in enumerate(result["fuzzy_matches"][:5], 1):
                info += f"{i:2d}. –°—Ö–æ–∂–µ—Å—Ç—å: {match['similarity_ratio']:.1%}\n"
                info += f"    –ü–æ—Å—Ç–∞–≤—â–∏–∫: {match['supplier_name'][:40]}...\n"
                info += f"    –ë–∞–∑–∞: {match['base_name'][:40]}...\n"
                info += f"    –¶–µ–Ω—ã: {match['supplier_price']:.2f} ‚Üî {match['base_price']:.2f}\n\n"
            if len(result["fuzzy_matches"]) > 5:
                info += f"... –∏ –µ—â–µ {len(result['fuzzy_matches']) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É –ø–æ–∏—Å–∫—É\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        if result.get("fuzzy_candidates"):
            info += f"\nü§ñ –¢–û–í–ê–†–´ –ë–ï–ó –°–û–í–ü–ê–î–ï–ù–ò–ô (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞):\n"
            info += f"{'-'*50}\n"
            info += f"–¢–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result.get('unmatched_count', 0)}\n"
            info += f"–û—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ (–∞—Ä—Ç–∏–∫—É–ª—ã, –∫–æ–¥—ã, –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫): {len(result['fuzzy_candidates'])}\n"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            for i, candidate in enumerate(result["fuzzy_candidates"][:3], 1):
                info += f"{i:2d}. {candidate['article']}: ${candidate['price']:.2f}\n"
                info += f"    {candidate['name'][:50]}...\n"

            if len(result["fuzzy_candidates"]) > 3:
                info += f"... –∏ –µ—â–µ {len(result['fuzzy_candidates']) - 3} —Ç–æ–≤–∞—Ä–æ–≤\n"
        elif result.get("unmatched_count", 0) == 0:
            info += f"\nüéâ –í–°–ï –¢–û–í–ê–†–´ –ù–ê–ô–î–ï–ù–´! –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞.\n"
        else:
            info += f"\nüìù –ù–µ–ø–æ–π—Å–∫–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞): {result.get('unmatched_count', 0)}\n"

        info += f"\nüéâ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"

        self.info_text.insert(tk.END, info)
        self.log_info(
            f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(result['matches'])} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ {result['supplier_total']} —Ç–æ–≤–∞—Ä–æ–≤"
        )

    def clean_invisible_chars(self, text):
        """–£–±–∏—Ä–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if pd.isna(text):
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        text_str = str(text).strip()

        cleaned = " ".join(text_str.split())

        return cleaned if cleaned else None

    def _calculate_similarity(self, text1, text2):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
        if not text1 or not text2:
            return 0.0

        import difflib

        return difflib.SequenceMatcher(
            None, str(text1).lower(), str(text2).lower()
        ).ratio()

    def clean_article_vitya_simple(self, article):
        """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –í–∏—Ç–∏ - —É–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–µ—Ñ–∏–∫—Å '000, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í–°–ï–ì–î–ê int"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏–ª–∏ None
        if pd.isna(article) or article is None:
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        cleaned = str(article).strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∞—Å—å –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ 'nan'
        if not cleaned or cleaned.lower() == "nan":
            return None

        # 1. –£–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
        cleaned = cleaned.replace("'", "")

        # 2. –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '000 –µ—Å–ª–∏ –µ—Å—Ç—å
        if cleaned.startswith("000"):
            cleaned = cleaned[3:]

        # 3. –í–°–ï–ì–î–ê –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        if cleaned.isdigit():
            return int(cleaned) if cleaned else 0
        elif cleaned == "":
            return 0
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            import re

            digits = re.findall(r"\d+", cleaned)
            if digits:
                return int("".join(digits))
            else:
                return 0

    def filter_by_price(self, df, price_column="price_usd"):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ price_usd —è–≤–ª—è–µ—Ç—Å—è NaN, –ø—É—Å—Ç–æ–π –∏–ª–∏ <= 0

        Args:
            df: DataFrame –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            price_column: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ü–µ–Ω–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'price_usd')

        Returns:
            DataFrame —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if price_column not in df.columns:
            self.log_info(
                f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{price_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )
            return df

        initial_count = len(df)

        # –§–∏–ª—å—Ç—Ä—É–µ–º: —É–±–∏—Ä–∞–µ–º NaN, –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ü–µ–Ω—ã <= MIN_PRICE_THRESHOLD
        filtered_df = df[
            (df[price_column].notna()) & (df[price_column] > MIN_PRICE_THRESHOLD)
        ].copy()

        final_count = len(filtered_df)
        removed_count = initial_count - final_count

        if removed_count > 0:
            self.log_info(f"üí∞ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ ({price_column}):")
            self.log_info(f"   –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {removed_count}")
            self.log_info(f"   –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {final_count}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            nan_count = df[price_column].isna().sum()
            zero_count = (df[price_column] == 0).sum()
            low_price_count = (
                (df[price_column] > 0) & (df[price_column] <= MIN_PRICE_THRESHOLD)
            ).sum()

            self.log_info(f"   üìä –ü—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è:")
            if nan_count > 0:
                self.log_info(f"      NaN/–ø—É—Å—Ç—ã–µ: {nan_count}")
            if zero_count > 0:
                self.log_info(f"      –ù—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã: {zero_count}")
            if low_price_count > 0:
                self.log_info(
                    f"      –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–µ (<={MIN_PRICE_THRESHOLD}): {low_price_count}"
                )
        else:
            self.log_info(
                f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ: –≤—Å–µ {final_count} —Å—Ç—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä"
            )

        return filtered_df

    def preprocess_vitya_fixed_v3(self, df):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –í–∏—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ü–µ–Ω–µ –∏ –±–∞–ª–∞–Ω—Å—É"""
        self.log_info("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –í–∏—Ç—è...")

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        processed_df = df.copy()
        initial_count = len(processed_df)

        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN, –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        self.log_info("üí∞ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ...")
        processed_df = self.filter_by_price(processed_df, "price_usd")

        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –ò –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ
        if "balance" in processed_df.columns:
            self.log_info(
                f"üì¶ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ {VITYA_BALANCE_AVAILABLE})..."
            )

            balance_before = len(processed_df)
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫—É –∑–Ω–∞—á–µ–Ω–∏–π
            processed_df = processed_df[
                processed_df["balance"].isin(VITYA_BALANCE_AVAILABLE)
            ].copy()
            balance_after = len(processed_df)

            removed_balance = balance_before - balance_after
            if removed_balance > 0:
                self.log_info(f"   üì¶ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ –±–µ–∑ –Ω–∞–ª–∏—á–∏—è: {removed_balance}")
                self.log_info(f"   üì¶ –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫ –≤ –Ω–∞–ª–∏—á–∏–∏: {balance_after}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É –±–∞–ª–∞–Ω—Å–∞
                for status in VITYA_BALANCE_AVAILABLE:
                    status_count = (processed_df["balance"] == status).sum()
                    if status_count > 0:
                        self.log_info(f"      '{status}': {status_count} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                self.log_info(f"   üì¶ –í—Å–µ {balance_after} —Å—Ç—Ä–æ–∫ –∏–º–µ—é—Ç —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏")
        else:
            self.log_info(
                "‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü 'balance' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )

        # 3. –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        if "article_vitya" in processed_df.columns:
            self.log_info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –í–∏—Ç—è...")

            processed_df["article_vitya"] = processed_df["article_vitya"].apply(
                self.clean_article_vitya_simple
            )

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        processed_df["supplier_name"] = "–í–∏—Ç—è"

        # 5. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if "article_vitya" in processed_df.columns:
            valid_articles = processed_df["article_vitya"].notna().sum()
            self.log_info(f"üî¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –í–∏—Ç—è: {valid_articles}")
            if valid_articles > 0:
                sample_articles = (
                    processed_df["article_vitya"].dropna().head(5).tolist()
                )
                self.log_info(f"üìù –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {sample_articles}")

        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_count = len(processed_df)
        total_removed = initial_count - final_count

        self.log_info(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –í–∏—Ç—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        self.log_info(f"   üìä –ò—Å—Ö–æ–¥–Ω–æ: {initial_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –ò—Ç–æ–≥–æ: {final_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –£–¥–∞–ª–µ–Ω–æ: {total_removed} —Å—Ç—Ä–æ–∫")

        return processed_df

    def preprocess_dimi_fixed(self, df):
        """–£–ü–†–û–©–ï–ù–ù–ê–Ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –î–∏–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        self.log_info("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –î–∏–º–∞...")

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        processed_df = df.copy()
        initial_count = len(processed_df)

        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN, –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        self.log_info("üí∞ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ...")
        processed_df = self.filter_by_price(processed_df, "price_usd")

        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ balance –∏–ª–∏ balance1 = "–û–∂–∏–¥–∞–µ—Ç—Å—è"
        balance_columns = ["balance", "balance1"]
        found_balance_columns = [
            col for col in balance_columns if col in processed_df.columns
        ]

        if found_balance_columns:
            self.log_info(
                f"üì¶ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (—É–±–∏—Ä–∞–µ–º '{DIMI_BALANCE_EXPECTED}')..."
            )

            balance_before = len(processed_df)

            # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ: –ù–ò balance, –ù–ò balance1 –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "–û–∂–∏–¥–∞–µ—Ç—Å—è"
            for col in found_balance_columns:
                processed_df = processed_df[processed_df[col] != DIMI_BALANCE_EXPECTED]

            processed_df = processed_df.copy()
            balance_after = len(processed_df)

            removed_balance = balance_before - balance_after
            if removed_balance > 0:
                self.log_info(
                    f"   üì¶ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å '{DIMI_BALANCE_EXPECTED}': {removed_balance}"
                )
                self.log_info(f"   üì¶ –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫ –≤ –Ω–∞–ª–∏—á–∏–∏: {balance_after}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
                for col in found_balance_columns:
                    expected_count = (df[col] == DIMI_BALANCE_EXPECTED).sum()
                    if expected_count > 0:
                        self.log_info(
                            f"      {col}: {expected_count} —Å—Ç—Ä–æ–∫ —Å '{DIMI_BALANCE_EXPECTED}'"
                        )
            else:
                self.log_info(
                    f"   üì¶ –í—Å–µ {balance_after} —Å—Ç—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –±–∞–ª–∞–Ω—Å—É"
                )
        else:
            self.log_info(
                "‚ö†Ô∏è –°—Ç–æ–ª–±—Ü—ã balance/balance1 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )

        # 3. –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        if "article_dimi" in processed_df.columns:
            self.log_info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –î–∏–º–∞...")

            def clean_article_dimi_simple(article):
                """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –î–∏–º—ã - –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–µ—Ñ–∏–∫—Å '000"""
                if pd.isna(article):
                    return None

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                cleaned = str(article).strip()

                if not cleaned or cleaned.lower() == "nan":
                    return None

                # –£–±–∏—Ä–∞–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
                cleaned = cleaned.replace("'", "")

                # –î–õ–Ø –î–ò–ú–´: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '000 –µ—Å–ª–∏ –µ—Å—Ç—å
                if cleaned.startswith("000"):
                    cleaned = cleaned[3:]

                return cleaned if cleaned else None

            processed_df["article_dimi"] = processed_df["article_dimi"].apply(
                clean_article_dimi_simple
            )

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        processed_df["supplier_name"] = "–î–∏–º–∞"

        # 5. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if "article_dimi" in processed_df.columns:
            valid_articles = processed_df["article_dimi"].notna().sum()
            self.log_info(f"üî¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –î–∏–º–∞: {valid_articles}")
            if valid_articles > 0:
                sample_articles = processed_df["article_dimi"].dropna().head(5).tolist()
                self.log_info(f"üìù –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {sample_articles}")

        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_count = len(processed_df)
        total_removed = initial_count - final_count

        self.log_info(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –î–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        self.log_info(f"   üìä –ò—Å—Ö–æ–¥–Ω–æ: {initial_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –ò—Ç–æ–≥–æ: {final_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –£–¥–∞–ª–µ–Ω–æ: {total_removed} —Å—Ç—Ä–æ–∫")

        return processed_df

    def preprocess_supplier_data(self, df, config_name):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥–∞"""

        if config_name == "vitya":
            return self.preprocess_vitya_fixed_v3(df)
        elif config_name == "dimi":
            return self.preprocess_dimi_fixed(df)
        else:
            self.log_info(f"üìã –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {config_name} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return df

    def detect_config_by_filename(self, file_path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""

        filename = os.path.basename(file_path).upper()  # –ò–º—è —Ñ–∞–π–ª–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

        self.log_info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {filename}")

        # –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        if "JHT" in filename:
            detected_config = "vitya"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å –í–∏—Ç–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç JHT)")

        elif "DIMI" in filename or "DIMA" in filename:
            detected_config = "dimi"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å –î–∏–º—ã (—Å–æ–¥–µ—Ä–∂–∏—Ç DiMi/DiMa)")

        elif "BASE" in filename or "–ë–ê–ó–ê" in filename:
            detected_config = "base"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–¥–µ—Ä–∂–∏—Ç BASE/–ë–ê–ó–ê)")

        else:
            detected_config = "auto"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.log_info("‚ÑπÔ∏è –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AUTO")

        return detected_config

    def find_product_code_in_name(self, product_name):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        if pd.isna(product_name) or not isinstance(product_name, str):
            return None

        import re

        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Ç–∏—Ä–µ)
        patterns = [
            # –ö–æ–¥—ã —Å —Ç–∏—Ä–µ: AC-M25-SC, P27QDA-RGP –∏ —Ç.–¥.
            r"\b[A-Z0-9]+(?:-[A-Z0-9]+)+\b",  # –û–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –±–ª–æ–∫–æ–≤ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ
            # –ö–æ–¥—ã –±–µ–∑ —Ç–∏—Ä–µ: MJKDDYJ02HT, XM123 –∏ —Ç.–¥.
            r"\b[A-Z]{2,}[0-9]{2,}[A-Z]*\b",  # –ë—É–∫–≤—ã-—Ü–∏—Ñ—Ä—ã-–±—É–∫–≤—ã (XM123, MJKDDYJ02HT)
            r"\b[0-9]{3,}[A-Z]{1,3}\b",  # –¶–∏—Ñ—Ä—ã-–±—É–∫–≤—ã (123XM)
            r"\b[A-Z][0-9]{4,}[A-Z][0-9]+\b",  # –ü–∞—Ç—Ç–µ—Ä–Ω M2319E1
            # –ë—Ä–µ–Ω–¥—ã –∏ –∫–æ–¥—ã —Ç–æ–ª—å–∫–æ –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤: GREENOE, XIAOMI, SAMSUNG –∏ —Ç.–¥.
            r"\b[A-Z]{4,8}\b",  # 4-8 –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –ø–æ–¥—Ä—è–¥ (GREENOE, XIAOMI, SAMSUNG)
            # –ö–æ–¥—ã —Ç–∏–ø–∞ C60, C20, D30 –∏ —Ç.–¥. (–±—É–∫–≤–∞ + —Ü–∏—Ñ—Ä—ã)
            r"\b[A-Z][0-9]{1,3}\b",  # C60, C20, D30
            # –ö–æ–¥—ã —Ç–∏–ø–∞ –°20 (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ + —Ü–∏—Ñ—Ä—ã)
            r"\b[–ê-–Ø][0-9]{1,3}\b",  # –°20, –î30
        ]

        for pattern in patterns:
            matches = re.findall(pattern, product_name.upper())
            if matches:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞
                for match in matches:
                    # –ò—Å–∫–ª—é—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–∏–ø–∞ "60000mah", "100w", "20000mah" –∏ —Ç.–¥.
                    if re.match(r"^\d+mah$|^\d+w$|^\d+wh$|^\d+ma$", match.lower()):
                        continue

                    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–¥—ã (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
                    if re.match(r"^\d{5,}$", match):
                        continue

                    # –ò—Å–∫–ª—é—á–∞–µ–º –∫–æ–¥—ã —Ç–∏–ø–∞ "USB-C", "POWER" –∏ —Ç.–¥.
                    if match in ["USB-C", "POWER", "PORTABLE", "CHARGER", "BANK"]:
                        continue

                    # –î–ª—è –±—Ä–µ–Ω–¥–æ–≤ (—Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã) –∏—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    if re.match(r"^[A-Z]{4,8}$", match) and len(match) > 8:
                        continue

                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    return match

        return None

    def find_product_code_in_brackets(self, product_name):
        """
        –ü–æ–∏—Å–∫ –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–∫–æ–±–∫–∞—Ö –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        –ò—â–µ—Ç –∫–æ–¥—ã —Ç–∏–ø–∞ (P27QDA-RGP), (XM123) –∏ —Ç.–¥.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–≥–ª–∞–≤–Ω—ã–µ/—Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–∏—Ä–µ
        """

        if pd.isna(product_name) or not isinstance(product_name, str):
            return None

        import re

        # –ò—â–µ–º –∫–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–¥–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö: (–ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Å–∫–æ–±–æ–∫)
        bracket_pattern = r"\(([^)]+)\)"

        matches = re.findall(bracket_pattern, product_name)

        if matches:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            code = matches[0].strip().upper()

            # –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–∑–∞–≥–ª–∞–≤–Ω—ã–µ/—Å—Ç—Ä–æ—á–Ω—ã–µ/–∫–∏—Ä–∏–ª–ª–∏—Ü–∞), —Ü–∏—Ñ—Ä—ã –∏ —Ç–∏—Ä–µ, –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞
            if re.match(r"^[A-Za-z–ê-–Ø–∞-—è0-9\-]+$", code) and len(code) >= 4:
                return code

        return None

    def find_battery_capacity(self, product_name):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏ (mAh) –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

        –ü—Ä–∏–º–µ—Ä—ã:
        - "–ü–æ–≤–µ—Ä–±–∞–Ω–∫ GREENOE Protable Power bank 60000mah 100w (C60)" -> "60000"
        - "–ü–æ–≤–µ—Ä–±–∞–Ω–∫ GREENOE Protable Power bank 20000MAH 25w (—Ü–≤–µ—Ç white)" -> "20000"
        - "Power Bank 10000mAh Portable Charger" -> "10000"
        """
        if pd.isna(product_name) or not isinstance(product_name, str):
            return None

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
        name_lower = product_name.lower()

        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –µ–º–∫–æ—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏
        import re

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–º–∫–æ—Å—Ç–∏: —á–∏—Å–ª–æ + mah/mAh/MAH
        patterns = [
            r"(\d+)\s*mah",  # 60000 mah
            r"(\d+)mah",  # 60000mah
            r"(\d+)\s*mah",  # 60000mAh
            r"(\d+)mah",  # 60000mAh
            r"(\d+)\s*–º–∞—á",  # 60000 –º–∞—á (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞)
            r"(\d+)–º–∞—á",  # 60000–º–∞—á
            r"(\d+)\s*–º—á",  # 60000 –º—á (—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ)
            r"(\d+)–º—á",  # 60000–º—á
        ]

        for pattern in patterns:
            match = re.search(pattern, name_lower)
            if match:
                capacity = match.group(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ–º–∫–æ—Å—Ç–∏ (–æ—Ç 50 –¥–æ 999999)
                try:
                    capacity_int = int(capacity)
                    if 5 <= capacity_int <= 999999:
                        return capacity
                except ValueError:
                    continue

        return None

    def find_product_code_unified(self, product_name):
        """
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ —Ç–æ–≤–∞—Ä–∞
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) –ö–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö (‚â•4 —Å–∏–º–≤–æ–ª–æ–≤), 2) –ë—Ä–µ–Ω–¥—ã –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ (GREENOE, XIAOMI, SAMSUNG), 3) –î—Ä—É–≥–∏–µ –∫–æ–¥—ã (‚â•4 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        if pd.isna(product_name) or not isinstance(product_name, str):
            return None

        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –Ω–æ —Ç–æ–ª—å–∫–æ ‚â•4 —Å–∏–º–≤–æ–ª–æ–≤)
        bracket_code = self.find_product_code_in_brackets(product_name)
        if bracket_code:
            return bracket_code

        # 2. –ò—â–µ–º –±—Ä–µ–Ω–¥—ã –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ (GREENOE, XIAOMI, SAMSUNG)
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        name_upper = product_name.upper()

        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
        brands = [
            "GREENOE",
            "XIAOMI",
            "SAMSUNG",
            "APPLE",
            "HUAWEI",
            "OPPO",
            "VIVO",
            "ONEPLUS",
        ]

        for brand in brands:
            if brand in name_upper:
                return brand

        # 3. –ò—â–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥—ã –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –∑–∞–≥–ª–∞–≤–Ω—ã–µ, ‚â•4 —Å–∏–º–≤–æ–ª–æ–≤)
        name_code = self.find_product_code_in_name(product_name)
        if name_code and len(name_code) >= 4:
            return name_code

        return None

    def get_supplier_article_column(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
        if self.current_config == "vitya":
            return "article_vitya"
        elif self.current_config == "dimi":
            return "article_dimi"
        else:
            return "article"

    def get_supplier_price_column(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Ü–µ–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
        if self.current_config == "vitya":
            return "price_usd"
        elif self.current_config == "dimi":
            return "price_usd"
        else:
            return "price"

    def get_base_article_column(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –±–∞–∑–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
        if self.current_config == "vitya":
            return "article_vitya"
        elif self.current_config == "dimi":
            return "article_dimi"
        else:
            return "article"

    def get_base_price_column(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Ü–µ–Ω—ã –≤ –±–∞–∑–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"""
        if self.current_config == "vitya":
            return "price_vitya_usd"
        elif self.current_config == "dimi":
            return "price_dimi_usd"
        else:
            return "price"

    def get_column_data_type(self, column_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã"""
        base_config_path = "excel_loader/configs/base_config.json"
        try:
            with open(base_config_path, "r", encoding="utf-8") as f:
                base_config = json.load(f)
            data_types = base_config.get("data_types", {})
            return data_types.get(column_name, "int")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é int
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –±–∞–∑—ã: {e}")
            return "int"

    def get_excel_column_name_from_config(self, pandas_column_name):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ Excel –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã
            base_config_path = "excel_loader/configs/base_config.json"
            with open(base_config_path, "r", encoding="utf-8") as f:
                base_config = json.load(f)

            # –ò—â–µ–º –≤ column_mapping –æ–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            column_mapping = base_config.get("column_mapping", {})
            for excel_name, pandas_name in column_mapping.items():
                if pandas_name == pandas_column_name:
                    return excel_name

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è
            return pandas_column_name

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")
            return pandas_column_name

    def get_pandas_column_name_from_excel_name(self, excel_column_name):
        """–ü–æ–ª—É—á–∏—Ç—å pandas –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è Excel"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã
            base_config_path = "excel_loader/configs/base_config.json"
            with open(base_config_path, "r", encoding="utf-8") as f:
                base_config = json.load(f)

            # –ò—â–µ–º –≤ column_mapping —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            column_mapping = base_config.get("column_mapping", {})
            for excel_name, pandas_name in column_mapping.items():
                if excel_name.lower().strip() == excel_column_name.lower().strip():
                    return pandas_name

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è
            return excel_column_name

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã: {e}")
            return excel_column_name

    def _get_supplier_name_column(self, supplier_df):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

        Args:
            supplier_df: DataFrame –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ supplier_df –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫–∏
        if (
            supplier_df is None
            or supplier_df.empty
            or not hasattr(supplier_df, "columns")
        ):
            return None

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–ª–æ–Ω–∫—É 'name'
        if "name" in supplier_df.columns:
            return "name"

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É
        if self.current_config == "vitya":
            # –î–ª—è –í–∏—Ç–∏ –∏—â–µ–º –∫–æ–ª–æ–Ω–∫—É 'Unnamed: 1' (–∫–∞–∫ –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
            for col in supplier_df.columns:
                if "Unnamed: 1" in str(col):
                    return col
        elif self.current_config == "dimi":
            # –î–ª—è –î–∏–º—ã –∏—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ (–æ–±—ã—á–Ω–æ –≤—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–∫–∞)
            if len(supplier_df.columns) > 1:
                return supplier_df.columns[1]

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None

    def _get_base_name_column(self, base_df):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        Args:
            base_df: DataFrame –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ base_df –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫–∏
        if base_df is None or base_df.empty or not hasattr(base_df, "columns"):
            return None

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–ª–æ–Ω–∫—É 'name'
        if "name" in base_df.columns:
            return "name"

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –∫–æ–ª–æ–Ω–∫—É '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' (–∫–∞–∫ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –±–∞–∑—ã)
        if "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" in base_df.columns:
            return "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None

    def safe_color_processing(self, color_value):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º NaN –∑–Ω–∞—á–µ–Ω–∏–π

        Args:
            color_value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, NaN, None)

        Returns:
            str: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if color_value is None or pd.isna(color_value):
            return ""

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        color_str = str(color_value).strip()
        if not color_str or color_str.lower() in ["nan", "none", ""]:
            return ""

        return color_str.lower()

    def get_base_price_from_config(self, row):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, price_vitya_usd –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ vitya)
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω

        Args:
            row: –°—Ç—Ä–æ–∫–∞ DataFrame

        Returns:
            float: –¶–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ 0.0 –µ—Å–ª–∏ —Ü–µ–Ω–∞ –ø—É—Å—Ç–∞—è
        """
        base_price_col = self.get_base_price_column()
        if (
            base_price_col in row
            and pd.notna(row[base_price_col])
            and row[base_price_col] > 0
        ):
            return float(row[base_price_col])
        return 0.0

    def get_min_base_price(self, row):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏–∑ –∫–æ–ª–æ–Ω–æ–∫ price_dimi_usd, price_vitya_usd, price_mila_usd
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É

        Args:
            row: –°—Ç—Ä–æ–∫–∞ DataFrame

        Returns:
            float: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–ª–∏ 0.0 –µ—Å–ª–∏ –≤—Å–µ —Ü–µ–Ω—ã –ø—É—Å—Ç—ã–µ
        """
        prices = []
        for col in ["price_dimi_usd", "price_vitya_usd", "price_mila_usd"]:
            if col in row and pd.notna(row[col]) and row[col] > 0:
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ float –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ç–∏–ø–æ–≤
                price = float(row[col])
                prices.append(price)

        return min(prices) if prices else 0.0

    def compare_by_articles(self, supplier_df, base_df):
        """–ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º"""
        self.set_status("üîç –ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º...", "loading")
        self.update_progress(1, "–ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
        supplier_article_col = self.get_supplier_article_column()
        supplier_price_col = self.get_supplier_price_column()
        base_article_col = self.get_base_article_column()
        base_price_col = self.get_base_price_column()

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
        supplier_clean = supplier_df.dropna(
            subset=[supplier_article_col, supplier_price_col]
        )
        base_clean = base_df.dropna(subset=[base_article_col])

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.set_status("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...", "loading")
        self.update_progress(2, "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")

        supplier_dict = {}
        for _, row in supplier_clean.iterrows():
            article_value = row[supplier_article_col]
            # –î–ª—è article_vitya –∏—Å–ø–æ–ª—å–∑—É–µ–º int –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –¥–ª—è –¥—Ä—É–≥–∏—Ö - —Å—Ç—Ä–æ–∫—É
            if self.current_config == "vitya" and isinstance(article_value, int):
                article = str(article_value)
            else:
                article = str(article_value).strip()

            if article and article != "nan" and article != "None":
                # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—É –∫ float –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ç–∏–ø–æ–≤
                price = (
                    float(row[supplier_price_col])
                    if pd.notna(row[supplier_price_col])
                    else 0.0
                )
                supplier_dict[article] = {
                    "price": price,
                    "name": row.get("name", ""),
                    "index": row.name,
                    "color": self.safe_color_processing(
                        row.get("color")
                    ),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                }

        self.set_status("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", "loading")
        self.update_progress(2, "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        base_dict = {}
        for _, row in base_clean.iterrows():
            article_value = row[base_article_col]
            # –î–ª—è article_vitya –∏—Å–ø–æ–ª—å–∑—É–µ–º int –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –¥–ª—è –¥—Ä—É–≥–∏—Ö - —Å—Ç—Ä–æ–∫—É
            if self.current_config == "vitya" and isinstance(article_value, int):
                article = str(article_value)
            else:
                article = str(article_value).strip()

            if article and article != "nan" and article != "None":
                base_dict[article] = {
                    "price": self.get_base_price_from_config(
                        row
                    ),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    "name": row.get("name", ""),
                    "index": row.name,
                    "color": self.safe_color_processing(
                        row.get("color")
                    ),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        self.set_status("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º...", "loading")
        self.update_progress(3, "–ê–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º")

        matches = []
        price_changes = []
        new_items = []

        for article, supplier_data in supplier_dict.items():
            if article in base_dict:
                base_data = base_dict[article]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ü–µ–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
                price_diff = abs(supplier_data["price"] - base_data["price"])
                prices_equal = price_diff < 0.001

                self.log_info(
                    f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {article}: supplier={supplier_data['price']}, base={base_data['price']}, diff={price_diff:.6f}, equal={prices_equal}"
                )

                match_info = {
                    "article": article,
                    "supplier_price": supplier_data["price"],
                    "base_price": base_data["price"],
                    "name": supplier_data["name"] or base_data["name"],
                    "price_diff": supplier_data["price"] - base_data["price"],
                    "price_change_percent": 0,
                    "base_index": base_data[
                        "index"
                    ],  # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–∑–µ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                }

                if base_data["price"] > 0:
                    match_info["price_change_percent"] = (
                        (supplier_data["price"] - base_data["price"])
                        / base_data["price"]
                        * 100
                    )

                matches.append(match_info)

                # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                self.log_info(
                    f"üîç –°–æ–∑–¥–∞–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {article}: supplier={supplier_data['price']} ({type(supplier_data['price'])}), base={base_data['price']} ({type(base_data['price'])}), change={match_info['price_change_percent']:.1f}%"
                )

                # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–±–æ–ª—å—à–µ 5%)
                if abs(match_info["price_change_percent"]) > 5:
                    price_changes.append(match_info)
            else:
                # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É –ø–æ–∏—Å–∫—É –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                (
                    fuzzy_match_name,
                    fuzzy_match_row,
                    fuzzy_match_color,
                    fuzzy_match_price,
                ) = self.find_item_by_fuzzy_matching(supplier_data["name"])

                new_items.append(
                    {
                        "article": article,  # –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        "price": supplier_data["price"],
                        "name": supplier_data["name"],
                        "color": supplier_data.get("color", ""),  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç
                        "supplier_article": article,  # –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–¥–ª—è –æ—Ç—á–µ—Ç–∞)
                        "base_article": "",  # –ê—Ä—Ç–∏–∫—É–ª –≤ –±–∞–∑–µ (–ø—É—Å—Ç–æ–π –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
                        "supplier_article_col": self.get_supplier_article_column(),  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        "base_article_col": self.get_base_article_column(),  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –±–∞–∑—ã
                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É –ø–æ–∏—Å–∫—É
                        "fuzzy_match_name": (
                            fuzzy_match_name if fuzzy_match_name != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ" else ""
                        ),
                        "fuzzy_match_row": (
                            fuzzy_match_row if fuzzy_match_row != "N/A" else ""
                        ),
                        "fuzzy_match_color": (
                            fuzzy_match_color if fuzzy_match_color != "N/A" else ""
                        ),
                        "fuzzy_match_price": (
                            fuzzy_match_price if fuzzy_match_price != "N/A" else ""
                        ),
                        "fuzzy_match_similarity": (
                            self._calculate_similarity(
                                supplier_data["name"], fuzzy_match_name
                            )
                            if fuzzy_match_name != "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                            else 0.0
                        ),
                    }
                )

        self.set_status("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ!", "success")
        self.update_progress(4, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        self.log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º: {len(matches)}")
        return {
            "matches": matches,
            "price_changes": price_changes,
            "new_items": new_items,
            "supplier_dict": supplier_dict,
            "base_dict": base_dict,
        }

    def compare_by_product_code_advanced(
        self, supplier_df, base_df, supplier_config, new_items_list=None
    ):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤ –∏ –µ–º–∫–æ—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏

        –õ–æ–≥–∏–∫–∞:
        1. –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
        3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏ (mAh)
        4. –ï—Å–ª–∏ —Ü–≤–µ—Ç–∞ –∏–ª–∏ –µ–º–∫–æ—Å—Ç—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏—â–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–¥–æ–≤
        """

        self.log_info(
            "üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤ –∏ –µ–º–∫–æ—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏..."
        )

        code_matches = []

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        new_articles_set = set()
        if new_items_list:
            new_articles_set = {item["article"] for item in new_items_list}
            self.log_info(
                f"üîç –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ {len(new_articles_set)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
            )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã)
        supplier_codes = {}
        for idx, row in supplier_df.iterrows():
            if "name" in row and pd.notna(row["name"]):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º
                article_key = str(row.get(f"article_{supplier_config}", ""))
                if new_items_list and article_key not in new_articles_set:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–º–∏

                code = self.find_product_code_unified(row["name"])
                if code:
                    # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—É –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
                    price_raw = (
                        row.get("price_usd", 0)
                        if supplier_config == "vitya"
                        else row.get("price_usd", 0)
                    )
                    try:
                        price_float = float(price_raw) if price_raw is not None else 0.0
                    except (ValueError, TypeError):
                        price_float = 0.0

                    supplier_color = self.safe_color_processing(row.get("color"))
                    supplier_capacity = self.find_battery_capacity(row["name"])

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –µ–º–∫–æ—Å—Ç—è–º–∏
                    if code not in supplier_codes:
                        supplier_codes[code] = []

                    supplier_codes[code].append(
                        {
                            "index": idx,
                            "name": row["name"],
                            "price": price_float,
                            "article": row.get(f"article_{supplier_config}", ""),
                            "color": supplier_color,
                            "capacity": supplier_capacity,
                        }
                    )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –±–∞–∑—ã
        base_codes = {}
        for idx, row in base_df.iterrows():
            if "name" in row and pd.notna(row["name"]):
                code = self.find_product_code_unified(row["name"])
                if code:
                    # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—ã –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
                    price_raw = row.get("price", 0)
                    price_vitya_raw = row.get("price_vitya_usd", 0)
                    price_dimi_raw = row.get("price_dimi_usd", 0)
                    price_mila_raw = row.get("price_mila_usd", 0)

                    try:
                        price_float = float(price_raw) if price_raw is not None else 0.0
                        price_vitya_float = (
                            float(price_vitya_raw)
                            if price_vitya_raw is not None
                            else 0.0
                        )
                        price_dimi_float = (
                            float(price_dimi_raw) if price_dimi_raw is not None else 0.0
                        )
                        price_mila_float = (
                            float(price_mila_raw) if price_mila_raw is not None else 0.0
                        )
                    except (ValueError, TypeError):
                        price_float = 0.0
                        price_vitya_float = 0.0
                        price_dimi_float = 0.0
                        price_mila_float = 0.0

                    base_color = self.safe_color_processing(row.get("color"))
                    base_capacity = self.find_battery_capacity(row["name"])

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –µ–º–∫–æ—Å—Ç—è–º–∏
                    if code not in base_codes:
                        base_codes[code] = []

                    base_codes[code].append(
                        {
                            "index": idx,
                            "name": row["name"],
                            "price": price_float,
                            "article": row.get("article", ""),
                            "color": base_color,
                            "capacity": base_capacity,
                            "price_vitya_usd": price_vitya_float,
                            "price_dimi_usd": price_dimi_float,
                            "price_mila_usd": price_mila_float,
                        }
                    )

            # –¢–∞–∫–∂–µ –∏—â–µ–º –∫–æ–¥—ã –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            for supplier in ["vitya", "dimi", "mila"]:
                article_col = f"article_{supplier}"
                if article_col in row and pd.notna(row[article_col]):
                    article_str = str(row[article_col])
                    code = self.find_product_code_unified(article_str)
                    if code:
                        # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—É –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
                        price_raw = row.get("price", 0)
                        try:
                            price_float = (
                                float(price_raw) if price_raw is not None else 0.0
                            )
                        except (ValueError, TypeError):
                            price_float = 0.0

                        base_color = self.safe_color_processing(row.get("color"))
                        base_capacity = self.find_battery_capacity(row["name"])

                        if code not in base_codes:
                            base_codes[code] = []

                        base_codes[code].append(
                            {
                                "index": idx,
                                "name": row["name"],
                                "price": price_float,
                                "article": row.get("article", ""),
                                "color": base_color,
                                "capacity": base_capacity,
                                "price_vitya_usd": price_vitya_float,
                                "price_dimi_usd": price_dimi_float,
                                "price_mila_usd": price_mila_float,
                            }
                        )

        self.log_info(
            f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–¥–æ–≤: –ø–æ—Å—Ç–∞–≤—â–∏–∫ {len(supplier_codes)}, –±–∞–∑–∞ {len(base_codes)}"
        )

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        for code, supplier_variants in supplier_codes.items():
            if code in base_codes:
                base_variants = base_codes[code]

                self.log_info(
                    f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ {code}: {len(supplier_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, {len(base_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–∞–∑—ã"
                )

                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –±–∞–∑–µ
                for supplier_variant in supplier_variants:
                    supplier_color = supplier_variant["color"]
                    supplier_capacity = supplier_variant["capacity"]
                    best_match = None
                    best_color_match = False
                    best_capacity_match = False

                    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É –ò –µ–º–∫–æ—Å—Ç–∏
                    for base_variant in base_variants:
                        base_color = base_variant["color"]
                        base_capacity = base_variant["capacity"]

                        color_match = supplier_color == base_color
                        capacity_match = supplier_capacity == base_capacity

                        if color_match and capacity_match:
                            best_match = base_variant
                            best_color_match = True
                            best_capacity_match = True
                            self.log_info(
                                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É –∏ –µ–º–∫–æ—Å—Ç–∏: {supplier_color}, {supplier_capacity}mAh"
                            )
                            break

                    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ü–≤–µ—Ç—É
                    if not best_match:
                        for base_variant in base_variants:
                            base_color = base_variant["color"]
                            if supplier_color == base_color:
                                best_match = base_variant
                                best_color_match = True
                                best_capacity_match = False
                                self.log_info(
                                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É (–µ–º–∫–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è): {supplier_color}, {supplier_capacity}mAh vs {base_variant['capacity']}mAh"
                                )
                                break

                    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –µ–º–∫–æ—Å—Ç–∏
                    if not best_match:
                        for base_variant in base_variants:
                            base_capacity = base_variant["capacity"]
                            if supplier_capacity == base_capacity:
                                best_match = base_variant
                                best_color_match = False
                                best_capacity_match = True
                                self.log_info(
                                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –µ–º–∫–æ—Å—Ç–∏ (—Ü–≤–µ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è): {supplier_capacity}mAh, {supplier_color} vs {base_variant['color']}"
                                )
                                break

                    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –±–∞–∑—ã
                    if not best_match and base_variants:
                        best_match = base_variants[0]
                        best_color_match = False
                        best_capacity_match = False
                        self.log_info(
                            f"‚ö†Ô∏è –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: —Ü–≤–µ—Ç {supplier_color} vs {best_match['color']}, –µ–º–∫–æ—Å—Ç—å {supplier_capacity}mAh vs {best_match['capacity']}mAh"
                        )

                    if best_match:
                        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        base_price = self.get_base_price_from_config(best_match)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ü–µ–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
                        price_diff = abs(supplier_variant["price"] - base_price)
                        prices_equal = price_diff < 0.001

                        self.log_info(
                            f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {code}: supplier={supplier_variant['price']} ({type(supplier_variant['price'])}), base={base_price} ({type(base_price)}), diff={price_diff:.6f}, equal={prices_equal}"
                        )

                        match_info = {
                            "code": code,
                            "supplier_name": supplier_variant["name"],
                            "base_name": best_match["name"],
                            "supplier_price": supplier_variant["price"],
                            "base_price": base_price,
                            "supplier_article": supplier_variant["article"],
                            "base_article": best_match["article"],
                            "supplier_color": supplier_variant["color"],
                            "base_color": best_match["color"],
                            "supplier_capacity": supplier_variant["capacity"],
                            "base_capacity": best_match["capacity"],
                            "base_index": best_match["index"],
                            "match_type": "product_code",
                            "color_match": best_color_match,
                            "capacity_match": best_capacity_match,
                            "price_change_percent": 0,
                        }

                        if base_price > 0:
                            match_info["price_change_percent"] = (
                                (supplier_variant["price"] - base_price)
                                / base_price
                                * 100
                            )

                        code_matches.append(match_info)

                        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        self.log_info(
                            f"üîç –°–æ–∑–¥–∞–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {code}: supplier={supplier_variant['price']} ({type(supplier_variant['price'])}), base={base_price} ({type(base_price)}), color_match={best_color_match}, capacity_match={best_capacity_match}, change={match_info['price_change_percent']:.1f}%"
                        )

        self.log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º: {len(code_matches)}")
        return code_matches

    def compare_by_bracket_codes_advanced(
        self, supplier_df, base_df, supplier_config, new_items_list=None
    ):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤ –∏ –µ–º–∫–æ—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏

        –õ–æ–≥–∏–∫–∞:
        1. –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
        3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏ (mAh)
        4. –ï—Å–ª–∏ —Ü–≤–µ—Ç–∞ –∏–ª–∏ –µ–º–∫–æ—Å—Ç—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏—â–µ–º —Ç–æ—Ç –∂–µ –∫–æ–¥ —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–¥–æ–≤
        """

        self.log_info(
            "üîç –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö —Å —É—á–µ—Ç–æ–º —Ü–≤–µ—Ç–æ–≤ –∏ –µ–º–∫–æ—Å—Ç–∏ –±–∞—Ç–∞—Ä–µ–∏..."
        )

        bracket_matches = []

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        new_articles_set = set()
        if new_items_list:
            new_articles_set = {item["article"] for item in new_items_list}
            self.log_info(
                f"üîç –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ {len(new_articles_set)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
            )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã)
        supplier_bracket_codes = {}
        for idx, row in supplier_df.iterrows():
            if "name" in row and pd.notna(row["name"]):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–≤–∞—Ä —è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–º
                article_key = str(row.get(f"article_{supplier_config}", ""))
                if new_items_list and article_key not in new_articles_set:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–º–∏

                code = self.find_product_code_in_brackets(row["name"])
                if code:
                    # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—É –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
                    price_raw = (
                        row.get("price_usd", 0)
                        if supplier_config == "vitya"
                        else row.get("price_usd", 0)
                    )
                    try:
                        price_float = float(price_raw) if price_raw is not None else 0.0
                    except (ValueError, TypeError):
                        price_float = 0.0

                    supplier_color = self.safe_color_processing(row.get("color"))
                    supplier_capacity = self.find_battery_capacity(row["name"])

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –µ–º–∫–æ—Å—Ç—è–º–∏
                    if code not in supplier_bracket_codes:
                        supplier_bracket_codes[code] = []

                    supplier_bracket_codes[code].append(
                        {
                            "index": idx,
                            "name": row["name"],
                            "price": price_float,
                            "article": row.get(f"article_{supplier_config}", ""),
                            "color": supplier_color,
                            "capacity": supplier_capacity,
                        }
                    )

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –±–∞–∑—ã
        base_bracket_codes = {}
        for idx, row in base_df.iterrows():
            if "name" in row and pd.notna(row["name"]):
                code = self.find_product_code_in_brackets(row["name"])
                if code:
                    # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—É –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
                    price_raw = row.get("price", 0)
                    try:
                        price_float = float(price_raw) if price_raw is not None else 0.0
                    except (ValueError, TypeError):
                        price_float = 0.0

                    base_color = self.safe_color_processing(row.get("color"))
                    base_capacity = self.find_battery_capacity(row["name"])

                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–¥—É, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –µ–º–∫–æ—Å—Ç—è–º–∏
                    if code not in base_bracket_codes:
                        base_bracket_codes[code] = []

                    base_bracket_codes[code].append(
                        {
                            "index": idx,
                            "name": row["name"],
                            "price": price_float,
                            "article": row.get("article", ""),
                            "matched_in": "name",
                            "color": base_color,
                            "capacity": base_capacity,
                        }
                    )

            # –¢–∞–∫–∂–µ –∏—â–µ–º –∫–æ–¥—ã –≤ —Å–∫–æ–±–∫–∞—Ö –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
            for supplier in ["vitya", "dimi", "mila"]:
                article_col = f"article_{supplier}"
                if article_col in row and pd.notna(row[article_col]):
                    article_str = str(row[article_col])
                    code = self.find_product_code_in_brackets(article_str)
                    if code:
                        # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—É –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
                        price_raw = row.get("price", 0)
                        try:
                            price_float = (
                                float(price_raw) if price_raw is not None else 0.0
                            )
                        except (ValueError, TypeError):
                            price_float = 0.0

                        base_color = self.safe_color_processing(row.get("color"))
                        base_capacity = self.find_battery_capacity(row["name"])

                        if code not in base_bracket_codes:
                            base_bracket_codes[code] = []

                        base_bracket_codes[code].append(
                            {
                                "index": idx,
                                "name": row["name"],
                                "price": price_float,
                                "article": row.get("article", ""),
                                "matched_in": article_col,
                                "color": base_color,
                                "capacity": base_capacity,
                            }
                        )

        self.log_info(
            f"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–¥–æ–≤ –≤ —Å–∫–æ–±–∫–∞—Ö: –ø–æ—Å—Ç–∞–≤—â–∏–∫ {len(supplier_bracket_codes)}, –±–∞–∑–∞ {len(base_bracket_codes)}"
        )

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        for code, supplier_variants in supplier_bracket_codes.items():
            if code in base_bracket_codes:
                base_variants = base_bracket_codes[code]

                self.log_info(
                    f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ —Å–∫–æ–±–∫–∞—Ö {code}: {len(supplier_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, {len(base_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–∞–∑—ã"
                )

                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –±–∞–∑–µ
                for supplier_variant in supplier_variants:
                    supplier_color = supplier_variant["color"]
                    supplier_capacity = supplier_variant["capacity"]
                    best_match = None
                    best_color_match = False
                    best_capacity_match = False

                    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É –ò –µ–º–∫–æ—Å—Ç–∏
                    for base_variant in base_variants:
                        base_color = base_variant["color"]
                        base_capacity = base_variant["capacity"]

                        color_match = supplier_color == base_color
                        capacity_match = supplier_capacity == base_capacity

                        if color_match and capacity_match:
                            best_match = base_variant
                            best_color_match = True
                            best_capacity_match = True
                            self.log_info(
                                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É –∏ –µ–º–∫–æ—Å—Ç–∏: {supplier_color}, {supplier_capacity}mAh"
                            )
                            break

                    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ü–≤–µ—Ç—É
                    if not best_match:
                        for base_variant in base_variants:
                            base_color = base_variant["color"]
                            if supplier_color == base_color:
                                best_match = base_variant
                                best_color_match = True
                                best_capacity_match = False
                                self.log_info(
                                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É (–µ–º–∫–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è): {supplier_color}, {supplier_capacity}mAh vs {base_variant['capacity']}mAh"
                                )
                                break

                    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ü–≤–µ—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –µ–º–∫–æ—Å—Ç–∏
                    if not best_match:
                        for base_variant in base_variants:
                            base_capacity = base_variant["capacity"]
                            if supplier_capacity == base_capacity:
                                best_match = base_variant
                                best_color_match = False
                                best_capacity_match = True
                                self.log_info(
                                    f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –µ–º–∫–æ—Å—Ç–∏ (—Ü–≤–µ—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è): {supplier_capacity}mAh, {supplier_color} vs {base_variant['color']}"
                                )
                                break

                    # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –±–∞–∑—ã
                    if not best_match and base_variants:
                        best_match = base_variants[0]
                        best_color_match = False
                        best_capacity_match = False
                        self.log_info(
                            f"‚ö†Ô∏è –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: —Ü–≤–µ—Ç {supplier_color} vs {best_match['color']}, –µ–º–∫–æ—Å—Ç—å {supplier_capacity}mAh vs {best_match['capacity']}mAh"
                        )

                    if best_match:
                        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        base_price = self.get_base_price_from_config(best_match)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ü–µ–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
                        price_diff = abs(supplier_variant["price"] - base_price)
                        prices_equal = price_diff < 0.001

                        self.log_info(
                            f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {code}: supplier={supplier_variant['price']} ({type(supplier_variant['price'])}), base={base_price} ({type(base_price)}), diff={price_diff:.6f}, equal={prices_equal}"
                        )

                        match_info = {
                            "code": code,
                            "supplier_name": supplier_variant["name"],
                            "base_name": best_match["name"],
                            "supplier_price": supplier_variant["price"],
                            "base_price": base_price,
                            "supplier_article": supplier_variant["article"],
                            "base_article": best_match["article"],
                            "supplier_color": supplier_variant["color"],
                            "base_color": best_match["color"],
                            "supplier_capacity": supplier_variant["capacity"],
                            "base_capacity": best_match["capacity"],
                            "matched_in": best_match["matched_in"],
                            "base_index": best_match["index"],
                            "match_type": "bracket_code",
                            "color_match": best_color_match,
                            "capacity_match": best_capacity_match,
                            "price_change_percent": 0,
                        }

                        if base_price > 0:
                            match_info["price_change_percent"] = (
                                (supplier_variant["price"] - base_price)
                                / base_price
                                * 100
                            )

                        bracket_matches.append(match_info)

                        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                        self.log_info(
                            f"üîç –°–æ–∑–¥–∞–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {code}: supplier={supplier_variant['price']} ({type(supplier_variant['price'])}), base={base_price} ({type(base_price)}), color_match={best_color_match}, capacity_match={best_capacity_match}, change={match_info['price_change_percent']:.1f}%"
                        )

        self.log_info(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö: {len(bracket_matches)}"
        )
        return bracket_matches

    def compare_by_fuzzy_string_matching(
        self, fuzzy_candidates, base_df, supplier_config
    ):
        """
        –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Å—Ç—Ä–æ–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—â–µ—Ç —Å—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ–≥–¥–∞ –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –∏ –∫–æ–¥–∞–º.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - fuzzy_candidates: —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ (—Ç–æ–≤–∞—Ä—ã –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π)
        - base_df: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        - supplier_config: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        """

        self.log_info("üîç –ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å—Ç—Ä–æ–∫...")
        self.log_info(
            f"üìä –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {len(fuzzy_candidates) if isinstance(fuzzy_candidates, list) else len(fuzzy_candidates) if isinstance(fuzzy_candidates, pd.DataFrame) else 'N/A'}"
        )

        import difflib

        fuzzy_matches = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fuzzy_candidates –Ω–µ –ø—É—Å—Ç–æ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∏–ª–∏ DataFrame)
        if (isinstance(fuzzy_candidates, list) and len(fuzzy_candidates) == 0) or (
            isinstance(fuzzy_candidates, pd.DataFrame) and fuzzy_candidates.empty
        ):
            self.log_info("‚ÑπÔ∏è –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            return fuzzy_matches

        # –ï—Å–ª–∏ —ç—Ç–æ DataFrame, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        if isinstance(fuzzy_candidates, pd.DataFrame):
            fuzzy_candidates = fuzzy_candidates.to_dict("records")
            self.log_info(
                f"üîÑ DataFrame –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–∑ {len(fuzzy_candidates)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
            )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ base_df –Ω–µ –ø—É—Å—Ç–æ–π –∏ —è–≤–ª—è–µ—Ç—Å—è DataFrame
        if base_df is None or base_df.empty:
            self.log_error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return fuzzy_matches

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        base_name_col = self._get_base_name_column(base_df)

        if not base_name_col:
            self.log_error(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ"
            )
            return fuzzy_matches

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–∞–∑—ã
        base_names = []
        for idx, row in base_df.iterrows():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            if base_name_col in row.index and pd.notna(row[base_name_col]):
                base_names.append(
                    {
                        "index": idx,
                        "name": str(row[base_name_col]).strip(),
                        "price": row.get("price", 0),
                        "article": row.get("article", ""),
                        "color": self.safe_color_processing(row.get("color")),
                    }
                )

        # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (0.3 = 30%)
        similarity_threshold = TRSH

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        for candidate in fuzzy_candidates:
            best_match = None
            best_ratio = 0

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            supplier_name_col = self._get_supplier_name_column(
                pd.DataFrame([candidate])
            )
            if not supplier_name_col or supplier_name_col not in candidate:
                continue

            candidate_name = str(candidate[supplier_name_col]).strip()

            for base_item in base_names:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π
                ratio = difflib.SequenceMatcher(
                    None, candidate_name.lower(), base_item["name"].lower()
                ).ratio()

                # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ –∏ –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
                if ratio >= similarity_threshold and ratio > best_ratio:
                    best_ratio = ratio
                    best_match = base_item

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if best_match:
                match_info = {
                    "supplier_index": candidate.get("index", 0),
                    "supplier_name": candidate_name,
                    "supplier_price": candidate.get("price_usd", 0),
                    "supplier_article": candidate.get("article", ""),
                    "supplier_color": self.safe_color_processing(
                        candidate.get("color")
                    ),
                    "base_index": best_match["index"],
                    "base_name": best_match["name"],
                    "base_price": best_match["price"],
                    "base_article": best_match["article"],
                    "base_color": best_match["color"],
                    "similarity_ratio": best_ratio,
                    "match_type": "fuzzy_string",
                    "matched_in": "name",
                }
                fuzzy_matches.append(match_info)

        self.log_info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(fuzzy_matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É –ø–æ–∏—Å–∫—É")
        return fuzzy_matches

    def auto_select_config(self, file_path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞"""

        detected_config = self.detect_config_by_filename(file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–æ–Ω—Ñ–∏–≥ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        available_configs = self.config_combo["values"]

        if detected_config in available_configs:
            self.config_combo.set(detected_config)
            self.log_info(f"üéØ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {detected_config}")
            return detected_config
        else:
            self.log_info(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {detected_config} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π")
            return self.config_var.get()

    def clear_info(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.info_text.delete(1.0, tk.END)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –ù–ï –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        self.comparison_result = None

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        if hasattr(self, "price_updated"):
            self.price_updated = False
            self.log_info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω —Å–±—Ä–æ—à–µ–Ω–æ")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.articles_added = False
        self.log_info("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–±—Ä–æ—à–µ–Ω–æ")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.update_buttons_state()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.set_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "info")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
        self.update_files_info()

        self.log_info("üßπ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—á–∏—â–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")

    def update_buttons_state(self, log_changes=True, articles_added_this_run=False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        file_loaded = self.current_df is not None
        file_state = "normal" if file_loaded else "disabled"

        self.show_data_button.config(state=file_state)
        self.save_data_button.config(state=file_state)
        self.compare_button.config(state=file_state)

        # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_done = self.comparison_result is not None
        comparison_state = "normal" if comparison_done else "disabled"

        self.report_button.config(state=comparison_state)

        # –ö–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã" –∞–∫—Ç–∏–≤–Ω–∞ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å –ò (—Ü–µ–Ω—ã –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ò–õ–ò –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã)
        update_prices_state = (
            "normal"
            if (file_loaded and (not self.price_updated or self.articles_added))
            else "disabled"
        )
        self.update_prices_button.config(state=update_prices_state)

        # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É" –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        has_new_items = False
        new_items_count = 0
        if self.comparison_result is not None:
            new_items = self.comparison_result.get("new_items", [])
            new_items_count = len(new_items)
            has_new_items = new_items_count > 0

        # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É" –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ò —Ç–æ–≤–∞—Ä—ã –µ—â–µ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        add_to_base_state = (
            "normal" if (has_new_items and not self.articles_added) else "disabled"
        )
        self.add_to_base_button.config(state=add_to_base_state)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if log_changes:
            if file_loaded:
                self.log_info("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã")
            if comparison_done:
                self.log_info("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –∫–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã")
            if file_loaded and not self.price_updated and not self.articles_added:
                self.log_info("‚úÖ –ü—Ä–∞–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω - –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∞–∫—Ç–∏–≤–Ω–∞")
            elif file_loaded and self.price_updated and not self.articles_added:
                self.log_info(
                    "üîí –ü—Ä–∞–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —Ü–µ–Ω—ã —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã - –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                )
            elif file_loaded and self.articles_added:
                self.log_info(
                    "üîÑ –ü—Ä–∞–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã - –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –∞–∫—Ç–∏–≤–Ω–∞"
                )
            if has_new_items and not self.articles_added:
                self.log_info(
                    f"üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {new_items_count} - –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞"
                )
            elif has_new_items and self.articles_added:
                self.log_info(
                    f"üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {new_items_count}, –Ω–æ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã - –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                )
            elif comparison_done and not has_new_items:
                self.log_info(
                    "‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                )
            if not file_loaded and not comparison_done:
                self.log_info("‚ö™ –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –∫–Ω–æ–ø–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
        self.update_files_info()

    def log_info(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
        self.logger.info(message)

        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ GUI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if hasattr(self, "info_text") and self.info_text is not None:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"[{timestamp}] {message}\n"
            self.info_text.insert(tk.END, log_message)
            self.info_text.see(tk.END)

    def log_error(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
        self.logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {message}")

        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ GUI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if hasattr(self, "info_text") and self.info_text is not None:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"[{timestamp}] ‚ùå –û–®–ò–ë–ö–ê: {message}\n"
            self.info_text.insert(tk.END, log_message)
            self.info_text.see(tk.END)

    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤ Excel"""
        self.log_info("üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç'")

        if self.comparison_result is None:
            self.log_info("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π"
            )
            return

        self.log_info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")

        try:
            from tkinter import filedialog
            import os

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            output_dir = "data/output"
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)
                self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            default_filename = f"summary_report_{timestamp}.xlsx"
            self.log_info(f"üìÅ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {default_filename}")

            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
                initialfile=default_filename,
                initialdir=output_dir,
            )

            self.log_info(
                f"üìÅ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å: {file_path if file_path else '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}"
            )
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return

        if file_path:
            try:
                self.log_info("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
                self.set_status("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", "save")
                self.root.update()

                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                self.log_info("üìä –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
                summary_data = [
                    {
                        "–ü–æ—Å—Ç–∞–≤—â–∏–∫": self.current_config.upper(),
                        "–¢–æ–≤–∞—Ä–æ–≤": self.comparison_result["supplier_total"],
                        "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π": len(self.comparison_result["matches"]),
                        "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π": f"{self.comparison_result['match_rate']:.1f}%",
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω": len(self.comparison_result["price_changes"]),
                        "–ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤": len(self.comparison_result["new_items"]),
                        "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º": len(
                            self.comparison_result.get("code_matches", [])
                        ),
                    }
                ]
                self.log_info(f"‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {summary_data[0]}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
                self.log_info("üìù –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª...")
                with pd.ExcelWriter(file_path, engine="openpyxl") as writer:
                    # –õ–∏—Å—Ç —Å –æ–±—â–µ–π —Å–≤–æ–¥–∫–æ–π
                    self.log_info("üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–≤–æ–¥–∫–∞'...")
                    summary_df = pd.DataFrame(summary_data)
                    summary_df.to_excel(writer, sheet_name="–°–≤–æ–¥–∫–∞", index=False)

                    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –°–≤–æ–¥–∫–∏
                    worksheet = writer.sheets["–°–≤–æ–¥–∫–∞"]
                    worksheet.column_dimensions["A"].width = 20  # –ü–æ—Å—Ç–∞–≤—â–∏–∫
                    worksheet.column_dimensions["B"].width = 12  # –¢–æ–≤–∞—Ä–æ–≤
                    worksheet.column_dimensions["C"].width = 15  # –°–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    worksheet.column_dimensions["D"].width = 18  # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    worksheet.column_dimensions["E"].width = 15  # –ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
                    worksheet.column_dimensions["F"].width = 15  # –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                    worksheet.column_dimensions["G"].width = 20  # –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º

                    # –õ–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
                    if self.comparison_result["matches"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è' ({len(self.comparison_result['matches'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –∞—Ä—Ç–∏–∫—É–ª—ã –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        matches_with_details = []
                        for match in self.comparison_result["matches"]:
                            match_with_details = match.copy()
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º article, code –∏–ª–∏ supplier_article
                            article = match.get("article", "")
                            if not article:
                                article = match.get("code", "")
                            if not article:
                                article = match.get("supplier_article", "")
                            if not article:
                                article = "N/A"  # Fallback

                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                            if (
                                article
                                and article != "N/A"
                                and self.base_df is not None
                            ):
                                # –î–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –∏—â–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
                                if "base_index" in match:
                                    # –î–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ–º base_index
                                    base_index = match.get("base_index")
                                    if (
                                        base_index is not None
                                        and base_index in self.base_df.index
                                    ):
                                        base_row = self.base_df.loc[base_index]
                                        match_with_details["base_article"] = (
                                            base_row.get("article", "")
                                        )
                                        match_with_details["base_color"] = (
                                            self.safe_color_processing(
                                                base_row.get("color", "")
                                            )
                                        )
                                        match_with_details["base_price"] = (
                                            self.get_base_price_from_config(base_row)
                                        )
                                    else:
                                        match_with_details["base_article"] = article
                                        match_with_details["base_color"] = ""
                                        match_with_details["base_price"] = 0
                                else:
                                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
                                    try:
                                        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –±–∞–∑—ã
                                        base_article_col = (
                                            self.get_base_article_column()
                                        )
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
                                        if base_article_col in self.base_df.columns:
                                            base_matches = self.base_df[
                                                self.base_df[base_article_col]
                                                == article
                                            ]
                                            if len(base_matches) > 0:
                                                base_row = base_matches.iloc[0]
                                                match_with_details["base_article"] = (
                                                    article
                                                )
                                                match_with_details["base_color"] = (
                                                    self.safe_color_processing(
                                                        base_row.get("color", "")
                                                    )
                                                )
                                                match_with_details["base_price"] = (
                                                    self.get_base_price_from_config(
                                                        base_row
                                                    )
                                                )
                                            else:
                                                match_with_details["base_article"] = (
                                                    article
                                                )
                                                match_with_details["base_color"] = ""
                                                match_with_details["base_price"] = 0
                                        else:
                                            match_with_details["base_article"] = article
                                            match_with_details["base_color"] = ""
                                            match_with_details["base_price"] = 0
                                    except Exception as e:
                                        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                                        match_with_details["base_article"] = article
                                        match_with_details["base_color"] = ""
                                        match_with_details["base_price"] = 0
                            else:
                                match_with_details["base_article"] = article
                                match_with_details["base_color"] = ""
                                match_with_details["base_price"] = 0

                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            if (
                                article
                                and article != "N/A"
                                and self.current_df is not None
                            ):
                                # –î–ª—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ–º supplier_article –∏–∑ match
                                if "supplier_article" in match:
                                    supplier_article = match.get("supplier_article", "")
                                    if supplier_article:
                                        try:
                                            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                            supplier_article_col = (
                                                self.get_supplier_article_column()
                                            )
                                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                                            if (
                                                supplier_article_col
                                                in self.current_df.columns
                                            ):
                                                supplier_matches = self.current_df[
                                                    self.current_df[
                                                        supplier_article_col
                                                    ]
                                                    == supplier_article
                                                ]
                                                if len(supplier_matches) > 0:
                                                    supplier_row = (
                                                        supplier_matches.iloc[0]
                                                    )
                                                    match_with_details[
                                                        "supplier_article"
                                                    ] = supplier_article
                                                    match_with_details[
                                                        "supplier_color"
                                                    ] = self.safe_color_processing(
                                                        supplier_row.get("color", "")
                                                    )
                                                else:
                                                    match_with_details[
                                                        "supplier_article"
                                                    ] = supplier_article
                                                    match_with_details[
                                                        "supplier_color"
                                                    ] = ""
                                            else:
                                                match_with_details[
                                                    "supplier_article"
                                                ] = supplier_article
                                                match_with_details["supplier_color"] = (
                                                    ""
                                                )
                                        except Exception as e:
                                            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                                            match_with_details["supplier_article"] = (
                                                supplier_article
                                            )
                                            match_with_details["supplier_color"] = ""
                                    else:
                                        match_with_details["supplier_article"] = article
                                        match_with_details["supplier_color"] = ""
                                else:
                                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
                                    try:
                                        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                        supplier_article_col = (
                                            self.get_supplier_article_column()
                                        )
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                                        if (
                                            supplier_article_col
                                            in self.current_df.columns
                                        ):
                                            supplier_matches = self.current_df[
                                                self.current_df[supplier_article_col]
                                                == article
                                            ]
                                            if len(supplier_matches) > 0:
                                                supplier_row = supplier_matches.iloc[0]
                                                match_with_details[
                                                    "supplier_article"
                                                ] = article
                                                match_with_details["supplier_color"] = (
                                                    self.safe_color_processing(
                                                        supplier_row.get("color", "")
                                                    )
                                                )
                                            else:
                                                match_with_details[
                                                    "supplier_article"
                                                ] = article
                                                match_with_details["supplier_color"] = (
                                                    ""
                                                )
                                        else:
                                            match_with_details["supplier_article"] = (
                                                article
                                            )
                                            match_with_details["supplier_color"] = ""
                                    except Exception as e:
                                        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                                        match_with_details["supplier_article"] = article
                                        match_with_details["supplier_color"] = ""
                            else:
                                match_with_details["supplier_article"] = article
                                match_with_details["supplier_color"] = ""

                            matches_with_details.append(match_with_details)

                        matches_df = pd.DataFrame(matches_with_details)
                        matches_df.to_excel(
                            writer, sheet_name="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π
                        worksheet = writer.sheets["–°–æ–≤–ø–∞–¥–µ–Ω–∏—è"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        if "name" in matches_df.columns:
                            name_col_index = matches_df.columns.get_loc("name")
                            name_col_letter = chr(
                                65 + name_col_index
                            )  # A=65, B=66, C=67...
                            worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(matches_df.columns):
                            col_letter = chr(65 + i)
                            if col != "name":  # name —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤—ã—à–µ
                                if "article" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "price" in col.lower() or "diff" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "color" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 20
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω
                    if self.comparison_result["price_changes"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω' ({len(self.comparison_result['price_changes'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω
                        price_changes_with_colors = []
                        for change in self.comparison_result["price_changes"]:
                            change_with_colors = change.copy()
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º article
                            article = change.get("article", "")
                            if not article:
                                article = change.get("code", "")
                            if not article:
                                article = "N/A"

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                            if (
                                article
                                and article != "N/A"
                                and self.base_df is not None
                            ):
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –±–∞–∑—ã
                                    base_article_col = self.get_base_article_column()
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
                                    if base_article_col in self.base_df.columns:
                                        base_matches = self.base_df[
                                            self.base_df[base_article_col] == article
                                        ]
                                        if len(base_matches) > 0:
                                            change_with_colors["base_color"] = (
                                                self.safe_color_processing(
                                                    base_matches.iloc[0].get(
                                                        "color", ""
                                                    )
                                                )
                                            )
                                        else:
                                            change_with_colors["base_color"] = ""
                                    else:
                                        change_with_colors["base_color"] = ""
                                except Exception as e:
                                    change_with_colors["base_color"] = ""
                            else:
                                change_with_colors["base_color"] = ""

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            if (
                                article
                                and article != "N/A"
                                and self.current_df is not None
                            ):
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                    supplier_article_col = (
                                        self.get_supplier_article_column()
                                    )
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                                    if supplier_article_col in self.current_df.columns:
                                        supplier_matches = self.current_df[
                                            self.current_df[supplier_article_col]
                                            == article
                                        ]
                                        if len(supplier_matches) > 0:
                                            change_with_colors["supplier_color"] = (
                                                self.safe_color_processing(
                                                    supplier_matches.iloc[0].get(
                                                        "color", ""
                                                    )
                                                )
                                            )
                                        else:
                                            change_with_colors["supplier_color"] = ""
                                    else:
                                        change_with_colors["supplier_color"] = ""
                                except Exception as e:
                                    change_with_colors["supplier_color"] = ""
                            else:
                                change_with_colors["supplier_color"] = ""

                            price_changes_with_colors.append(change_with_colors)

                        price_changes_df = pd.DataFrame(price_changes_with_colors)
                        price_changes_df.to_excel(
                            writer, sheet_name="–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
                        worksheet = writer.sheets["–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        if "name" in price_changes_df.columns:
                            name_col_index = price_changes_df.columns.get_loc("name")
                            name_col_letter = chr(65 + name_col_index)
                            worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(price_changes_df.columns):
                            col_letter = chr(65 + i)
                            if col != "name":
                                if "article" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif (
                                    "price" in col.lower()
                                    or "diff" in col.lower()
                                    or "percent" in col.lower()
                                ):
                                    worksheet.column_dimensions[col_letter].width = 15
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
                    if self.comparison_result["new_items"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã' ({len(self.comparison_result['new_items'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö –≤ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
                        new_items_with_colors = []
                        for item in self.comparison_result["new_items"]:
                            item_with_colors = item.copy()

                            # –ï—Å–ª–∏ —Ü–≤–µ—Ç —É–∂–µ –µ—Å—Ç—å –≤ item, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                            if "color" in item and item["color"]:
                                item_with_colors["color"] = item["color"]
                            else:
                                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º article
                                article = item.get("article", "")
                                if not article:
                                    article = "N/A"

                                # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                if (
                                    article
                                    and article != "N/A"
                                    and self.current_df is not None
                                ):
                                    try:
                                        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                        supplier_article_col = (
                                            self.get_supplier_article_column()
                                        )
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                                        if (
                                            supplier_article_col
                                            in self.current_df.columns
                                        ):
                                            # –ü—Ä–∏–≤–æ–¥–∏–º –∞—Ä—Ç–∏–∫—É–ª –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                                            article_str = str(article).strip()
                                            supplier_matches = self.current_df[
                                                self.current_df[supplier_article_col]
                                                .astype(str)
                                                .str.strip()
                                                == article_str
                                            ]
                                            if len(supplier_matches) > 0:
                                                item_with_colors["color"] = (
                                                    self.safe_color_processing(
                                                        supplier_matches.iloc[0].get(
                                                            "color", ""
                                                        )
                                                    )
                                                )
                                            else:
                                                item_with_colors["color"] = ""
                                        else:
                                            item_with_colors["color"] = ""
                                    except Exception as e:
                                        item_with_colors["color"] = ""
                                else:
                                    item_with_colors["color"] = ""

                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
                            if item.get("fuzzy_match_name"):
                                item_with_colors["–í–æ–∑–º–æ–∂–Ω–æ–µ_—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"] = item[
                                    "fuzzy_match_name"
                                ]
                                item_with_colors["–°—Ç—Ä–æ–∫–∞_–≤_–±–∞–∑–µ"] = item[
                                    "fuzzy_match_row"
                                ]
                                item_with_colors["–¶–≤–µ—Ç_—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"] = item[
                                    "fuzzy_match_color"
                                ]
                                item_with_colors["–¶–µ–Ω–∞_—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"] = item[
                                    "fuzzy_match_price"
                                ]
                                item_with_colors["–°—Ö–æ–∂–µ—Å—Ç—å_%"] = (
                                    f"{item.get('fuzzy_match_similarity', 0) * 100:.1f}%"
                                )
                            else:
                                item_with_colors["–í–æ–∑–º–æ–∂–Ω–æ–µ_—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"] = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                                item_with_colors["–°—Ç—Ä–æ–∫–∞_–≤_–±–∞–∑–µ"] = ""
                                item_with_colors["–¶–≤–µ—Ç_—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"] = ""
                                item_with_colors["–¶–µ–Ω–∞_—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"] = ""
                                item_with_colors["–°—Ö–æ–∂–µ—Å—Ç—å_%"] = "0.0%"

                            new_items_with_colors.append(item_with_colors)

                        new_items_df = pd.DataFrame(new_items_with_colors)
                        new_items_df.to_excel(
                            writer, sheet_name="–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                        worksheet = writer.sheets["–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        if "name" in new_items_df.columns:
                            name_col_index = new_items_df.columns.get_loc("name")
                            name_col_letter = chr(65 + name_col_index)
                            worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(new_items_df.columns):
                            col_letter = chr(65 + i)
                            if col != "name":
                                if "article" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "price" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "color" in col.lower() or "balance" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 20
                                elif "–í–æ–∑–º–æ–∂–Ω–æ–µ_—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ" in col:
                                    worksheet.column_dimensions[col_letter].width = 60
                                elif "–°—Ö–æ–∂–µ—Å—Ç—å_%" in col:
                                    worksheet.column_dimensions[col_letter].width = 12
                                elif (
                                    "–°—Ç—Ä–æ–∫–∞_–≤_–±–∞–∑–µ" in col
                                    or "–¶–≤–µ—Ç_—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è" in col
                                    or "–¶–µ–Ω–∞_—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è" in col
                                ):
                                    worksheet.column_dimensions[col_letter].width = 18
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ –ø–æ –∫–æ–¥–∞–º
                    if self.comparison_result.get("code_matches"):
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º' ({len(self.comparison_result['code_matches'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –∞—Ä—Ç–∏–∫—É–ª—ã –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º
                        code_matches_with_details = []
                        for match in self.comparison_result["code_matches"]:
                            match_with_details = match.copy()
                            code = match.get("code", "")
                            base_index = match.get("base_index")

                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                            if (
                                base_index is not None
                                and self.base_df is not None
                                and base_index in self.base_df.index
                            ):
                                base_row = self.base_df.loc[base_index]
                                match_with_details["base_article"] = base_row.get(
                                    "article", ""
                                )
                                match_with_details["base_color"] = (
                                    self.safe_color_processing(
                                        base_row.get("color", "")
                                    )
                                )
                                match_with_details["base_price"] = (
                                    self.get_base_price_from_config(base_row)
                                )
                            else:
                                match_with_details["base_article"] = ""
                                match_with_details["base_color"] = ""
                                match_with_details["base_price"] = 0

                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            supplier_article = match.get("supplier_article", "")
                            if supplier_article and self.current_df is not None:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                    supplier_article_col = (
                                        self.get_supplier_article_column()
                                    )
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                                    if supplier_article_col in self.current_df.columns:
                                        supplier_matches = self.current_df[
                                            self.current_df[supplier_article_col]
                                            == supplier_article
                                        ]
                                    else:
                                        supplier_matches = pd.DataFrame()
                                except Exception as e:
                                    supplier_matches = pd.DataFrame()
                                if len(supplier_matches) > 0:
                                    supplier_row = supplier_matches.iloc[0]
                                    match_with_details["supplier_color"] = (
                                        self.safe_color_processing(
                                            supplier_row.get("color", "")
                                        )
                                    )
                                else:
                                    match_with_details["supplier_color"] = ""
                            else:
                                match_with_details["supplier_color"] = ""

                            code_matches_with_details.append(match_with_details)

                        code_matches_df = pd.DataFrame(code_matches_with_details)
                        code_matches_df.to_excel(
                            writer, sheet_name="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º
                        worksheet = writer.sheets["–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        for col_name in ["name", "supplier_name", "base_name"]:
                            if col_name in code_matches_df.columns:
                                name_col_index = code_matches_df.columns.get_loc(
                                    col_name
                                )
                                name_col_letter = chr(65 + name_col_index)
                                worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(code_matches_df.columns):
                            col_letter = chr(65 + i)
                            if col not in ["name", "supplier_name", "base_name"]:
                                if "article" in col.lower() or "code" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "confidence" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö
                    if self.comparison_result.get("bracket_matches"):
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö' ({len(self.comparison_result['bracket_matches'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )

                        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∏ –∞—Ä—Ç–∏–∫—É–ª—ã –≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö
                        bracket_matches_with_details = []
                        for match in self.comparison_result["bracket_matches"]:
                            match_with_details = match.copy()
                            code = match.get("code", "")
                            base_index = match.get("base_index")

                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                            if (
                                base_index is not None
                                and self.base_df is not None
                                and base_index in self.base_df.index
                            ):
                                base_row = self.base_df.loc[base_index]
                                match_with_details["base_article"] = base_row.get(
                                    "article", ""
                                )
                                match_with_details["base_color"] = (
                                    self.safe_color_processing(
                                        base_row.get("color", "")
                                    )
                                )
                                match_with_details["base_price"] = (
                                    self.get_base_price_from_config(base_row)
                                )
                            else:
                                match_with_details["base_article"] = ""
                                match_with_details["base_color"] = ""
                                match_with_details["base_price"] = 0

                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            supplier_article = match.get("supplier_article", "")
                            if supplier_article and self.current_df is not None:
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                    supplier_article_col = (
                                        self.get_supplier_article_column()
                                    )
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
                                    if supplier_article_col in self.current_df.columns:
                                        supplier_matches = self.current_df[
                                            self.current_df[supplier_article_col]
                                            == supplier_article
                                        ]
                                        if len(supplier_matches) > 0:
                                            supplier_row = supplier_matches.iloc[0]
                                            match_with_details["supplier_color"] = (
                                                self.safe_color_processing(
                                                    supplier_row.get("color", "")
                                                )
                                            )
                                        else:
                                            match_with_details["supplier_color"] = ""
                                    else:
                                        match_with_details["supplier_color"] = ""
                                except Exception as e:
                                    match_with_details["supplier_color"] = ""
                            else:
                                match_with_details["supplier_color"] = ""

                            bracket_matches_with_details.append(match_with_details)

                        bracket_matches_df = pd.DataFrame(bracket_matches_with_details)
                        bracket_matches_df.to_excel(
                            writer,
                            sheet_name="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö",
                            index=False,
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö
                        worksheet = writer.sheets["–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –≤ —Å–∫–æ–±–∫–∞—Ö"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        for col_name in ["name", "supplier_name", "base_name"]:
                            if col_name in bracket_matches_df.columns:
                                name_col_index = bracket_matches_df.columns.get_loc(
                                    col_name
                                )
                                name_col_letter = chr(65 + name_col_index)
                                worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(bracket_matches_df.columns):
                            col_letter = chr(65 + i)
                            if col not in ["name", "supplier_name", "base_name"]:
                                if "article" in col.lower() or "code" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "confidence" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω)
                    warnings_data = []

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∫–∞–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    for change in self.comparison_result.get("price_changes", []):
                        if (
                            abs(change.get("price_change_percent", 0))
                            > SIGNIFICANT_CHANGE_PERCENT
                        ):
                            warnings_data.append(
                                {
                                    "–¢–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã",
                                    "–ê—Ä—Ç–∏–∫—É–ª": change.get("article", ""),
                                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": change.get("name", ""),
                                    "–¶–µ–Ω–∞ –±–∞–∑—ã": change.get("base_price", 0),
                                    "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": change.get("supplier_price", 0),
                                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %": f"{change.get('price_change_percent', 0):+.1f}%",
                                    "–†–∞–∑–Ω–∏—Ü–∞": change.get("price_diff", 0),
                                    "–û–ø–∏—Å–∞–Ω–∏–µ": f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç {SIGNIFICANT_CHANGE_PERCENT}%",
                                }
                            )

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –±–µ–∑ —Ü–µ–Ω—ã –≤ –±–∞–∑–µ
                    for match in self.comparison_result.get("matches", []):
                        if (
                            match.get("base_price", 0) <= 0
                            and match.get("supplier_price", 0) > 0
                        ):
                            warnings_data.append(
                                {
                                    "–¢–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–∞ –≤ –±–∞–∑–µ",
                                    "–ê—Ä—Ç–∏–∫—É–ª": match.get("article", ""),
                                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": match.get("name", ""),
                                    "–¶–µ–Ω–∞ –±–∞–∑—ã": match.get("base_price", 0),
                                    "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": match.get("supplier_price", 0),
                                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %": "–ù–æ–≤–∞—è —Ü–µ–Ω–∞",
                                    "–†–∞–∑–Ω–∏—Ü–∞": match.get("supplier_price", 0),
                                    "–û–ø–∏—Å–∞–Ω–∏–µ": "–í –±–∞–∑–µ –Ω–µ—Ç —Ü–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
                                }
                            )

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–¥–∞—Ö –∏–∑ changes_log
                    if hasattr(self, "changes_log") and self.changes_log:
                        for change in self.changes_log:
                            if change.get("type") == "article_skipped":
                                warnings_data.append(
                                    {
                                        "–¢–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è": "–ü—Ä–æ–ø—É—â–µ–Ω –∫–æ–¥",
                                        "–ê—Ä—Ç–∏–∫—É–ª": change.get("code", ""),
                                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": change.get("base_name", ""),
                                        "–¶–µ–Ω–∞ –±–∞–∑—ã": "N/A",
                                        "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": "N/A",
                                        "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %": "N/A",
                                        "–†–∞–∑–Ω–∏—Ü–∞": "N/A",
                                        "–û–ø–∏—Å–∞–Ω–∏–µ": f"–ö–æ–¥ {change.get('code', '')}: {change.get('reason', '')} - —Å—Ç—Ä–æ–∫–∞ {change.get('base_index', 0) + 2}, —Å—Ç–æ–ª–±–µ—Ü {change.get('column', '')}",
                                    }
                                )

                    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    if warnings_data:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è' ({len(warnings_data)} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        warnings_df = pd.DataFrame(warnings_data)
                        warnings_df.to_excel(
                            writer, sheet_name="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                        worksheet = writer.sheets["–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"]
                        worksheet.column_dimensions["A"].width = (
                            25  # –¢–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                        )
                        worksheet.column_dimensions["B"].width = 15  # –ê—Ä—Ç–∏–∫—É–ª
                        worksheet.column_dimensions["C"].width = (
                            110  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—à–∏—Ä–æ–∫–∏–π)
                        )
                        worksheet.column_dimensions["D"].width = 15  # –¶–µ–Ω–∞ –±–∞–∑—ã
                        worksheet.column_dimensions["E"].width = 18  # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        worksheet.column_dimensions["F"].width = 15  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ %
                        worksheet.column_dimensions["G"].width = 12  # –†–∞–∑–Ω–∏—Ü–∞
                        worksheet.column_dimensions["H"].width = 40  # –û–ø–∏—Å–∞–Ω–∏–µ
                    else:
                        self.log_info("‚ÑπÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                    # –õ–∏—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if hasattr(self, "changes_log") and self.changes_log:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤' ({len(self.changes_log)} –∑–∞–ø–∏—Å–µ–π)..."
                        )

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        changes_data = []
                        for change in self.changes_log:
                            if change["type"] == "article_added":
                                changes_data.append(
                                    {
                                        "–°—Ç–∞—Ç—É—Å": "‚úÖ –î–û–ë–ê–í–õ–ï–ù",
                                        "–¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è": (
                                            "üì¶ –ö–æ–¥ –≤ —Å–∫–æ–±–∫–∞—Ö"
                                            if change["match_type"] == "bracket"
                                            else "üîó –û–±—â–∏–π –∫–æ–¥"
                                        ),
                                        "–ö–æ–¥": change["code"],
                                        "–°—Ç—Ä–æ–∫–∞ –≤ –±–∞–∑–µ": change["base_index"]
                                        + 2,  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –±–∞–∑–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1 + –∑–∞–≥–æ–ª–æ–≤–æ–∫
                                        "–°—Ç–æ–ª–±–µ—Ü": change["column"],
                                        "–¢–æ–≤–∞—Ä –≤ –±–∞–∑–µ": (
                                            change["base_name"][:80] + "..."
                                            if len(change["base_name"]) > 80
                                            else change["base_name"]
                                        ),
                                        "–ê—Ä—Ç–∏–∫—É–ª –≤ –±–∞–∑–µ": change.get(
                                            "base_article", ""
                                        ),
                                        "–¶–≤–µ—Ç –≤ –±–∞–∑–µ": self.safe_color_processing(
                                            change.get("base_color", "")
                                        ),
                                        "–¢–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": (
                                            change["supplier_name"][:80] + "..."
                                            if len(change["supplier_name"]) > 80
                                            else change["supplier_name"]
                                        ),
                                        "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": change.get(
                                            "supplier_article", ""
                                        ),
                                        "–¶–≤–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": self.safe_color_processing(
                                            change.get("supplier_color", "")
                                        ),
                                        "–ë—ã–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ": change["old_value"],
                                        "–°—Ç–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ": change["new_value"],
                                    }
                                )
                            elif change["type"] == "article_skipped":
                                changes_data.append(
                                    {
                                        "–°—Ç–∞—Ç—É—Å": "‚è≠Ô∏è –ü–†–û–ü–£–©–ï–ù",
                                        "–¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è": (
                                            "üì¶ –ö–æ–¥ –≤ —Å–∫–æ–±–∫–∞—Ö"
                                            if change["match_type"] == "bracket"
                                            else "üîó –û–±—â–∏–π –∫–æ–¥"
                                        ),
                                        "–ö–æ–¥": change["code"],
                                        "–°—Ç—Ä–æ–∫–∞ –≤ –±–∞–∑–µ": change["base_index"] + 2,
                                        "–°—Ç–æ–ª–±–µ—Ü": change["column"],
                                        "–¢–æ–≤–∞—Ä –≤ –±–∞–∑–µ": (
                                            change["base_name"][:80] + "..."
                                            if len(change["base_name"]) > 80
                                            else change["base_name"]
                                        ),
                                        "–ê—Ä—Ç–∏–∫—É–ª –≤ –±–∞–∑–µ": change.get(
                                            "base_article", ""
                                        ),
                                        "–¶–≤–µ—Ç –≤ –±–∞–∑–µ": self.safe_color_processing(
                                            change.get("base_color", "")
                                        ),
                                        "–¢–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": (
                                            change["supplier_name"][:80] + "..."
                                            if len(change["supplier_name"]) > 80
                                            else change["supplier_name"]
                                        ),
                                        "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": change.get(
                                            "supplier_article", ""
                                        ),
                                        "–¶–≤–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": self.safe_color_processing(
                                            change.get("supplier_color", "")
                                        ),
                                        "–°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": change[
                                            "existing_value"
                                        ],
                                        "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å": change["attempted_value"],
                                        "–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞": change["reason"],
                                    }
                                )

                        if changes_data:
                            changes_df = pd.DataFrame(changes_data)
                            changes_df.to_excel(
                                writer, sheet_name="–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤", index=False
                            )

                            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ò–∑–º–µ–Ω–µ–Ω–∏–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤
                            worksheet = writer.sheets["–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤"]
                            worksheet.column_dimensions["A"].width = 15  # –°—Ç–∞—Ç—É—Å
                            worksheet.column_dimensions["B"].width = (
                                18  # –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                            )
                            worksheet.column_dimensions["C"].width = 15  # –ö–æ–¥
                            worksheet.column_dimensions["D"].width = 12  # –°—Ç—Ä–æ–∫–∞ –≤ –±–∞–∑–µ
                            worksheet.column_dimensions["E"].width = 15  # –°—Ç–æ–ª–±–µ—Ü
                            worksheet.column_dimensions["F"].width = 60  # –¢–æ–≤–∞—Ä –≤ –±–∞–∑–µ
                            worksheet.column_dimensions["G"].width = (
                                15  # –ê—Ä—Ç–∏–∫—É–ª –≤ –±–∞–∑–µ
                            )
                            worksheet.column_dimensions["H"].width = 15  # –¶–≤–µ—Ç –≤ –±–∞–∑–µ
                            worksheet.column_dimensions["I"].width = (
                                60  # –¢–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            )
                            worksheet.column_dimensions["J"].width = (
                                15  # –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            )
                            worksheet.column_dimensions["K"].width = (
                                15  # –¶–≤–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            )

                            # –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
                            if "–ë—ã–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ" in changes_df.columns:
                                worksheet.column_dimensions["L"].width = (
                                    15  # –ë—ã–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                                )
                                worksheet.column_dimensions["M"].width = (
                                    15  # –°—Ç–∞–ª–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                                )

                            # –î–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
                            if "–°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ" in changes_df.columns:
                                worksheet.column_dimensions["L"].width = (
                                    20  # –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                )
                                worksheet.column_dimensions["M"].width = (
                                    20  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∞—Ç—å
                                )
                                worksheet.column_dimensions["N"].width = (
                                    50  # –ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞
                                )

                            self.log_info(
                                f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ '–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤' —Å {len(changes_data)} –∑–∞–ø–∏—Å—è–º–∏"
                            )
                    else:
                        self.log_info("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                    # –õ–∏—Å—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if hasattr(self, "price_updates_log") and self.price_updates_log:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã' ({len(self.price_updates_log)} –∑–∞–ø–∏—Å–µ–π)..."
                        )

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        price_updates_data = []
                        for update in self.price_updates_log:
                            price_updates_data.append(
                                {
                                    "–ê—Ä—Ç–∏–∫—É–ª": update.get("article", ""),
                                    "–¢–æ–≤–∞—Ä –≤ –±–∞–∑–µ": (
                                        str(update.get("base_name", ""))[:80] + "..."
                                        if len(str(update.get("base_name", ""))) > 80
                                        else str(update.get("base_name", ""))
                                    ),
                                    "–ê—Ä—Ç–∏–∫—É–ª –≤ –±–∞–∑–µ": str(
                                        update.get("base_article", "")
                                    ),
                                    "–¶–≤–µ—Ç –≤ –±–∞–∑–µ": self.safe_color_processing(
                                        update.get("base_color", "")
                                    ),
                                    "–¢–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": (
                                        str(update.get("supplier_name", ""))[:80]
                                        + "..."
                                        if len(str(update.get("supplier_name", "")))
                                        > 80
                                        else str(update.get("supplier_name", ""))
                                    ),
                                    "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": update.get(
                                        "supplier_article", ""
                                    ),
                                    "–¶–≤–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": self.safe_color_processing(
                                        update.get("supplier_color", "")
                                    ),
                                    "–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞": update.get("old_price", 0),
                                    "–ù–æ–≤–∞—è —Ü–µ–Ω–∞": update.get("new_price", 0),
                                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %": f"{update.get('price_change_percent', 0):+.1f}%",
                                    "–¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è": update.get("match_type", ""),
                                }
                            )

                        if price_updates_data:
                            price_updates_df = pd.DataFrame(price_updates_data)
                            price_updates_df.to_excel(
                                writer, sheet_name="–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã", index=False
                            )

                            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω
                            worksheet = writer.sheets["–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã"]
                            worksheet.column_dimensions["A"].width = 15  # –ê—Ä—Ç–∏–∫—É–ª
                            worksheet.column_dimensions["B"].width = 60  # –¢–æ–≤–∞—Ä –≤ –±–∞–∑–µ
                            worksheet.column_dimensions["C"].width = (
                                15  # –ê—Ä—Ç–∏–∫—É–ª –≤ –±–∞–∑–µ
                            )
                            worksheet.column_dimensions["D"].width = 15  # –¶–≤–µ—Ç –≤ –±–∞–∑–µ
                            worksheet.column_dimensions["E"].width = (
                                60  # –¢–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            )
                            worksheet.column_dimensions["F"].width = (
                                15  # –ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            )
                            worksheet.column_dimensions["G"].width = (
                                15  # –¶–≤–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                            )
                            worksheet.column_dimensions["H"].width = 15  # –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞
                            worksheet.column_dimensions["I"].width = 15  # –ù–æ–≤–∞—è —Ü–µ–Ω–∞
                            worksheet.column_dimensions["J"].width = 15  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ %
                            worksheet.column_dimensions["K"].width = (
                                20  # –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                            )

                            self.log_info(
                                f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã' —Å {len(price_updates_data)} –∑–∞–ø–∏—Å—è–º–∏"
                            )
                    else:
                        self.log_info("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                self.log_info("‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

                self.log_info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                self.log_info(f"   –õ–∏—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(summary_data)} + –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
                self.set_status("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", "success")

            except Exception as e:
                self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
                self.set_status("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞", "error")
        else:
            self.log_info("‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def update_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π"""
        try:
            self.start_progress("–û–±–Ω–æ–≤–ª—è—é —Ü–µ–Ω—ã", 5, "update")  # 5 —à–∞–≥–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.log_info("üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

            # –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.info_text.delete(1.0, tk.END)
            self.info_text.insert(tk.END, "üìä –û–ë–ù–û–í–õ–ï–ù–ò–ï –¶–ï–ù –í –ë–ê–ó–ï –î–ê–ù–ù–´–•\n")
            self.info_text.insert(tk.END, "=" * 50 + "\n")
            self.root.update()

            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.update_progress(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            self.info_text.insert(tk.END, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n")
            self.root.update()

            if self.current_df is None:
                error_msg = "‚ùå –§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
                self.info_text.insert(tk.END, error_msg + "\n")
                self.finish_progress(error_msg, auto_reset=False)
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
                )
                return

            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            self.update_progress(2, "–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            self.info_text.insert(tk.END, "üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
            self.root.update()

            if self.base_df is None:
                self.info_text.insert(tk.END, "–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n")
                data_dir = "data/input"
                result = load_largest_file(data_dir, "base")

                if result is None:
                    error_msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
                    self.info_text.insert(tk.END, error_msg + "\n")
                    self.finish_progress(error_msg, auto_reset=False)
                    messagebox.showerror(
                        "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ data/input"
                    )
                    return

                self.base_df, base_file_path = result
                self.base_file_name = os.path.basename(base_file_path)
                self.info_text.insert(
                    tk.END, f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞: {self.base_file_name}\n"
                )

            # –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.update_progress(3, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            self.info_text.insert(tk.END, "\nüîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n")
            self.root.update()

            supplier_article_col = self.get_supplier_article_column()
            supplier_price_col = self.get_supplier_price_column()
            base_article_col = self.get_base_article_column()
            base_price_col = self.get_base_price_column()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
            missing_columns = []
            if supplier_article_col not in self.current_df.columns:
                missing_columns.append(f"'{supplier_article_col}' –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
            if supplier_price_col not in self.current_df.columns:
                missing_columns.append(f"'{supplier_price_col}' –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
            if base_article_col not in self.base_df.columns:
                missing_columns.append(f"'{base_article_col}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            if base_price_col not in self.base_df.columns:
                missing_columns.append(f"'{base_price_col}' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            if missing_columns:
                error_msg = f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_columns)}"
                self.info_text.insert(tk.END, error_msg + "\n")
                self.finish_progress(error_msg, auto_reset=False)
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞", f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã:\n{', '.join(missing_columns)}"
                )
                return

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ü–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            supplier_prices = {}
            for _, row in self.current_df.iterrows():
                article = (
                    str(row[supplier_article_col]).strip()
                    if pd.notna(row[supplier_article_col])
                    else None
                )
                price = row[supplier_price_col]
                if article and pd.notna(price) and price > 0:
                    supplier_prices[article] = float(price)

            self.info_text.insert(
                tk.END, f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(supplier_prices)} —Ü–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞\n"
            )
            self.info_text.insert(
                tk.END, f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –±–∞–∑–µ: {len(self.base_df)}\n\n"
            )
            self.info_text.insert(tk.END, "üîç –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω...\n")
            self.root.update()

            # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.update_progress(4, "–ü–æ–∏—Å–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω")
            updated_count = 0
            skipped_count = 0
            price_updates = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.info_text.insert(tk.END, "\nüìã –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù:\n")
            self.info_text.insert(tk.END, "-" * 80 + "\n")
            self.info_text.insert(
                tk.END, "‚Ññ   –ê—Ä—Ç–∏–∫—É–ª          –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞   –ù–æ–≤–∞—è —Ü–µ–Ω–∞    –ò–∑–º–µ–Ω–µ–Ω–∏–µ\n"
            )
            self.info_text.insert(tk.END, "-" * 80 + "\n")
            self.root.update()

            for idx, base_row in self.base_df.iterrows():
                article = (
                    str(base_row[base_article_col]).strip()
                    if pd.notna(base_row[base_article_col])
                    else None
                )

                if not article or article not in supplier_prices:
                    skipped_count += 1
                    continue

                supplier_price = supplier_prices[article]
                base_price = base_row[base_price_col]

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ü–µ–Ω—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã
                if abs(float(supplier_price) - float(base_price)) < 0.001:
                    skipped_count += 1
                    continue

                # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                price_diff = float(supplier_price) - float(base_price)
                if float(base_price) != 0:
                    change_percent = (price_diff / float(base_price)) * 100
                else:
                    change_percent = 100.0

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                change_sign = "+" if price_diff >= 0 else ""
                change_color = "green" if price_diff < 0 else "red"

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
                update_record = {
                    "article": article,
                    "old_price": base_price,
                    "new_price": supplier_price,
                    "change_percent": change_percent,
                    "base_index": idx,
                }
                price_updates.append(update_record)
                updated_count += 1

                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                self.info_text.insert(tk.END, f"{updated_count:3d} {article:15} ")
                self.info_text.insert(
                    tk.END,
                    f"{float(base_price):10.2f} ‚Üí {float(supplier_price):10.2f} ",
                )
                self.info_text.tag_config(change_color, foreground=change_color)
                self.info_text.insert(
                    tk.END,
                    f"{change_sign}{price_diff:+.2f} ({change_sign}{change_percent:+.1f}%)\n",
                    change_color,
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                if updated_count % 10 == 0:
                    self.root.update()

            self.info_text.insert(tk.END, "-" * 80 + "\n")
            self.info_text.insert(tk.END, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {updated_count}\n")
            self.info_text.insert(tk.END, f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n\n")
            self.root.update()

            if updated_count == 0:
                self.finish_progress(
                    "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_reset=False
                )
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return

            # –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            self.update_progress(5, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            self.info_text.insert(tk.END, "üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π...\n")
            self.root.update()

            # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirm = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                f"–ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ü–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                icon="question",
            )

            if not confirm:
                self.info_text.insert(tk.END, "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n")
                self.finish_progress(
                    "‚èπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", auto_reset=False
                )
                return

            try:
                base_file_path = os.path.join("data/input", self.base_file_name)
                self.info_text.insert(
                    tk.END, f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª: {self.base_file_name}\n"
                )
                self.root.update()

                # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel
                success = self.update_excel_prices_preserve_formatting(
                    base_file_path, None, price_updates, self.current_config
                )

                if success:
                    self.price_updated = True
                    self.price_updates_log = price_updates

                    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
                    self.info_text.insert(tk.END, "\n" + "=" * 50 + "\n")
                    self.info_text.insert(tk.END, "‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û\n")
                    self.info_text.insert(tk.END, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: {updated_count}\n")
                    self.info_text.insert(
                        tk.END, f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {skipped_count}\n"
                    )
                    self.info_text.insert(tk.END, f"–§–∞–π–ª: {self.base_file_name}\n")

                    self.finish_progress(
                        f"‚úÖ –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({updated_count} —à—Ç.)",
                        auto_reset=False,
                    )
                    messagebox.showinfo(
                        "–£—Å–ø–µ—Ö",
                        f"–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}",
                    )
                    self.update_prices_button.config(state="disabled")
                else:
                    self.info_text.insert(
                        tk.END, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
                    )
                    self.finish_progress("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_reset=False)
                    messagebox.showerror(
                        "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –≤ Excel —Ñ–∞–π–ª–µ"
                    )

            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}"
                self.info_text.insert(tk.END, error_msg + "\n")
                self.log_error(error_msg)
                self.finish_progress("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", auto_reset=False)
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}")

        except Exception as e:
            error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            self.info_text.insert(tk.END, error_msg + "\n")
            self.log_error(error_msg)
            self.finish_progress("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_reset=False)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    def create_simple_new_items_table(self, parent_frame, new_items, dialog):
        """
        –°–æ–∑–¥–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        """
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.set_status("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...", "loading")
        table_frame = ttk.Frame(parent_frame)
        table_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # –°–æ–∑–¥–∞–µ–º Treeview —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
        columns = (
            "supplier_article",
            "supplier_name",
            "supplier_color",
            "supplier_price",
            "found_base_name",
            "base_row_number",
            "base_color",
            "base_price",
        )
        tree = ttk.Treeview(
            table_frame, columns=columns, show="tree headings", height=10
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.set_status("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã...", "loading")
        tree.heading("#0", text="‚úì", anchor="w")
        tree.column("#0", width=40, minwidth=40, stretch=False)

        tree.heading("supplier_article", text="–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", anchor="w")
        tree.column("supplier_article", width=50, minwidth=50, stretch=True)

        tree.heading("supplier_name", text="–ù–∞–∑–≤–∞–Ω–∏–µ", anchor="w")
        tree.column("supplier_name", width=300, minwidth=200, stretch=True)

        tree.heading("supplier_color", text="–¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞", anchor="w")
        tree.column("supplier_color", width=80, minwidth=60, stretch=True)

        tree.heading("supplier_price", text="–¶–µ–Ω–∞", anchor="w")
        tree.column("supplier_price", width=60, minwidth=60, stretch=True)

        tree.heading("found_base_name", text="–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ", anchor="w")
        tree.column("found_base_name", width=300, minwidth=200, stretch=True)

        tree.heading("base_row_number", text="–°—Ç—Ä–æ–∫–∞ –≤ –±–∞–∑–µ", anchor="w")
        tree.column("base_row_number", width=50, minwidth=50, stretch=True)

        tree.heading("base_color", text="–¶–≤–µ—Ç –∏–∑ –±–∞–∑—ã", anchor="w")
        tree.column("base_color", width=80, minwidth=60, stretch=True)

        tree.heading("base_price", text="–¶–µ–Ω–∞ –∏–∑ –±–∞–∑—ã", anchor="w")
        tree.column("base_price", width=80, minwidth=60, stretch=True)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
        h_scrollbar = ttk.Scrollbar(
            table_frame, orient="horizontal", command=tree.xview
        )
        tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.set_status(
            f"üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏ ({len(new_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)...", "loading"
        )
        for i, item in enumerate(new_items):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏—è
            supplier_name = item.get("name", "")
            supplier_article = str(item.get("article", "N/A"))

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞
            color_value = item.get("color", "")
            supplier_color = self.safe_color_processing(color_value)
            if not supplier_color:
                supplier_color = "N/A"

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
            price_value = item.get("price", 0)
            if price_value is None or pd.isna(price_value):
                supplier_price = "N/A"
            else:
                try:
                    supplier_price = f"${float(price_value):.2f}"
                except (ValueError, TypeError):
                    supplier_price = "N/A"

            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é
            found_base_name, base_row_number, base_color, base_price = (
                self.find_item_by_fuzzy_matching(supplier_name)
            )

            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —á–µ–∫–±–æ–∫—Å–æ–º
            item_id = tree.insert(
                "",
                "end",
                text="‚òê",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–æ—à–µ–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å
                values=(
                    supplier_article,
                    supplier_name,
                    supplier_color,
                    supplier_price,
                    found_base_name,
                    base_row_number,
                    base_color,
                    base_price,
                ),
            )

            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —á–µ–∫–±–æ–∫—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            checkbox = type("Checkbox", (), {})()
            checkbox.var = tk.BooleanVar(value=False)
            checkbox.match_data = item
            checkbox.match_type = "new_item"
            checkbox.item_id = item_id
            checkbox.tree = tree

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤ –±–∞–∑–µ
            if base_row_number != "N/A":
                try:
                    checkbox.base_row_number = int(base_row_number)
                except (ValueError, TypeError) as e:
                    self.log_error(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ '{base_row_number}' –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{supplier_name}': {e}"
                    )
                    checkbox.base_row_number = None
            else:
                checkbox.base_row_number = None

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            def update_display(checkbox=checkbox):
                if checkbox.var.get():
                    tree.item(checkbox.item_id, text="‚òë")
                else:
                    tree.item(checkbox.item_id, text="‚òê")

            checkbox.var.trace("w", lambda *args, cb=checkbox: update_display(cb))

            dialog.checkboxes.append(checkbox)
            dialog.new_item_checkboxes.append(checkbox)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–æ –∫–ª–∏–∫—É
        def on_item_click(event):
            x, y = event.x, event.y
            item = tree.identify_row(y)
            column = tree.identify_column(x)

            if item and column == "#0":  # –ö–ª–∏–∫ –≤ –∫–æ–ª–æ–Ω–∫–µ —á–µ–∫–±–æ–∫—Å–∞ (#0)
                for checkbox in dialog.checkboxes:
                    if hasattr(checkbox, "item_id") and checkbox.item_id == item:
                        old_value = checkbox.var.get()
                        checkbox.var.set(not old_value)
                        break

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–æ –¥–≤–æ–π–Ω–æ–º—É –∫–ª–∏–∫—É –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        def on_item_double_click(event):
            x, y = event.x, event.y
            item = tree.identify_row(y)
            column = tree.identify_column(x)

            # –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –∫–æ–ª–æ–Ω–∫–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ (supplier_name) –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–ª–æ–Ω–∫–µ –∫—Ä–æ–º–µ —á–µ–∫–±–æ–∫—Å–∞
            if item and column != "#0":
                for checkbox in dialog.checkboxes:
                    if hasattr(checkbox, "item_id") and checkbox.item_id == item:
                        old_value = checkbox.var.get()
                        checkbox.var.set(not old_value)
                        break

        tree.bind("<Button-1>", on_item_click)
        tree.bind("<Double-Button-1>", on_item_double_click)

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        tree.grid(row=0, column=0, sticky="nsew")
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        h_scrollbar.grid(row=1, column=0, sticky="ew")

        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
        tab_button_frame = ttk.Frame(parent_frame)
        tab_button_frame.pack(fill="x", pady=(10, 0))

        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
        ttk.Button(
            tab_button_frame,
            text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ",
            command=lambda: self.select_all_matches(dialog, dialog.new_item_checkboxes),
        ).pack(side="left", padx=5)

        ttk.Button(
            tab_button_frame,
            text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ",
            command=lambda: self.deselect_all_matches(
                dialog, dialog.new_item_checkboxes
            ),
        ).pack(side="left", padx=5)

    def find_item_by_fuzzy_matching(self, supplier_name):
        """
        –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏–π

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - supplier_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - (–Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, —Ü–≤–µ—Ç, —Ü–µ–Ω–∞) –∏–ª–∏ ("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "N/A", "N/A", "N/A")
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            if self.base_df is None or self.base_df.empty:
                return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "N/A", "N/A", "N/A"

            if not supplier_name or supplier_name.strip() == "":
                return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "N/A", "N/A", "N/A"

            import difflib

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ
            base_name_col = self._get_base_name_column(self.base_df)
            if not base_name_col:
                self.log_error(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ"
                )
                return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "N/A", "N/A", "N/A"

            # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (0.3 = 30%)
            similarity_threshold = TRSH
            best_match = None
            best_ratio = 0
            best_idx = None

            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ —Å –Ω–∞–∏–ª—É—á—à–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
            for idx, base_row in self.base_df.iterrows():
                base_name = str(base_row.get(base_name_col, "")).strip()
                if not base_name or base_name == "nan":
                    continue

                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π
                ratio = difflib.SequenceMatcher(
                    None, supplier_name.lower(), base_name.lower()
                ).ratio()

                # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ –∏ –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
                if ratio >= similarity_threshold and ratio > best_ratio:
                    best_ratio = ratio
                    best_match = base_name
                    best_idx = idx

            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if best_match:
                base_color = self.safe_color_processing(
                    self.base_df.iloc[best_idx].get("color", "")
                )
                if not base_color:
                    base_color = "N/A"

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã
                base_price_value = self.base_df.iloc[best_idx].get("price_usd", 0)
                if base_price_value is None or pd.isna(base_price_value):
                    base_price = "N/A"
                else:
                    try:
                        base_price = f"${float(base_price_value):.2f}"
                    except (ValueError, TypeError):
                        base_price = "N/A"

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ Excel —Ñ–∞–π–ª–µ
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º iloc –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫–∏
                excel_row_number = (
                    self.base_df.index.get_loc(best_idx) + 2
                )  # +2 –¥–ª—è Excel (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + 1-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è)

                return (
                    best_match,
                    str(excel_row_number),  # –†–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ Excel
                    base_color,
                    base_price,
                )

            return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "N/A", "N/A", "N/A"

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "N/A", "N/A", "N/A"

    def refresh_interface(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.log_info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        self.load_available_configs()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.set_status("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª—ë–Ω", "success")
        self.root.update()

        self.log_info("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        help_text = """üöÄ MiStockSync - –°–ø—Ä–∞–≤–∫–∞

üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:
‚Ä¢ –§–∞–π–ª—ã –í–∏—Ç–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'JHT' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
‚Ä¢ –§–∞–π–ª—ã –î–∏–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'DiMi' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏  
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'BASE' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏

üîç –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É '–∞–≤—Ç–æ')
2. –ù–∞–∂–º–∏—Ç–µ '–°—Ä–∞–≤–Ω–∏—Ç—å —Å –±–∞–∑–æ–π' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç' –¥–ª—è Excel –æ—Ç—á—ë—Ç–∞
4. '–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

‚öôÔ∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:
‚Ä¢ –í–∏—Ç—è: —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã "–ò–º–µ—é—Ç—Å—è –≤ –Ω–∞–ª."
‚Ä¢ –î–∏–º–∞: –∏—Å–∫–ª—é—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã "–û–∂–∏–¥–∞–µ—Ç—Å—è"
‚Ä¢ –¶–µ–Ω—ã: –∏—Å–∫–ª—é—á–∞–µ—Ç NaN, –ø—É—Å—Ç—ã–µ –∏ –Ω—É–ª–µ–≤—ã–µ

üìä –ü–∞–ø–∫–∏:
‚Ä¢ data/input - –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ data/output - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
‚Ä¢ logs/ - —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤"""

        messagebox.showinfo("–°–ø—Ä–∞–≤–∫–∞", help_text)
        self.log_info("‚ùì –ü–æ–∫–∞–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    def show_log_window(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Å –ª–æ–≥–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –ª–æ–≥–æ–≤
            log_window = tk.Toplevel(self.root)
            log_window.title("üìã –õ–æ–≥–∏ MiStockSync")
            log_window.geometry("900x600")
            log_window.resizable(True, True)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            header_frame = ttk.Frame(log_window)
            header_frame.pack(fill="x", padx=10, pady=5)

            ttk.Label(
                header_frame,
                text="üìã –õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                font=("Arial", 14, "bold"),
            ).pack(anchor="w")

            # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞
            search_frame = ttk.Frame(log_window)
            search_frame.pack(fill="x", padx=10, pady=(0, 5))

            ttk.Label(search_frame, text="üîç –ü–æ–∏—Å–∫:").pack(side="left")

            search_var = tk.StringVar()
            search_entry = ttk.Entry(search_frame, textvariable=search_var, width=30)
            search_entry.pack(side="left", padx=(5, 5))

            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_results = []
            current_search_index = -1

            def search_text(direction="forward"):
                nonlocal search_results, current_search_index

                search_term = search_var.get().strip()
                if not search_term:
                    return

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –∏—â–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è
                if (
                    not search_results
                    or search_results
                    and search_results[0][0] != "1.0"
                ):
                    search_results = []
                    start_pos = "1.0"

                    while True:
                        pos = log_text.search(
                            search_term, start_pos, tk.END, nocase=True
                        )
                        if not pos:
                            break
                        end_pos = f"{pos}+{len(search_term)}c"
                        search_results.append((pos, end_pos))
                        start_pos = end_pos

                    if not search_results:
                        messagebox.showinfo("–ü–æ–∏—Å–∫", f"–¢–µ–∫—Å—Ç '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return

                    current_search_index = -1

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å
                if direction == "forward":
                    current_search_index = (current_search_index + 1) % len(
                        search_results
                    )
                else:  # backward
                    current_search_index = (current_search_index - 1) % len(
                        search_results
                    )

                # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                start_pos, end_pos = search_results[current_search_index]
                log_text.tag_remove("search_highlight", "1.0", tk.END)
                log_text.tag_add("search_highlight", start_pos, end_pos)
                log_text.tag_config(
                    "search_highlight", background="yellow", foreground="black"
                )

                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
                log_text.see(start_pos)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ–∫–Ω–∞
                log_window.title(
                    f"üìã –õ–æ–≥–∏ MiStockSync - –ù–∞–π–¥–µ–Ω–æ: {current_search_index + 1}/{len(search_results)}"
                )

            def search_forward():
                search_text("forward")

            def search_backward():
                search_text("backward")

            def clear_search():
                log_text.tag_remove("search_highlight", "1.0", tk.END)
                search_var.set("")
                search_results.clear()
                current_search_index = -1
                log_window.title("üìã –õ–æ–≥–∏ MiStockSync")

            def on_search_change(*args):
                # –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
                if not search_var.get().strip():
                    clear_search()

            # –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
            ttk.Button(search_frame, text="‚¨áÔ∏è –í–ø–µ—Ä–µ–¥", command=search_forward).pack(
                side="left", padx=(0, 5)
            )
            ttk.Button(search_frame, text="‚¨ÜÔ∏è –ù–∞–∑–∞–¥", command=search_backward).pack(
                side="left", padx=(0, 5)
            )
            ttk.Button(search_frame, text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å", command=clear_search).pack(
                side="left", padx=(0, 5)
            )

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –ø–æ–∏—Å–∫—É –≤–ø–µ—Ä–µ–¥
            def on_search_enter(event):
                search_forward()

            search_entry.bind("<Return>", on_search_enter)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫ –æ—á–∏—Å—Ç–∫–µ –ø–æ–∏—Å–∫–∞
            search_var.trace("w", on_search_change)

            # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            def on_key_press(event):
                if event.state & 4:  # Ctrl
                    if event.keysym == "f":
                        search_entry.focus()
                        return "break"
                    elif event.keysym == "F":  # Ctrl+Shift+F
                        search_backward()
                        return "break"

            log_window.bind("<Key>", on_key_press)

            # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ª–æ–≥–∞–º–∏
            text_frame = ttk.Frame(log_window)
            text_frame.pack(fill="both", expand=True, padx=10, pady=5)

            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            log_text = tk.Text(
                text_frame,
                wrap=tk.WORD,
                state="normal",
                font=("Consolas", 10),
                bg="#f8f9fa",
                fg="#333333",
            )

            # –°–∫—Ä–æ–ª–ª–±–∞—Ä
            scrollbar = ttk.Scrollbar(
                text_frame, orient="vertical", command=log_text.yview
            )
            log_text.configure(yscrollcommand=scrollbar.set)

            log_text.pack(side="left", fill="both", expand=True)
            scrollbar.pack(side="right", fill="y")

            # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ä–∞–Ω–µ–µ)
            def refresh_logs():
                log_text.configure(state="normal")  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                log_text.delete(1.0, tk.END)
                if hasattr(self, "log_file_path") and os.path.exists(
                    self.log_file_path
                ):
                    try:
                        with open(self.log_file_path, "r", encoding="utf-8") as f:
                            log_content = f.read()
                            log_text.insert(tk.END, log_content)
                            log_text.see(tk.END)
                    except Exception as e:
                        log_text.insert(tk.END, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}\n")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –∏–∑ –ø–∞–º—è—Ç–∏
                    log_text.insert(tk.END, "–õ–æ–≥–∏ –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n")
                    log_text.insert(tk.END, "=" * 50 + "\n")
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏ –∏–∑ self.logger –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                log_text.configure(state="disabled")  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
            context_menu = tk.Menu(log_text, tearoff=0)

            context_menu.add_command(
                label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ",
                command=lambda: self.copy_selected_text(log_text, log_window),
            )
            context_menu.add_command(
                label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ",
                command=lambda: self.copy_all_text(log_text, log_window),
            )
            context_menu.add_separator()
            context_menu.add_command(label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=refresh_logs)

            def show_context_menu(event):
                context_menu.post(event.x_root, event.y_root)

            log_text.bind("<Button-3>", show_context_menu)  # –ü—Ä–∞–≤—ã–π –∫–ª–∏–∫

            # –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
            log_file = getattr(
                self,
                "log_file_path",
                os.path.join(
                    "logs", f"mistocksync_{datetime.now().strftime('%Y%m%d')}.log"
                ),
            )

            if os.path.exists(log_file):
                try:
                    with open(log_file, "r", encoding="utf-8") as f:
                        log_content = f.read()
                        log_text.insert(tk.END, log_content)
                        log_text.see(tk.END)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
                except Exception as e:
                    log_text.insert(tk.END, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}\n")
            else:
                log_text.insert(
                    tk.END,
                    f"–õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}\n–õ–æ–≥–∏ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å –ø–æ –º–µ—Ä–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n",
                )

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            button_frame = ttk.Frame(log_window)
            button_frame.pack(fill="x", padx=10, pady=5)

            # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=refresh_logs).pack(
                side="left"
            )

            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
            def clear_logs():
                log_text.configure(state="normal")  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                log_text.delete(1.0, tk.END)
                log_text.insert(tk.END, "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã.\n")
                log_text.configure(state="disabled")  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

            ttk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", command=clear_logs).pack(
                side="left", padx=(10, 0)
            )

            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
            ttk.Button(
                button_frame,
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ",
                command=lambda: self.copy_all_text_with_notification(
                    log_text, log_window
                ),
            ).pack(side="left", padx=(10, 0))

            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            ttk.Button(
                button_frame,
                text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ",
                command=lambda: self.copy_selected_text_with_notification(
                    log_text, log_window
                ),
            ).pack(side="left", padx=(10, 0))

            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            ttk.Separator(button_frame, orient="vertical").pack(
                side="left", fill="y", padx=10
            )

            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            ttk.Button(
                button_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", command=log_window.destroy
            ).pack(side="right")

            # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            log_text.configure(state="disabled")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.set_status("üìã –û–∫–Ω–æ –ª–æ–≥–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ", "info")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ª–æ–≥–æ–≤: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ª–æ–≥–æ–≤: {e}")

    def create_advanced_status_bar(self, main_frame):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –º–Ω–æ–≥–æ—Å–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
        self.status_frame = ttk.Frame(main_frame, relief=tk.SUNKEN, borderwidth=1)
        self.status_frame.grid(
            row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(5, 0)
        )
        self.status_frame.columnconfigure(0, weight=1)

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        inner_frame = ttk.Frame(self.status_frame)
        inner_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=5, pady=2)
        inner_frame.columnconfigure(0, weight=1)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å —Å –∏–∫–æ–Ω–∫–æ–π
        self.status_main = tk.StringVar(value="üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label = ttk.Label(
            inner_frame, textvariable=self.status_main, anchor=tk.W
        )
        self.status_label.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))

        # –¶–µ–Ω—Ç—Ä - –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            inner_frame, variable=self.progress_var, length=200, mode="determinate"
        )
        self.progress_bar.grid(row=0, column=1, padx=(10, 10))
        self.progress_bar.grid_remove()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö
        self.status_info = tk.StringVar(value="")
        self.info_label = ttk.Label(
            inner_frame, textvariable=self.status_info, anchor=tk.E
        )
        self.info_label.grid(row=0, column=2, padx=(10, 0))

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.update_files_info()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚ìò
        self.is_progress_visible = False
        self.current_operation = None

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
        self.root.update()
        self.root.update_idletasks()

    def set_status(self, message, status_type="info", show_time=True):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏"""
        icons = {
            "loading": "‚è≥",
            "success": "‚úÖ",
            "error": "‚ùå",
            "warning": "‚ö†Ô∏è",
            "info": "üöÄ",
            "file": "üìÅ",
            "save": "üíæ",
            "compare": "üîç",
            "update": "‚è≥",
            "report": "üìä",
            "backup": "üõ°Ô∏è",
        }

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        colors = {
            "loading": "#9932CC",  # Orange
            "success": "#228B22",  # ForestGreen
            "error": "#DC143C",  # Crimson
            "warning": "#FFD700",  # Gold
            "info": "#4169E1",  # RoyalBlue
            "file": "#9932CC",  # DarkOrchid
            "save": "#9932CC",  # LimeGreen #32CD32
            "compare": "#9932CC",  # DodgerBlue #1E90FF
            "update": "#9932CC",  # BlueViolet
            "report": "#20B2AA",  # LightSeaGreen
            "backup": "#CD853F",  # Peru
        }

        icon = icons.get(status_type, "üöÄ")
        color = colors.get(status_type, "#000000")

        formatted_message = f"{icon} {message}"
        self.status_main.set(formatted_message)
        self.status_label.config(foreground=color)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if show_time:
            current_time = datetime.now().strftime("%H:%M:%S")
            self.status_info.set(f"üïê {current_time}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
        self.root.update()
        self.root.update_idletasks()

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        self.update_files_info()

    def update_files_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ"""
        info_parts = []

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–π—Å–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        if self.current_df is not None:
            supplier_info = f"üíº {self.current_config or '–ø–æ—Å—Ç–∞–≤—â–∏–∫'}"
            if hasattr(self, "current_file_name") and self.current_file_name:
                supplier_info += f": {self.current_file_name}"
            info_parts.append(supplier_info)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if self.base_df is not None:
            base_info = "üè¢ –±–∞–∑–∞"
            if hasattr(self, "base_file_name") and self.base_file_name:
                base_info += f": {self.base_file_name}"
            info_parts.append(base_info)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        if info_parts:
            files_info = " | ".join(info_parts)
            self.status_info.set(f"üìÅ {files_info}")
        else:
            self.status_info.set("üìÅ –§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    def start_progress(self, message, total_steps, operation_type="loading"):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not hasattr(self, "progress_bar") or not self.progress_bar:
            self.log_error("‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return

        self.current_operation = {
            "message": message,
            "total": total_steps,
            "current": 0,
            "type": operation_type,
        }

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var.set(0)
        self.progress_bar.config(maximum=total_steps)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.grid()
        self.is_progress_visible = True

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.set_status(f"{message} (0/{total_steps})", operation_type, show_time=True)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
        self.root.update()
        self.root.update_idletasks()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self.progress_bar.update()
        self.status_frame.update()

    def update_progress(self, step, message=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if not self.is_progress_visible or not self.current_operation:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not hasattr(self, "progress_bar") or not self.progress_bar:
            return

        self.current_operation["current"] = step
        self.progress_var.set(step)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message:
            display_message = message
        else:
            display_message = self.current_operation["message"]

        total = self.current_operation["total"]
        operation_type = self.current_operation["type"]

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        percent = int((step / total) * 100) if total > 0 else 0

        self.set_status(
            f"{display_message} ({step}/{total}) - {percent}%",
            operation_type,
            show_time=True,
        )

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
        self.root.update()
        self.root.update_idletasks()

    def finish_progress(self, success_message="–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", auto_reset=True):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if not self.is_progress_visible:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not hasattr(self, "progress_bar") or not self.progress_bar:
            return

        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.grid_remove()
        self.is_progress_visible = False

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.set_status(success_message, "success", show_time=True)

        # –ê–≤—Ç–æ—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        if auto_reset:
            self.root.after(3000, lambda: self.set_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "info"))

        self.current_operation = None
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
        self.root.update()
        self.root.update_idletasks()

    def set_temp_status(self, message, status_type="info", duration=2000):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –∞–≤—Ç–æ—Å–±—Ä–æ—Å–æ–º"""
        old_status = self.status_main.get()
        old_color = self.status_label.cget("foreground")

        self.set_status(message, status_type)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å
        def reset_status():
            self.status_main.set(old_status)
            self.status_label.config(foreground=old_color)

        self.root.after(duration, reset_status)

    def set_animated_status(
        self, base_message, status_type="loading", animation_chars="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
    ):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –≤—Ä–∞—â–∞—é—â–∏–º–∏—Å—è —Å–∏–º–≤–æ–ª–∞–º–∏"""
        if not hasattr(self, "_animation_counter"):
            self._animation_counter = 0
        if not hasattr(self, "_animation_job"):
            self._animation_job = None

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é
        if self._animation_job:
            self.root.after_cancel(self._animation_job)

        def animate():
            char = animation_chars[self._animation_counter % len(animation_chars)]
            animated_message = f"{char} {base_message}"
            self.set_status(animated_message, status_type, show_time=False)

            self._animation_counter += 1
            self._animation_job = self.root.after(
                100, animate
            )  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        animate()

        return self._animation_job  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

    def stop_animated_status(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        if hasattr(self, "_animation_job") and self._animation_job:
            self.root.after_cancel(self._animation_job)
            self._animation_job = None

    def add_to_base(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ –∫–æ–¥–∞–º –∏ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.log_info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if self.comparison_result is None:
            self.log_error("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        code_matches = self.comparison_result.get("code_matches", [])
        bracket_matches = self.comparison_result.get("bracket_matches", [])
        new_items = self.comparison_result.get("new_items", [])

        if not code_matches and not bracket_matches and not new_items:
            self.log_info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")
            return

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        total_items = len(code_matches) + len(bracket_matches) + len(new_items)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        self.start_progress("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É", 5, "loading")
        self.set_animated_status("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É", "loading")

        try:
            # –≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            self.update_progress(1, f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é {total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            self.set_status("üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...", "loading")

            # –≠—Ç–∞–ø 2: –ü–æ–∫–∞–∑ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞
            self.update_progress(2, "–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
            self.set_status("üîç –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤...", "loading")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            self.show_add_articles_dialog(bracket_matches, code_matches, new_items)

            # –≠—Ç–∞–ø 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.update_progress(5, "–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≥–æ—Ç–æ–≤")
            self.set_status("‚úÖ –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≥–æ—Ç–æ–≤", "success")

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {e}")
            self.set_status(f"‚ùå –û—à–∏–±–∫–∞: {e}", "error")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É: {e}")
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.finish_progress("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ", auto_reset=True)
            self.stop_animated_status()

    def show_add_articles_dialog(self, bracket_matches, code_matches, new_items):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        self.update_progress(2, "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
        self.set_status("üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤...", "loading")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        supplier_name = ""
        if self.current_config == "vitya":
            supplier_name = "–í–∏—Ç—è"
        elif self.current_config == "dimi":
            supplier_name = "–î–∏–º–∞"
        else:
            supplier_name = self.current_config.upper()

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–∏–∞–ª–æ–≥–∞
        self.set_status("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ –¥–∏–∞–ª–æ–≥–∞...", "loading")
        dialog = tk.Toplevel(self.root)
        dialog.title(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_name}")
        dialog.resizable(True, True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings = self.load_settings()
        dialog_width = settings.get("add_articles_dialog_width", 800)
        dialog_height = settings.get("add_articles_dialog_height", 533)

        dialog.geometry(f"{dialog_width}x{dialog_height}")

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.set_status("üìç –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞...", "loading")
        self.center_window(dialog, dialog_width, dialog_height, self.root)

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.set_status("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞...", "loading")
        dialog.transient(self.root)
        dialog.grab_set()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        def on_dialog_resize(event):
            if event.widget == dialog:
                new_width = event.width
                new_height = event.height
                if new_width > 100 and new_height > 100:
                    settings["add_articles_dialog_width"] = new_width
                    settings["add_articles_dialog_height"] = new_height
                    self.save_settings(settings)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        def on_dialog_close():
            dialog.destroy()

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dialog.bind("<Configure>", on_dialog_resize)
        dialog.protocol("WM_DELETE_WINDOW", on_dialog_close)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.set_status("üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞...", "loading")
        header_frame = ttk.Frame(dialog)
        header_frame.pack(fill="x", padx=10, pady=10)

        ttk.Label(
            header_frame,
            text=f"üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_name}",
            font=("Arial", 14, "bold"),
        ).pack(anchor="w")

        info_text = "–ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–æ–¥–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –∞—Ä—Ç–∏–∫—É–ª–∞—Ö –¥—Ä—É–≥–∏—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –∞—Ä—Ç–∏–∫—É–ª—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É:"
        ttk.Label(header_frame, text=info_text, font=("Arial", 10)).pack(
            anchor="w", pady=(5, 0)
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–∫–±–æ–∫—Å–æ–≤ –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∫–ª–∞–¥–æ–∫
        dialog.checkboxes = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
        dialog.code_checkboxes = []  # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –∫–æ–¥–æ–≤
        dialog.new_item_checkboxes = []  # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        dialog.code_matches = bracket_matches + code_matches  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ–¥—ã
        dialog.new_items = new_items

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        self.set_status("üìë –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –¥–∏–∞–ª–æ–≥–∞...", "loading")
        notebook = ttk.Notebook(dialog)
        notebook.pack(fill="both", expand=True, padx=10, pady=10)

        # –í–∫–ª–∞–¥–∫–∞ 1: –ö–æ–¥—ã (–æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ)
        if dialog.code_matches:
            self.set_status(
                f"üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–¥–æ–≤ ({len(dialog.code_matches)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)...",
                "loading",
            )
            code_frame = ttk.Frame(notebook)
            notebook.add(code_frame, text=f"üîó –ö–æ–¥—ã ({len(dialog.code_matches)})")
            self.create_matches_table_with_buttons(
                code_frame, dialog.code_matches, "code", dialog
            )

        # –í–∫–ª–∞–¥–∫–∞ 2: –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        if new_items:
            self.set_status(
                f"üì• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ({len(new_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)...",
                "loading",
            )
            new_frame = ttk.Frame(notebook)
            notebook.add(new_frame, text=f"üì• –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã ({len(new_items)})")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            self.create_simple_new_items_table(new_frame, new_items, dialog)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.set_status("üîò –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...", "loading")
        button_frame = ttk.Frame(dialog)
        button_frame.pack(fill="x", padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(
            button_frame,
            text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
            command=lambda: self.select_all_matches(dialog),
        ).pack(side="left", padx=5)

        ttk.Button(
            button_frame,
            text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ",
            command=lambda: self.deselect_all_matches(dialog),
        ).pack(side="left", padx=5)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(button_frame, orient="vertical").pack(
            side="left", fill="y", padx=10
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_button = ttk.Button(
            button_frame,
            text="üîó –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã",
            command=lambda: self.process_selected_articles(
                dialog, dialog.code_matches, dialog.new_items
            ),
        )
        add_button.pack(side="right", padx=5)

        ttk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=on_dialog_close).pack(
            side="right", padx=5
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –¥–∏–∞–ª–æ–≥ –≥–æ—Ç–æ–≤
        self.update_progress(3, "–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≥–æ—Ç–æ–≤")
        self.set_status("‚úÖ –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≥–æ—Ç–æ–≤", "success")

    def create_matches_table_with_buttons(
        self, parent_frame, matches, match_type, dialog
    ):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤–∫–ª–∞–¥–∫–∏"""

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
        self.set_status(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã {match_type}...", "loading")
        main_frame = ttk.Frame(parent_frame)
        main_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        table_frame = ttk.Frame(main_frame)
        table_frame.pack(fill="both", expand=True)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
        self.create_matches_table(table_frame, matches, match_type, dialog)

        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
        tab_button_frame = ttk.Frame(main_frame)
        tab_button_frame.pack(fill="x", pady=(10, 0))

        # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏
        ttk.Button(
            tab_button_frame,
            text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ",
            command=lambda: self.select_all_matches(
                dialog,
                (
                    dialog.code_checkboxes
                    if match_type == "code"
                    else dialog.new_item_checkboxes
                ),
            ),
        ).pack(side="left", padx=5)

        ttk.Button(
            tab_button_frame,
            text="‚ùå –°–Ω—è—Ç—å –≤—Å–µ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ",
            command=lambda: self.deselect_all_matches(
                dialog,
                (
                    dialog.code_checkboxes
                    if match_type == "code"
                    else dialog.new_item_checkboxes
                ),
            ),
        ).pack(side="left", padx=5)

    def create_matches_table(self, parent_frame, matches, match_type, dialog):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è Treeview –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è"""

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        self.set_status(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π {match_type}...", "loading")
        table_frame = ttk.Frame(parent_frame)
        table_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # –°–æ–∑–¥–∞–µ–º Treeview —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏
        columns = (
            "code",
            "supplier_name",
            "supplier_article",
            "supplier_color",
            "supplier_price",
            "base_name",
            "base_article",
            "base_color",
            "base_price",
        )
        tree = ttk.Treeview(
            table_frame, columns=columns, show="tree headings", height=10
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        self.set_status("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...", "loading")
        tree.heading("#0", text="‚úì", anchor="w")
        tree.column("#0", width=40, minwidth=40, stretch=False)

        tree.heading("code", text="–ö–æ–¥", anchor="w")
        tree.column("code", width=120, minwidth=80, stretch=True)

        tree.heading("supplier_name", text="–¢–æ–≤–∞—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", anchor="w")
        tree.column("supplier_name", width=250, minwidth=150, stretch=True)

        tree.heading("supplier_article", text="–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", anchor="w")
        tree.column("supplier_article", width=120, minwidth=80, stretch=True)

        tree.heading("supplier_color", text="–¶–≤–µ—Ç", anchor="w")
        tree.column("supplier_color", width=80, minwidth=60, stretch=True)

        tree.heading("supplier_price", text="–¶–µ–Ω–∞", anchor="w")
        tree.column("supplier_price", width=80, minwidth=60, stretch=True)

        tree.heading("base_name", text="–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä", anchor="w")
        tree.column("base_name", width=250, minwidth=150, stretch=True)

        tree.heading("base_article", text="–ê—Ä—Ç–∏–∫—É–ª", anchor="w")
        tree.column("base_article", width=120, minwidth=80, stretch=True)

        tree.heading("base_color", text="–¶–≤–µ—Ç", anchor="w")
        tree.column("base_color", width=80, minwidth=60, stretch=True)

        tree.heading("base_price", text="–¶–µ–Ω–∞", anchor="w")
        tree.column("base_price", width=80, minwidth=60, stretch=True)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        v_scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
        h_scrollbar = ttk.Scrollbar(
            table_frame, orient="horizontal", command=tree.xview
        )
        tree.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.set_status(
            f"üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π ({len(matches)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)...", "loading"
        )
        for i, match in enumerate(matches):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –æ–±—Ä–µ–∑–∞–Ω–∏—è
            supplier_name = match.get("supplier_name", "")
            base_name = match.get("base_name", "")

            code = match.get("code", "N/A")
            supplier_article = str(match.get("supplier_article", "N/A"))
            supplier_color = str(match.get("supplier_color", "N/A"))
            supplier_price = f"${match.get('supplier_price', 0):.2f}"

            base_article = str(match.get("base_article", "N/A"))
            base_color = str(match.get("base_color", "N/A"))

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –±–∞–∑—ã (–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫)
            base_price = "N/A"
            if self.current_config == "vitya":
                base_price = f"${match.get('price_vitya_usd', 0):.2f}"
            elif self.current_config == "dimi":
                base_price = f"${match.get('price_dimi_usd', 0):.2f}"
            elif self.current_config == "mila":
                base_price = f"${match.get('price_mila_usd', 0):.2f}"
            else:
                base_price = f"${match.get('base_price', 0):.2f}"

            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —á–µ–∫–±–æ–∫—Å–æ–º –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
            item_id = tree.insert(
                "",
                "end",
                text="‚òê",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–æ—à–µ–Ω–Ω—ã–π —á–µ–∫–±–æ–∫—Å
                values=(
                    code,
                    supplier_name,
                    supplier_article,
                    supplier_color,
                    supplier_price,
                    base_name,
                    base_article,
                    base_color,
                    base_price,
                ),
            )

            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —á–µ–∫–±–æ–∫—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            checkbox = type("Checkbox", (), {})()  # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
            checkbox.var = tk.BooleanVar(value=False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–±—Ä–æ—à–µ–Ω—ã
            checkbox.match_data = match
            checkbox.match_type = match_type
            checkbox.item_id = item_id
            checkbox.tree = tree

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            def update_display(checkbox=checkbox):
                if checkbox.var.get():
                    tree.item(checkbox.item_id, text="‚òë")
                else:
                    tree.item(checkbox.item_id, text="‚òê")

            checkbox.var.trace("w", lambda *args, cb=checkbox: update_display(cb))

            dialog.checkboxes.append(checkbox)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
            if match_type == "code":
                dialog.code_checkboxes.append(checkbox)
            elif match_type == "new_item":
                dialog.new_item_checkboxes.append(checkbox)

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ –ø–æ –∫–ª–∏–∫—É
        def on_item_click(event):
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞
            x, y = event.x, event.y
            item = tree.identify_row(y)
            column = tree.identify_column(x)

            if item and column == "#1":  # –ö–ª–∏–∫ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ (—á–µ–∫–±–æ–∫—Å)
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–µ–∫–±–æ–∫—Å
                for checkbox in dialog.checkboxes:
                    if hasattr(checkbox, "item_id") and checkbox.item_id == item:
                        checkbox.var.set(not checkbox.var.get())
                        break

        tree.bind("<Button-1>", on_item_click)

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        tree.grid(row=0, column=0, sticky="nsew")
        v_scrollbar.grid(row=0, column=1, sticky="ns")
        h_scrollbar.grid(row=1, column=0, sticky="ew")

        table_frame.grid_rowconfigure(0, weight=1)
        table_frame.grid_columnconfigure(0, weight=1)

    def select_all_matches(self, dialog, checkbox_list=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤"""
        if checkbox_list is None:
            checkbox_list = getattr(dialog, "checkboxes", [])

        for checkbox in checkbox_list:
            checkbox.var.set(True)

    def deselect_all_matches(self, dialog, checkbox_list=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞ —Å–æ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤"""
        if checkbox_list is None:
            checkbox_list = getattr(dialog, "checkboxes", [])

        for checkbox in checkbox_list:
            checkbox.var.set(False)

    def process_selected_articles(self, dialog, code_matches, new_items):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã"""

        # –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        selected_matches = []
        selected_new_items = []  # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫

        for checkbox in dialog.checkboxes:
            if checkbox.var.get():  # –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤—ã–±—Ä–∞–Ω
                if checkbox.match_type == "new_item":
                    # –î–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–∑–µ
                    selected_new_items.append(
                        {
                            "match_data": checkbox.match_data,
                            "match_type": checkbox.match_type,
                            "base_row_number": None,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏–∂–µ
                        }
                    )
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    selected_matches.append(
                        {
                            "match_data": checkbox.match_data,
                            "match_type": checkbox.match_type,
                        }
                    )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if not selected_matches and not selected_new_items:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
            )
            return

        # –î–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –≤ –±–∞–∑–µ
        if selected_new_items:
            self.log_info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(selected_new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...")
            found_count = 0
            not_found_count = 0

            for new_item in selected_new_items:
                supplier_name = new_item["match_data"].get("name", "")
                if supplier_name:
                    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –ø–æ –Ω–µ—á–µ—Ç–∫–æ–º—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é
                    found_base_name, base_row_number, base_color, base_price = (
                        self.find_item_by_fuzzy_matching(supplier_name)
                    )
                    if base_row_number != "N/A":
                        new_item["base_row_number"] = int(base_row_number)
                        found_count += 1
                    else:
                        new_item["base_row_number"] = None
                        not_found_count += 1

            # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –¥–µ—Ç–∞–ª–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
            if found_count > 0:
                self.log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: {found_count} —Ç–æ–≤–∞—Ä–æ–≤")
            if not_found_count > 0:
                self.log_info(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: {not_found_count} —Ç–æ–≤–∞—Ä–æ–≤")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        total_items = len(selected_matches) + len(selected_new_items)
        confirmation_message = f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å {total_items} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤?\n\n"

        if selected_matches:
            confirmation_message += (
                f"üîó –ê—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(selected_matches)}\n"
            )
        if selected_new_items:
            confirmation_message += (
                f"üìù –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫: {len(selected_new_items)}\n"
            )

        result = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", confirmation_message)

        if not result:
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        try:
            dialog_width = dialog.winfo_width()
            dialog_height = dialog.winfo_height()
            if dialog_width > 100 and dialog_height > 100:
                settings = self.load_settings()
                settings["add_articles_dialog_width"] = dialog_width
                settings["add_articles_dialog_height"] = dialog_height
                self.save_settings(settings)
        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∏–∞–ª–æ–≥–∞: {e}")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        dialog.destroy()

        try:
            self.set_status(
                "üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤...", "loading"
            )
            self.update_progress(4, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
            articles_added = 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ –±–∞–∑–µ
            self.set_status("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", "loading")
            if self.current_config == "vitya":
                supplier_article_col = "article_vitya"
            elif self.current_config == "dimi":
                supplier_article_col = "article_dimi"
            else:
                supplier_article_col = "article"

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è Excel –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            excel_column_name = self.get_excel_column_name_from_config(
                supplier_article_col
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            self.set_status(
                f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(selected_matches)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...",
                "loading",
            )
            self.log_info(
                f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(selected_matches)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π..."
            )
            self.log_info(f"üìä –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {supplier_article_col}")

            self.update_progress(
                2, f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(selected_matches)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤"
            )

            for i, selected in enumerate(selected_matches, 1):
                match = selected["match_data"]
                match_type = selected["match_type"]

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                self.set_status(
                    f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(selected_matches)}: {match.get('code', 'N/A')}...",
                    "loading",
                )

                try:
                    base_idx = match.get("base_index")
                    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                    supplier_article = match.get("supplier_article") or match.get(
                        "article"
                    )
                    code = match.get("code")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if (
                        base_idx is not None
                        and supplier_article
                        and str(supplier_article).strip() not in ["", "nan", "None"]
                    ):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
                        if supplier_article_col not in self.base_df.columns:
                            self.log_error(
                                f"‚ùå –°—Ç–æ–ª–±–µ—Ü {supplier_article_col} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
                            )
                            continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–¥–µ–∫—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if base_idx not in self.base_df.index:
                            self.log_error(
                                f"‚ùå –ò–Ω–¥–µ–∫—Å {base_idx} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
                            )
                            continue

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞
                        data_type = self.get_column_data_type(supplier_article_col)

                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
                            if data_type == "int":
                                value = int(supplier_article)
                            elif data_type == "float":
                                value = float(supplier_article)
                            else:
                                value = str(
                                    supplier_article
                                )  # –î–ª—è —Å—Ç—Ä–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –±–∞–∑–µ –Ω–µ—Ç —É–∂–µ —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞
                            current_article = self.base_df.loc[
                                base_idx, supplier_article_col
                            ]

                            if pd.isna(current_article) or str(
                                current_article
                            ).strip() in ["", "nan"]:
                                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                                old_value = self.base_df.loc[
                                    base_idx, supplier_article_col
                                ]
                                self.base_df.loc[base_idx, supplier_article_col] = value
                                articles_added += 1

                                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–µ—Ç–∞–ª–∏ –±—É–¥—É—Ç –≤ –æ—Ç—á–µ—Ç–µ
                                if match_type == "bracket":
                                    self.log_info(
                                        f"‚úÖ üì¶ –î–æ–±–∞–≤–ª–µ–Ω –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –∫–æ–¥–∞ –≤ —Å–∫–æ–±–∫–∞—Ö: {code}"
                                    )
                                else:
                                    self.log_info(
                                        f"‚úÖ üîó –î–æ–±–∞–≤–ª–µ–Ω –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –∫–æ–¥–∞: {code}"
                                    )

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                                if not hasattr(self, "changes_log"):
                                    self.changes_log = []

                                change_info = {
                                    "type": "article_added",
                                    "base_index": base_idx,
                                    "code": code,
                                    "match_type": match_type,
                                    "column": excel_column_name,
                                    "old_value": (
                                        str(old_value)
                                        if not pd.isna(old_value)
                                        else "–ø—É—Å—Ç–æ"
                                    ),
                                    "new_value": str(value),
                                    "base_name": match.get("base_name", "N/A"),
                                    "supplier_name": match.get("supplier_name", "N/A"),
                                }
                                self.changes_log.append(change_info)

                            else:
                                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–∫–∞–∑–∞
                                existing_value = str(current_article).strip()
                                if existing_value == str(supplier_article).strip():
                                    reason = f"–∞—Ä—Ç–∏–∫—É–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ ({existing_value})"
                                else:
                                    reason = f"—è—á–µ–π–∫–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º ({existing_value}), –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞ ({supplier_article})"

                                self.log_info(f"‚è≠Ô∏è –ö–æ–¥ {code}: –ü–†–û–ü–£–©–ï–ù - {reason}")

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—Å–∫–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                                if not hasattr(self, "changes_log"):
                                    self.changes_log = []

                                skip_info = {
                                    "type": "article_skipped",
                                    "base_index": base_idx,
                                    "code": code,
                                    "match_type": match_type,
                                    "column": excel_column_name,
                                    "existing_value": existing_value,
                                    "attempted_value": str(supplier_article),
                                    "reason": reason,
                                    "base_name": match.get("base_name", "N/A"),
                                    "supplier_name": match.get("supplier_name", "N/A"),
                                }
                                self.changes_log.append(skip_info)

                        except ValueError as e:
                            self.log_error(
                                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ {supplier_article} –≤ —Ç–∏–ø {data_type}: {e}"
                            )
                            continue
                        except Exception as e:
                            self.log_error(
                                f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ {supplier_article}: {e}"
                            )
                            continue
                    else:
                        self.log_error(
                            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: base_idx={base_idx}, supplier_article={supplier_article}"
                        )
                        self.log_error(f"   match keys: {list(match.keys())}")
                        self.log_error(
                            f"   supplier_article from match: {match.get('supplier_article')}"
                        )
                        self.log_error(f"   article from match: {match.get('article')}")

                except Exception as e:
                    self.log_error(
                        f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –ø–æ –∫–æ–¥—É {match.get('code', 'N/A')}: {e}"
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if i % 5 == 0:
                    progress_percent = int((i / len(selected_matches)) * 100)
                    self.update_progress(
                        4,
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(selected_matches)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤ ({progress_percent}%)",
                    )
                    self.root.update()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.log_info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            self.log_info(f"   üîó –ê—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {articles_added}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã - –≤—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ Excel
            rows_inserted = 0
            if selected_new_items:
                self.log_info(
                    f"üìù –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(selected_new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤..."
                )
                self.set_status(
                    f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç–∞–≤–∫–µ {len(selected_new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...",
                    "loading",
                )
                self.update_progress(
                    5, f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç–∞–≤–∫–µ {len(selected_new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
                )

                # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                row_numbers_to_insert = []
                processed_items = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤

                self.set_status(
                    f"üîç –ê–Ω–∞–ª–∏–∑ {len(selected_new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤...", "loading"
                )
                self.update_progress(
                    6, f"–ê–Ω–∞–ª–∏–∑ {len(selected_new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
                )

                for i, new_item in enumerate(selected_new_items, 1):
                    base_row_number = new_item.get("base_row_number")
                    item_name = new_item["match_data"].get("name", "N/A")

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    self.set_status(
                        f"üîç –ê–Ω–∞–ª–∏–∑ {i}/{len(selected_new_items)}: {item_name[:40]}...",
                        "loading",
                    )

                    if base_row_number is not None:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                        try:
                            row_num = int(base_row_number)
                            if row_num > 0:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä
                                item_key = f"{item_name}_{row_num}"
                                if item_key not in processed_items:
                                    row_numbers_to_insert.append(row_num)
                                    processed_items.add(item_key)
                                    self.log_info(
                                        f"üìù –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä '{item_name}' - –≤—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ {row_num}"
                                    )
                                else:
                                    self.log_info(
                                        f"‚ö†Ô∏è –¢–æ–≤–∞—Ä '{item_name}' —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_num}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                                    )
                            else:
                                self.log_error(
                                    f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ {row_num} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{item_name}'"
                                )
                        except (ValueError, TypeError) as e:
                            self.log_error(
                                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ '{base_row_number}' –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{item_name}': {e}"
                            )
                    else:
                        self.log_info(
                            f"‚ö†Ô∏è –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä '{item_name}' - –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                        )

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
                    if i % 3 == 0 or i == len(selected_new_items):
                        progress_percent = int((i / len(selected_new_items)) * 100)
                        self.update_progress(
                            6,
                            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(selected_new_items)} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ({progress_percent}%)",
                        )
                        self.root.update()

                self.log_info(
                    f"üìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {len(row_numbers_to_insert)}"
                )

                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ Excel
                if row_numbers_to_insert:
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã
                        base_file_path = "data/input"
                        original_path = None

                        self.log_info(
                            f"üîç –ò—â–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {base_file_path}"
                        )

                        if os.path.exists(base_file_path):
                            base_files = []
                            for file in os.listdir(base_file_path):
                                if file.endswith(
                                    (".xlsx", ".xls")
                                ) and not file.startswith("~"):
                                    full_path = os.path.join(base_file_path, file)
                                    file_size = os.path.getsize(full_path)
                                    base_files.append((full_path, file_size, file))
                                    self.log_info(
                                        f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file} ({file_size} –±–∞–π—Ç)"
                                    )

                            if base_files:
                                base_files.sort(key=lambda x: x[1], reverse=True)
                                original_path = base_files[0][0]
                                self.log_info(
                                    f"üéØ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –±–∞–∑—ã: {os.path.basename(original_path)}"
                                )

                                self.set_status(
                                    f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª: {os.path.basename(original_path)}...",
                                    "loading",
                                )
                                self.update_progress(
                                    9,
                                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª: {os.path.basename(original_path)}",
                                )
                            else:
                                self.log_error("‚ùå –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç Excel —Ñ–∞–π–ª–æ–≤")

                        if original_path:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
                            self.set_status(
                                "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É...", "loading"
                            )
                            self.update_progress(9, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É")

                            if os.access(original_path, os.R_OK | os.W_OK):
                                self.log_info(
                                    f"‚úÖ –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏: {os.path.basename(original_path)}"
                                )

                                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                                self.set_status(
                                    f"üìù –í—Å—Ç–∞–≤–∫–∞ {len(row_numbers_to_insert)} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ Excel...",
                                    "loading",
                                )
                                self.update_progress(
                                    7,
                                    f"–í—Å—Ç–∞–≤–∫–∞ {len(row_numbers_to_insert)} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ Excel",
                                )

                                self.insert_empty_rows_in_excel(
                                    original_path, row_numbers_to_insert
                                )
                                rows_inserted = len(row_numbers_to_insert)
                                self.log_info(
                                    f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {rows_inserted} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ Excel —Ñ–∞–π–ª"
                                )
                            else:
                                self.log_error(
                                    f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {os.path.basename(original_path)}"
                                )
                        else:
                            self.log_error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫")

                    except Exception as e:
                        self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {e}")
                        messagebox.showerror(
                            "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏: {e}"
                        )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ò–ò (—É–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
            processed_articles = []
            for selected in selected_matches:
                match = selected["match_data"]
                supplier_article = match.get("supplier_article") or match.get("article")
                if supplier_article and str(supplier_article).strip() not in [
                    "",
                    "nan",
                    "None",
                ]:
                    processed_articles.append(
                        str(supplier_article)
                    )  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É!

            # –û–±–Ω–æ–≤–ª—è–µ–º comparison_result - —É–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ new_items
            if self.comparison_result and "new_items" in self.comparison_result:
                original_count = len(self.comparison_result["new_items"])
                self.comparison_result["new_items"] = [
                    item
                    for item in self.comparison_result["new_items"]
                    if item.get("article") not in processed_articles
                ]
                new_count = len(self.comparison_result["new_items"])
                self.log_info(
                    f"üìâ –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ò–ò: –±—ã–ª–æ {original_count}, —Å—Ç–∞–ª–æ {new_count}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ
            self.update_main_window_info(
                articles_added + rows_inserted,
                len(selected_matches) + len(selected_new_items),
                processed_articles,
            )

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.set_status("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "success")
            self.update_progress(10, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

            result_message = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            result_message += f"üîó –ê—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {articles_added}\n"
            result_message += f"üìù –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: {rows_inserted}\n"
            result_message += f"üìã –í—ã–±—Ä–∞–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(selected_matches) + len(selected_new_items)}\n"
            if processed_articles:
                result_message += (
                    f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã: {', '.join(processed_articles[:5])}"
                )
                if len(processed_articles) > 5:
                    result_message += f" –∏ –µ—â–µ {len(processed_articles) - 5}...\n"
                else:
                    result_message += "\n"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Excel —Ñ–∞–π–ª –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ
            if articles_added > 0 or rows_inserted > 0:
                self.set_status("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Excel —Ñ–∞–π–ª...", "loading")
                self.update_progress(8, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Excel —Ñ–∞–π–ª")
                self.log_info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Excel —Ñ–∞–π–ª...")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –±–∞–∑—ã
                base_file_path = "data/input"
                original_path = None

                self.set_status("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...", "loading")
                self.update_progress(8, "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

                if os.path.exists(base_file_path):
                    base_files = []
                    for file in os.listdir(base_file_path):
                        if file.endswith((".xlsx", ".xls")) and not file.startswith(
                            "~"
                        ):
                            full_path = os.path.join(base_file_path, file)
                            file_size = os.path.getsize(full_path)
                            base_files.append((full_path, file_size, file))

                    if base_files:
                        base_files.sort(key=lambda x: x[1], reverse=True)
                        original_path = base_files[0][0]

                if original_path:
                    try:
                        # –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        if hasattr(self, "changes_log") and self.changes_log:
                            self.update_excel_articles_preserve_formatting(
                                original_path, self.changes_log
                            )
                        else:
                            # Fallback - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                            self.base_df.to_excel(
                                original_path, index=False, engine="openpyxl"
                            )

                        self.log_info(
                            f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {os.path.basename(original_path)}"
                        )
                        if articles_added > 0:
                            result_message += f"\nüíæ –ê—Ä—Ç–∏–∫—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É"
                        if rows_inserted > 0:
                            result_message += f"\nüíæ –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ Excel"
                    except Exception as save_error:
                        self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_error}")
                        messagebox.showerror(
                            "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è: {save_error}",
                        )
                        return
                else:
                    self.log_error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

            messagebox.showinfo("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", result_message)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            if articles_added > 0 or rows_inserted > 0:
                self.articles_added = True
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self.price_updated = False
                self.log_info(
                    "üîí –ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É' –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤"
                )
                self.log_info(
                    "üîÑ –ö–Ω–æ–ø–∫–∞ '–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            self.set_status("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...", "loading")
            self.update_buttons_state(articles_added_this_run=(articles_added > 0))
            self.update_progress(4, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
            self.finish_progress(
                f"–ê—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {articles_added}", auto_reset=True
            )
            self.set_status(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {articles_added} –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –±–∞–∑—É", "success"
            )

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {e}")
            self.finish_progress("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤", auto_reset=True)

    def update_main_window_info(
        self, articles_added, selected_count, processed_articles
    ):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–∫–Ω–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–∞—Ö"""

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        from datetime import datetime

        timestamp = datetime.now().strftime("%H:%M:%S")

        info_text = f"\n{'='*60}\n"
        info_text += f"[{timestamp}] üîó –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–†–¢–ò–ö–£–õ–û–í –ó–ê–í–ï–†–®–ï–ù–û\n"
        info_text += f"{'='*60}\n"
        info_text += f"‚úÖ –ê—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É: {articles_added}\n"
        info_text += f"üìã –í—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {selected_count}\n"

        if articles_added > 0:
            info_text += f"üìù –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã:\n"
            for i, article in enumerate(processed_articles[:10], 1):
                info_text += f"   {i}. {article}\n"
            if len(processed_articles) > 10:
                info_text += f"   ... –∏ –µ—â–µ {len(processed_articles) - 10} –∞—Ä—Ç–∏–∫—É–ª–æ–≤\n"
        else:
            info_text += f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            info_text += f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ\n"
            info_text += f"   ‚Ä¢ –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ö\n"
            info_text += f"   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å–æ —Å—Ç–æ–ª–±—Ü–∞–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ò–ò
        if (
            hasattr(self, "comparison_result")
            and self.comparison_result
            and "new_items" in self.comparison_result
        ):
            remaining_count = len(self.comparison_result["new_items"])
            info_text += f"\nü§ñ –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∏: {remaining_count}\n"

        info_text += f"{'='*60}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if hasattr(self, "info_text"):
            self.info_text.insert(tk.END, info_text)
            self.info_text.see(tk.END)  # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –º–æ–≥–ª–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –∞—Ä—Ç–∏–∫—É–ª—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —ç—Ç–æ–º —Å–µ–∞–Ω—Å–µ
        self.update_buttons_state(articles_added_this_run=(articles_added > 0))

    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π –±–∞–∑—ã"""
        self.log_info("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MiStockSync")
        settings_window.resizable(False, False)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ–∫–Ω–∞
        self.set_window_icon(settings_window)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        window_width = 450
        window_height = 480  # –£–≤–µ–ª–∏—á–µ–Ω–æ –∏–∑-–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
        self.center_window(settings_window, window_width, window_height)

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        settings_window.transient(self.root)
        settings_window.grab_set()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            settings_window, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", font=("Arial", 14, "bold")
        ).pack(pady=10)

        # –†–∞–º–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_frame = ttk.LabelFrame(
            settings_window, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10"
        )
        settings_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã
        auto_load_frame = ttk.Frame(settings_frame)
        auto_load_frame.pack(fill="x", pady=10)

        ttk.Label(
            auto_load_frame,
            text="üìä –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:",
            font=("Arial", 10, "bold"),
        ).pack(anchor="w")

        auto_load_var = tk.BooleanVar(value=self.auto_load_base_enabled)
        auto_load_check = ttk.Checkbutton(
            auto_load_frame,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–∞–∑—É –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏",
            variable=auto_load_var,
        )
        auto_load_check.pack(anchor="w", padx=20, pady=5)

        ttk.Label(
            auto_load_frame,
            text="–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–∞–∑–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.",
            font=("Arial", 8),
            foreground="gray",
        ).pack(anchor="w", padx=20)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(settings_frame, orient="horizontal").pack(fill="x", pady=15)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
        font_frame = ttk.Frame(settings_frame)
        font_frame.pack(fill="x", pady=10)

        ttk.Label(
            font_frame,
            text="üî§ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Arial", 10, "bold"),
        ).pack(anchor="w")

        font_size_var = tk.StringVar(value=self.current_font_size)

        font_options = [
            ("üìù –û–±—ã—á–Ω—ã–π", "normal"),
            ("üìÑ –°—Ä–µ–¥–Ω–∏–π", "medium"),
            ("üìä –ö—Ä—É–ø–Ω—ã–π", "large"),
        ]

        for text, value in font_options:
            ttk.Radiobutton(
                font_frame, text=text, variable=font_size_var, value=value
            ).pack(anchor="w", padx=20, pady=2)

        ttk.Label(
            font_frame,
            text="–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            font=("Arial", 8),
            foreground="gray",
        ).pack(anchor="w", padx=20, pady=(5, 0))

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(settings_frame, orient="horizontal").pack(fill="x", pady=15)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
        exit_frame = ttk.Frame(settings_frame)
        exit_frame.pack(fill="x", pady=10)

        ttk.Label(
            exit_frame,
            text="üö™ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞:",
            font=("Arial", 10, "bold"),
        ).pack(anchor="w")

        confirm_exit_var = tk.BooleanVar(value=self.settings.get("confirm_exit", True))
        confirm_exit_check = ttk.Checkbutton(
            exit_frame,
            text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            variable=confirm_exit_var,
        )
        confirm_exit_check.pack(anchor="w", padx=20, pady=5)

        ttk.Label(
            exit_frame,
            text="–ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É,\n–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö.",
            font=("Arial", 8),
            foreground="gray",
        ).pack(anchor="w", padx=20)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(settings_frame, orient="horizontal").pack(fill="x", pady=15)

        # –§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        ttk.Label(
            settings_frame, text="üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:", font=("Arial", 10, "bold")
        ).pack(anchor="w")

        planned_features = [
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            "‚Ä¢ –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–Ω",
            "‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "‚Ä¢ –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
        ]

        for feature in planned_features:
            ttk.Label(settings_frame, text=feature, font=("Arial", 9)).pack(
                anchor="w", padx=10
            )

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(settings_window)
        button_frame.pack(pady=10)

        def save_settings():
            """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –±–∞–∑—ã
            self.auto_load_base_enabled = auto_load_var.get()
            self.settings["auto_load_base"] = auto_load_var.get()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            new_font_size = font_size_var.get()
            if new_font_size != self.current_font_size:
                self.current_font_size = new_font_size
                self.settings["font_size"] = new_font_size
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å—Ä–∞–∑—É
                self.apply_font_size(new_font_size)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
            self.settings["confirm_exit"] = confirm_exit_var.get()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
            if self.save_settings(self.settings):
                self.log_info(
                    f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞={auto_load_var.get()}, —à—Ä–∏—Ñ—Ç={new_font_size}, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞={confirm_exit_var.get()}"
                )
                messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

            settings_window.destroy()

        def cancel_settings():
            """–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
            self.log_info("‚Ü©Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            settings_window.destroy()

        ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_settings).pack(
            side="left", padx=5
        )
        ttk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=cancel_settings).pack(
            side="left", padx=5
        )

    def quit_application(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)

        –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
        1. –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –ò –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        2. –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –≤—ã—Ö–æ–¥–∏–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –≤ –ª–æ–≥–∞—Ö
        3. –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ - –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        """
        self.log_info("üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞
        confirm_exit = self.settings.get("confirm_exit", True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö
        has_changes = (hasattr(self, "price_updated") and self.price_updated) or (
            hasattr(self, "articles_added") and self.articles_added
        )

        if has_changes and confirm_exit:
            # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
            result = messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞",
                "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ MiStockSync?\n\n"
                "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö!\n"
                "–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.",
                icon="warning",
            )
        elif has_changes and not confirm_exit:
            # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –≤—ã—Ö–æ–¥–∏–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –≤ –ª–æ–≥–∞—Ö
            result = True
            self.log_info(
                "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –≤—ã—Ö–æ–¥ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            )
        else:
            # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ - –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            result = True
            self.log_info("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ - –≤—ã—Ö–æ–¥ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

        if result:
            self.log_info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            try:
                current_width = self.root.winfo_width()
                current_height = self.root.winfo_height()

                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.settings["main_window_width"] = current_width
                self.settings["main_window_height"] = current_height

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.save_settings(self.settings)
                self.log_info(
                    f"üíæ –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {current_width}x{current_height}"
                )
            except Exception as e:
                self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞: {e}")

            self.logger.info("üìã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.root.quit()
        else:
            self.log_info("‚Ü©Ô∏è –í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        self.log_info("‚ÑπÔ∏è –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ...")

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ messagebox
        about_window = tk.Toplevel(self.root)
        about_window.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_window.resizable(False, False)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ–∫–Ω–∞
        self.set_window_icon(about_window)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        window_width = 320  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 300 –∏–∑-–∑–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        window_height = 350  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 240 –∏–∑-–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.center_window(about_window, window_width, window_height)

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        about_window.transient(self.root)
        about_window.grab_set()

        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(about_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        # –ë–æ–ª—å—à–∞—è –∏–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—ç–º–æ–¥–∑–∏)
        ttk.Label(main_frame, text="üöÄ", font=("Arial", 48)).pack()

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Ä—Å–∏—è
        ttk.Label(
            main_frame, text="MiStockSync v0.0.9", font=("Arial", 14, "bold")
        ).pack(pady=5)

        # –î–∞—Ç–∞
        ttk.Label(
            main_frame,
            text=f"üìÖ {datetime.now().strftime('%Y-%m-%d')}",
            font=("Arial", 9),
        ).pack()

        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        ttk.Label(
            main_frame,
            text="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤\n—Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n\n‚Ä¢ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            font=("Arial", 9),
            justify="center",
        ).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(
            main_frame, text="‚úÖ –û–ö", command=about_window.destroy, width=10
        ).pack(pady=10)

        self.log_info("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–∫–∞–∑–∞–Ω–∞")

    # === –§–£–ù–ö–¶–ò–ò –ú–ï–ù–Æ "–ü–†–ê–í–ö–ê" ===
    def cut_text(self):
        """–í—ã—Ä–µ–∑–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            focused_widget = self.root.focus_get()
            if hasattr(focused_widget, "selection_get"):
                text = focused_widget.selection_get()
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
                focused_widget.delete("sel.first", "sel.last")
                self.log_info("‚úÇÔ∏è –¢–µ–∫—Å—Ç –≤—ã—Ä–µ–∑–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except tk.TclError:
            self.log_info("‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è")

    def copy_text(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            focused_widget = self.root.focus_get()
            if hasattr(focused_widget, "selection_get"):
                text = focused_widget.selection_get()
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
                self.log_info("üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except tk.TclError:
            self.log_info("‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def copy_selected_text(self, text_widget, window):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            selected_text = text_widget.get(tk.SEL_FIRST, tk.SEL_LAST)
            window.clipboard_clear()
            window.clipboard_append(selected_text)
        except tk.TclError:
            pass  # –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è

    def copy_all_text(self, text_widget, window):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            text_widget.configure(state="normal")
            all_text = text_widget.get(1.0, tk.END)
            text_widget.configure(state="disabled")
            window.clipboard_clear()
            window.clipboard_append(all_text)
        except Exception as e:
            pass

    def copy_selected_text_with_notification(self, text_widget, window):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
        try:
            selected_text = text_widget.get(tk.SEL_FIRST, tk.SEL_LAST)
            window.clipboard_clear()
            window.clipboard_append(selected_text)
            messagebox.showinfo(
                "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!"
            )
        except tk.TclError:  # –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!"
            )
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def copy_all_text_with_notification(self, text_widget, window):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º"""
        try:
            text_widget.configure(state="normal")
            all_text = text_widget.get(1.0, tk.END)
            text_widget.configure(state="disabled")
            window.clipboard_clear()
            window.clipboard_append(all_text)
            messagebox.showinfo("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í—Å–µ –ª–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def select_all_text(self):
        """–í—ã–¥–µ–ª–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–ª–µ"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.info_text:
                # –î–ª—è ScrolledText
                focused_widget.tag_add("sel", "1.0", "end")
                self.log_info("üîò –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
            elif hasattr(focused_widget, "select_range"):
                # –î–ª—è Entry
                focused_widget.select_range(0, tk.END)
                self.log_info("üîò –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
        except:
            self.log_info("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è")

    def invert_selection(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.info_text:
                # –î–ª—è ScrolledText - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                try:
                    current_selection = focused_widget.tag_ranges("sel")
                    if current_selection:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ, —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
                        focused_widget.tag_remove("sel", "1.0", "end")
                        self.log_info("üîò –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å–Ω—è—Ç–æ")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è, –≤—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                        focused_widget.tag_add("sel", "1.0", "end")
                        self.log_info("üîò –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
                except:
                    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                    focused_widget.tag_add("sel", "1.0", "end")
                    self.log_info("üîò –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
            elif hasattr(focused_widget, "select_range"):
                # –î–ª—è Entry - –≤—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                focused_widget.select_range(0, tk.END)
                self.log_info("üîò –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
            else:
                self.log_info("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è")
        except Exception as e:
            self.log_info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è: {e}")

    # === –§–£–ù–ö–¶–ò–ò –†–ê–ó–ú–ï–†–ê –®–†–ò–§–¢–ê ===
    def change_font_size(self, size_type):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        if size_type in ["normal", "medium", "large"]:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            self.apply_font_size(size_type)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.current_font_size = size_type
            self.settings["font_size"] = size_type
            self.save_settings(self.settings)

            size_names = {"normal": "–æ–±—ã—á–Ω—ã–π", "medium": "—Å—Ä–µ–¥–Ω–∏–π", "large": "–∫—Ä—É–ø–Ω—ã–π"}

            self.log_info(f"üî§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {size_names[size_type]} —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞")
        else:
            self.log_info("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞")

    def apply_font_size(self, size_type):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é"""
        sizes = {
            "normal": ("Arial", 9),
            "medium": ("Arial", 11),
            "large": ("Arial", 13),
        }

        if size_type in sizes and hasattr(self, "info_text"):
            font_family, font_size = sizes[size_type]
            self.info_text.configure(font=(font_family, font_size))

    def center_window(self, window, width, height, parent=None):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ —ç–∫—Ä–∞–Ω–∞"""
        if parent is None:
            parent = self.root

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        parent.update_idletasks()
        parent_x = parent.winfo_x()
        parent_y = parent.winfo_y()
        parent_width = parent.winfo_width()
        parent_height = parent.winfo_height()

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        x = parent_x + (parent_width - width) // 2
        y = parent_y + (parent_height - height) // 2

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
        window.geometry(f"{width}x{height}+{x}+{y}")

    def set_window_icon(self, window):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–∫–Ω–∞"""
        try:
            from PIL import Image, ImageTk

            icon = ImageTk.PhotoImage(Image.open("assets/icon.png"))
            window.iconphoto(False, icon)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass

    def create_backup_base(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ –±–∞–∑—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

        if self.base_df is None:
            self.log_error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è backup")
            return False

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è backup –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            backup_dir = "data/output"
            os.makedirs(backup_dir, exist_ok=True)

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ backup
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"BACKUP_base_{self.current_config}_{timestamp}.xlsx"
            backup_path = os.path.join(backup_dir, backup_filename)

            # –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –≤ data/input
            data_dir = "data/input"
            base_files = []

            if os.path.exists(data_dir):
                for file in os.listdir(data_dir):
                    if file.endswith((".xlsx", ".xls")) and "base" in file.lower():
                        file_path = os.path.join(data_dir, file)
                        file_size = os.path.getsize(file_path)
                        base_files.append((file_path, file_size, file))

            if base_files:
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (—ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∞–∑–∞)
                base_files.sort(key=lambda x: x[1], reverse=True)
                original_path = base_files[0][0]

                # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                import shutil

                shutil.copy(original_path, backup_path)

                self.log_info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}")
                self.log_info(f"üìÅ –ü—É—Ç—å: {backup_path}")
                self.log_info(f"üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª: {os.path.basename(original_path)}")

                return True
            else:
                self.log_error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –≤ data/input")
                return False

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False

    def update_excel_prices_preserve_formatting(
        self, original_path, backup_path, price_updates, supplier_config
    ):
        """
        –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ Excel —Ñ–∞–π–ª–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        –ò–∑–º–µ–Ω—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω–æ–≤—ã—Ö —è—á–µ–µ–∫, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ
        """

        self.log_info("üîß –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ openpyxl
            if not OPENPYXL_AVAILABLE:
                self.log_error(
                    "‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install openpyxl"
                )
                return False

            # 1. –°–æ–∑–¥–∞–µ–º backup —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
            if backup_path:
                os.makedirs("data/output", exist_ok=True)
                shutil.copy(original_path, backup_path)
                self.log_info(f"üíæ Backup —Å–æ–∑–¥–∞–Ω: {os.path.basename(backup_path)}")
            else:
                self.log_info("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è backup")

            # 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª —á–µ—Ä–µ–∑ openpyxl (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
            workbook = load_workbook(original_path)
            worksheet = workbook.active  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ)
            if supplier_config == "vitya":
                price_column_name = self.get_excel_column_name_from_config(
                    "price_vitya_usd"
                )
                article_column_name = self.get_excel_column_name_from_config(
                    "article_vitya"
                )
            elif supplier_config == "dimi":
                price_column_name = self.get_excel_column_name_from_config(
                    "price_dimi_usd"
                )
                article_column_name = self.get_excel_column_name_from_config(
                    "article_dimi"
                )
            else:
                self.log_error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {supplier_config}")
                return False

            # 4. –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫)
            header_row = 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            price_col_idx = None
            article_col_idx = None

            for col_idx in range(1, worksheet.max_column + 1):
                cell_value = worksheet.cell(row=header_row, column=col_idx).value
                if cell_value:
                    cell_value_str = str(cell_value).strip()
                    # –†–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫
                    if cell_value_str.lower() == price_column_name.lower():
                        price_col_idx = col_idx
                    elif cell_value_str.lower() == article_column_name.lower():
                        article_col_idx = col_idx

            if not price_col_idx or not article_col_idx:
                self.log_error(
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –≤ Excel: {price_column_name}, {article_column_name}"
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                available_columns = []
                for col_idx in range(1, worksheet.max_column + 1):
                    cell_value = worksheet.cell(row=header_row, column=col_idx).value
                    if cell_value:
                        available_columns.append(str(cell_value).strip())
                self.log_error(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {available_columns[:10]}...")
                return False

            self.log_info(
                f"üìç –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {article_column_name} (col {article_col_idx}), {price_column_name} (col {price_col_idx})"
            )

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
            self.log_info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ ({article_column_name}):")
            for row_idx in range(2, min(7, worksheet.max_row + 1)):
                cell_value = worksheet.cell(row=row_idx, column=article_col_idx).value
                self.log_info(
                    f"   –°—Ç—Ä–æ–∫–∞ {row_idx}: {cell_value} (—Ç–∏–ø: {type(cell_value)})"
                )

            self.log_info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–∞ —Ü–µ–Ω ({price_column_name}):")
            for row_idx in range(2, min(7, worksheet.max_row + 1)):
                cell_value = worksheet.cell(row=row_idx, column=price_col_idx).value
                self.log_info(
                    f"   –°—Ç—Ä–æ–∫–∞ {row_idx}: {cell_value} (—Ç–∏–ø: {type(cell_value)})"
                )

            # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            updates_applied = 0

            self.log_info(
                f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(price_updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω..."
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for i, update in enumerate(price_updates[:5]):
                self.log_info(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {i+1}: {update}")

            for update in price_updates:
                article_to_find = str(update.get("article", "")).strip()
                new_price_raw = update.get("new_price", 0)

                # –ü—Ä–∏–≤–æ–¥–∏–º —Ü–µ–Ω—É –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö
                try:
                    new_price = (
                        float(new_price_raw) if new_price_raw is not None else 0.0
                    )
                except (ValueError, TypeError):
                    new_price = 0.0

                self.log_info(
                    f"üîç Excel –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {article_to_find} ‚Üí {new_price} (raw: {new_price_raw})"
                )

                if not article_to_find or new_price <= 0:
                    self.log_info(
                        f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {article_to_find}: –∞—Ä—Ç–∏–∫—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ü–µ–Ω–∞ <= 0"
                    )
                    continue

                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
                found_match = False
                for row_idx in range(2, worksheet.max_row + 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                    cell_value = worksheet.cell(
                        row=row_idx, column=article_col_idx
                    ).value

                    if cell_value is not None:
                        if supplier_config == "vitya":
                            # –î–ª—è –í–∏—Ç–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ int
                            try:
                                cell_value_int = (
                                    int(float(cell_value))
                                    if isinstance(cell_value, (int, float))
                                    else None
                                )
                                article_to_find_int = (
                                    int(float(article_to_find))
                                    if article_to_find
                                    else None
                                )

                                if (
                                    cell_value_int is not None
                                    and article_to_find_int is not None
                                    and cell_value_int == article_to_find_int
                                ):
                                    found_match = True
                                    self.log_info(
                                        f"   üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –í–∏—Ç–∏: {cell_value} == {article_to_find}"
                                    )
                                else:
                                    found_match = False
                            except (ValueError, TypeError) as e:
                                found_match = False
                                self.log_info(
                                    f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –í–∏—Ç–∏: {cell_value} vs {article_to_find} - {e}"
                                )
                        else:
                            # –î–ª—è –î–∏–º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                            cell_value_str = str(cell_value).strip()
                            article_to_find_str = article_to_find.strip()
                            found_match = cell_value_str == article_to_find_str
                            if found_match:
                                self.log_info(
                                    f"   üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –î–∏–º—ã: '{cell_value_str}' == '{article_to_find_str}'"
                                )

                        if found_match:
                            # –û–ë–ù–û–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –ó–ù–ê–ß–ï–ù–ò–ï –Ø–ß–ï–ô–ö–ò (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è!)
                            old_value = worksheet.cell(
                                row=row_idx, column=price_col_idx
                            ).value

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ü–µ–Ω—É
                            try:
                                old_value_float = (
                                    float(old_value) if old_value is not None else 0.0
                                )
                            except (ValueError, TypeError):
                                old_value_float = 0.0

                            price_diff = abs(new_price - old_value_float)
                            prices_equal = price_diff < 0.001

                            self.log_info(
                                f"üîç Excel: {article_to_find}: old_value={old_value} ({type(old_value)}), new_price={new_price} ({type(new_price)}), diff={price_diff:.6f}, equal={prices_equal}"
                            )

                            if not prices_equal:
                                worksheet.cell(
                                    row=row_idx, column=price_col_idx, value=new_price
                                )
                                updates_applied += 1

                                self.log_info(
                                    f"   ‚úÖ {article_to_find}: {old_value} ‚Üí {new_price}"
                                )
                            else:
                                self.log_info(
                                    f"   ‚è≠Ô∏è {article_to_find}: —Ü–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                                )
                            break

                if not found_match:
                    self.log_info(
                        f"   ‚ùå –ê—Ä—Ç–∏–∫—É–ª {article_to_find} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel —Ñ–∞–π–ª–µ"
                    )

            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
            self.log_info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª: {original_path}")
            try:
                workbook.save(original_path)
                workbook.close()
                self.log_info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {original_path}")
            except Exception as e:
                self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                return False

            self.log_info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {updates_applied} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω")
            self.log_info(
                f"üé® –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –í–°–Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫, —Ü–≤–µ—Ç–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç.–¥."
            )

            return True

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
            return False

    def update_excel_articles_preserve_formatting(self, file_path, changes_log):
        """
        –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            changes_log: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        """
        try:
            from openpyxl import load_workbook

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
            workbook = load_workbook(file_path)
            worksheet = workbook.active

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
            headers = {}
            for col in range(1, worksheet.max_column + 1):
                cell_value = worksheet.cell(row=1, column=col).value
                if cell_value:
                    headers[str(cell_value).lower().strip()] = col

            changes_made = 0

            for change in changes_log:
                if change["type"] == "article_added":
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ Excel (base_index + 2, —Ç.–∫. DataFrame index –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0, –∞ Excel —Å 1, –ø–ª—é—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                        excel_row = change["base_index"] + 2

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∑–∞–ø–∏—Å–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        original_column_name = change[
                            "column"
                        ]  # –≠—Ç–æ —É–∂–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

                        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫)
                        excel_col = None
                        original_column_name_lower = (
                            original_column_name.lower().strip()
                        )
                        for header_name, col_num in headers.items():
                            if header_name == original_column_name_lower:
                                excel_col = col_num
                                break

                        if excel_col is not None:

                            # –ü–æ–ª—É—á–∞–µ–º pandas –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è Excel
                            pandas_column_name = (
                                self.get_pandas_column_name_from_excel_name(
                                    change["column"]
                                )
                            )

                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É
                            data_type = self.get_column_data_type(pandas_column_name)

                            if data_type == "int":
                                value = int(change["new_value"])
                            elif data_type == "float":
                                value = float(change["new_value"])
                            else:
                                value = change["new_value"]

                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —è—á–µ–π–∫—É
                            cell = worksheet.cell(row=excel_row, column=excel_col)
                            old_value = cell.value
                            cell.value = value

                            changes_made += 1
                            self.log_info(
                                f"üìù Excel: —Å—Ç—Ä–æ–∫–∞ {excel_row}, —Å—Ç–æ–ª–±–µ—Ü '{original_column_name}' (pandas: '{pandas_column_name}'): '{old_value}' ‚Üí '{value}' (—Ç–∏–ø: {data_type})"
                            )
                        else:
                            available_columns = list(headers.keys())
                            self.log_error(
                                f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{original_column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel —Ñ–∞–π–ª–µ"
                            )
                            self.log_error(
                                f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {available_columns[:10]}..."
                            )  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10

                    except Exception as e:
                        self.log_error(
                            f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ {change.get('base_index', 'N/A')}: {e}"
                        )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if changes_made > 0:
                workbook.save(file_path)
                self.log_info(
                    f"üíæ –í–Ω–µ—Å–µ–Ω–æ {changes_made} –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Excel —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
            else:
                self.log_info("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Excel")

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—á–µ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            self.base_df.to_excel(file_path, index=False, engine="openpyxl")
            self.log_info("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pandas")

    def insert_empty_rows_in_excel(self, file_path, row_numbers):
        """
        –í—Å—Ç–∞–≤–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ Excel —Ñ–∞–π–ª –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫

        Args:
            file_path: –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
            row_numbers: –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ (–Ω–∞—á–∏–Ω–∞—è —Å 1), –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        """
        try:
            from openpyxl import load_workbook
            import os

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if not os.access(file_path, os.R_OK | os.W_OK):
                raise PermissionError(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {file_path}")

            self.log_info(f"üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª: {os.path.basename(file_path)}")
            self.log_info(f"üìä –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {row_numbers}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
            workbook = load_workbook(file_path)
            worksheet = workbook.active

            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            max_row = worksheet.max_row
            self.log_info(f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ: {max_row}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
            valid_row_numbers = []
            for row_num in row_numbers:
                if isinstance(row_num, str):
                    try:
                        row_num = int(row_num)
                    except ValueError:
                        self.log_error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: {row_num}")
                        continue

                if 1 <= row_num <= max_row:
                    valid_row_numbers.append(row_num)
                else:
                    self.log_error(
                        f"‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ {row_num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [1, {max_row}]"
                    )

            if not valid_row_numbers:
                self.log_error("‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")
                workbook.close()
                return 0

            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            unique_rows = list(set(valid_row_numbers))
            sorted_rows = sorted(unique_rows, reverse=True)

            self.log_info(f"üìù –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {sorted_rows}")

            rows_inserted = 0

            for i, row_num in enumerate(sorted_rows, 1):
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
                    self.set_status(
                        f"üìù –í—Å—Ç–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ {i}/{len(sorted_rows)}: –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ {row_num}...",
                        "loading",
                    )

                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    # openpyxl –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
                    worksheet.insert_rows(row_num + 1)

                    self.log_info(
                        f"üìù Excel: –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ {row_num}"
                    )
                    rows_inserted += 1

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å—Ç—Ä–æ–∫
                    if i % 5 == 0 or i == len(sorted_rows):
                        progress_percent = int((i / len(sorted_rows)) * 100)
                        self.update_progress(
                            7,
                            f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ {i}/{len(sorted_rows)} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ ({progress_percent}%)",
                        )
                        self.root.update()

                except Exception as e:
                    self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ {row_num}: {e}")
                    continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if rows_inserted > 0:
                try:
                    workbook.save(file_path)
                    self.log_info(
                        f"üíæ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {rows_inserted} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ Excel —Ñ–∞–π–ª"
                    )
                except Exception as save_error:
                    self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {save_error}")
                    raise
            else:
                self.log_info("‚ÑπÔ∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏")

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º workbook
            workbook.close()

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ Excel: {e}")
            raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è main —Ñ—É–Ω–∫—Ü–∏–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ MiStockSync GUI...")
    print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

    root = tk.Tk()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        from PIL import Image, ImageTk

        icon = ImageTk.PhotoImage(Image.open("assets/icon.png"))
        root.iconphoto(False, icon)
        print("‚úÖ –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    root.title("üöÄ MiStockSync - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å–∞–º–∏")

    app = MiStockSyncApp(root)

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    root.update_idletasks()
    current_width = root.winfo_width()
    current_height = root.winfo_height()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Ä–∞–∑–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (
        current_width == 1000
        and current_height == 800
        and app.settings.get("main_window_width", 1000) == 1000
        and app.settings.get("main_window_height", 800) == 800
    ):
        # –†–∞–∑–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        x = (root.winfo_screenwidth() // 2) - (current_width // 2)
        y = (root.winfo_screenheight() // 2) - (current_height // 2)
        root.geometry(f"{current_width}x{current_height}+{x}+{y}")
        app.log_info("üéØ –û–∫–Ω–æ –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    else:
        # –†–∞–∑–º–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–∏–º —Ä–∞–∑–º–µ—Ä–∞–º
        x = (root.winfo_screenwidth() // 2) - (current_width // 2)
        y = (root.winfo_screenheight() // 2) - (current_height // 2)
        root.geometry(f"+{x}+{y}")  # –¢–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏—è, —Ä–∞–∑–º–µ—Ä —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        app.log_info(
            f"üìê –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {current_width}x{current_height}"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    def on_closing():
        app.quit_application()

    root.protocol("WM_DELETE_WINDOW", on_closing)

    app.logger.info("üñ•Ô∏è GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")

    root.mainloop()


if __name__ == "__main__":
    main()
