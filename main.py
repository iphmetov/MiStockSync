"""
MiStockSync - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–π—Å–æ–≤
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import sys
import os
import pandas as pd
from datetime import datetime
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é excel_loader
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "excel_loader"))

try:
    from excel_loader.loader import (
        select_and_load_excel,
        get_available_configs,
        load_largest_file,
    )
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ excel_loader: {e}")
    sys.exit(1)


# –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò –î–ê–ù–ù–´–•
# ================================

# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –í–∏—Ç–∏
VITYA_BALANCE_AVAILABLE = "–ò–º–µ—é—Ç—Å—è –≤ –Ω–∞–ª."

# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –î–∏–º—ã
DIMI_BALANCE_EXPECTED = "–û–∂–∏–¥–∞–µ—Ç—Å—è"

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º 0 –∏ NaN)
MIN_PRICE_THRESHOLD = 0.01


class MiStockSyncApp:
    def __init__(self, root):
        self.root = root
        self.root.title("MiStockSync - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å–∞–º–∏")
        self.root.geometry("800x600")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()

        # –î–∞–Ω–Ω—ã–µ
        self.current_df = None
        self.current_config = None
        self.base_df = None
        self.auto_load_base = tk.BooleanVar(value=True)  # –ß–µ–∫–±–æ–∫—Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã
        self.comparison_result = None  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
        self.load_available_configs()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.logger = logging.getLogger("MiStockSync")
        self.logger.setLevel(logging.INFO)

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)

        # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        console_handler.setFormatter(formatter)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.logger.addHandler(console_handler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logs_dir = "logs"
        if not os.path.exists(logs_dir):
            os.makedirs(logs_dir)

        log_file = os.path.join(
            logs_dir, f"mistocksync_{datetime.now().strftime('%Y%m%d')}.log"
        )
        file_handler = logging.FileHandler(log_file, encoding="utf-8")
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)

        self.logger.info("üöÄ MiStockSync –∑–∞–ø—É—â–µ–Ω")
        self.logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="MiStockSync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–π—Å–æ–≤",
            font=("Arial", 16, "bold"),
        )
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))

        # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_frame = ttk.LabelFrame(main_frame, text="–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", padding="10")
        config_frame.grid(
            row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10)
        )
        config_frame.columnconfigure(1, weight=1)

        ttk.Label(config_frame, text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:").grid(
            row=0, column=0, sticky=tk.W, padx=(0, 10)
        )

        self.config_var = tk.StringVar()
        self.config_combo = ttk.Combobox(
            config_frame, textvariable=self.config_var, state="readonly"
        )
        self.config_combo.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        buttons_frame = ttk.Frame(config_frame)
        buttons_frame.grid(row=0, column=2, sticky=tk.E)

        ttk.Button(
            buttons_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=self.select_file
        ).grid(row=0, column=0, padx=(0, 5))

        # –ù–û–í–´–ô –ß–ï–ö–ë–û–ö–° –í–ú–ï–°–¢–û –ö–ù–û–ü–ö–ò
        ttk.Checkbutton(
            buttons_frame, text="üìä –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∞–≤—Ç–æ", variable=self.auto_load_base
        ).grid(row=0, column=1, sticky=tk.W)

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ", padding="10")
        info_frame.grid(
            row=2, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10)
        )
        info_frame.columnconfigure(0, weight=1)
        info_frame.rowconfigure(0, weight=1)

        self.info_text = scrolledtext.ScrolledText(info_frame, width=80, height=15)
        self.info_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = ttk.Frame(main_frame)
        action_frame.grid(
            row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0)
        )

        ttk.Button(action_frame, text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_info).grid(
            row=0, column=0, sticky=tk.W
        )
        ttk.Button(
            action_frame, text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.show_data_sample
        ).grid(row=0, column=1, padx=(10, 0))
        ttk.Button(
            action_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π", command=self.save_data
        ).grid(row=0, column=2, padx=(10, 0))
        ttk.Button(
            action_frame, text="üîç –°—Ä–∞–≤–Ω–∏—Ç—å —Å –±–∞–∑–æ–π", command=self.compare_with_base
        ).grid(row=0, column=3, padx=(10, 0))

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.report_button = ttk.Button(
            action_frame,
            text="üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
            command=self.save_report,
            state="disabled",
        )
        self.report_button.grid(row=0, column=4, padx=(10, 0))

        self.add_to_base_button = ttk.Button(
            action_frame, text="üì• –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É", command=self.add_to_base
        )
        self.add_to_base_button.grid(row=0, column=5, padx=(10, 0))

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(
            main_frame, textvariable=self.status_var, relief=tk.SUNKEN, anchor=tk.W
        )
        status_bar.grid(
            row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0)
        )

    def load_available_configs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        self.log_info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
        try:
            configs = get_available_configs()
            self.config_combo["values"] = configs

            # –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "auto" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if "auto" in configs:
                self.config_combo.set("auto")
            elif configs:
                self.config_combo.set(configs[0])

            self.log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(configs)}")
            self.log_info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏: {', '.join(configs)}")
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")

    def select_file(self):
        """–í—ã–±–æ—Ä –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        self.log_info("üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/input –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        input_dir = "data/input"
        if not os.path.exists(input_dir):
            os.makedirs(input_dir)
            self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {input_dir}")

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        from tkinter import filedialog

        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")],
            initialdir=input_dir,
        )

        if not file_path:
            self.log_info("‚ÑπÔ∏è –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω")
            return

        self.log_info(f"üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")

        # –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        if self.config_var.get() == "auto":
            detected_config = self.auto_select_config(file_path)
            config_name = detected_config
        else:
            config_name = self.config_var.get()

        if not config_name:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            )
            return

        try:
            self.status_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...")
            self.root.update()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º
            from excel_loader.loader import load_with_config

            df = load_with_config(file_path, config_name)

            if df is not None:
                self.current_df = df
                self.current_config = config_name
                self.show_file_info(df, config_name)
                self.status_var.set("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ "auto" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
                if "auto" in self.config_combo["values"]:
                    self.config_combo.set("auto")
                    self.log_info(
                        "üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ 'auto' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"
                    )
            else:
                self.status_var.set("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            self.status_var.set("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

    def load_largest(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞"""

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
        data_dir = "data/input"

        try:
            self.status_var.set("–ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞...")
            self.root.update()

            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
            excel_files = []
            for file in os.listdir(data_dir):
                if file.endswith((".xlsx", ".xls")):
                    file_path = os.path.join(data_dir, file)
                    file_size = os.path.getsize(file_path)
                    excel_files.append((file_path, file_size))

            if not excel_files:
                self.status_var.set("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            largest_file_path = max(excel_files, key=lambda x: x[1])[0]

            # –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
            if self.config_var.get() == "auto":
                detected_config = self.auto_select_config(largest_file_path)
                config_name = detected_config
            else:
                config_name = self.config_var.get()

            from excel_loader.loader import load_with_config

            df = load_with_config(largest_file_path, config_name)

            if df is not None:
                self.current_df = df
                self.current_config = config_name
                self.show_file_info(df, config_name)
                self.status_var.set("–°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
            else:
                self.status_var.set("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            self.status_var.set("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

    def show_file_info(self, df, config_name):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
        self.log_info(f"üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ (–∫–æ–Ω—Ñ–∏–≥: {config_name})")
        self.clear_info()

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï\n"
        info += f"{'='*50}\n"
        info += f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}\n"
        info += f"–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        info += f"–°—Ç—Ä–æ–∫: {len(df):,}\n"
        info += f"–°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns):,}\n"
        info += f"–†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏: {df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
        info += f"üìã –°–¢–û–õ–ë–¶–´ ({len(df.columns)}):\n"
        info += f"{'-'*30}\n"
        for i, col in enumerate(df.columns, 1):
            info += f"{i:2d}. {col}\n"

        # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        info += f"\nüìä –¢–ò–ü–´ –î–ê–ù–ù–´–•:\n"
        info += f"{'-'*30}\n"
        for col in df.columns:
            non_null = df[col].notna().sum()
            info += f"{col}: {str(df[col].dtype)} ({non_null:,} –Ω–µ –ø—É—Å—Ç—ã—Ö)\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        info += f"\n‚ùå –ü–£–°–¢–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:\n"
        info += f"{'-'*30}\n"
        null_counts = df.isnull().sum()
        for col in df.columns:
            if null_counts[col] > 0:
                info += f"{col}: {null_counts[col]:,} –ø—É—Å—Ç—ã—Ö\n"

        if null_counts.sum() == 0:
            info += "–ü—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç! ‚úÖ\n"

        self.info_text.insert(tk.END, info)
        self.log_info(
            f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤, {df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB"
        )

    def show_data_sample(self):
        """–ü–æ–∫–∞–∑ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_df is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
            return

        self.clear_info()

        df = self.current_df

        info = f"üìã –û–ë–†–ê–ó–ï–¶ –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫)\n"
        info += f"{'='*80}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        sample_df = df.head(10)
        info += sample_df.to_string(max_cols=10, max_colwidth=20) + "\n\n"

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        important_cols = [
            "article",
            "name",
            "price",
            "article_vitya",
            "price_usd",
            "price_rub",
        ]
        existing_cols = [col for col in important_cols if col in df.columns]

        if existing_cols:
            info += f"üìä –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø (—Ç–æ–ø-10):\n"
            info += f"{'-'*50}\n"
            for col in existing_cols[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                unique_vals = df[col].value_counts().head(10)
                info += f"\n{col.upper()}:\n"
                for val, count in unique_vals.items():
                    info += f"  {val}: {count:,}\n"

        self.info_text.insert(tk.END, info)

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log_info("üíæ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        if self.current_df is None:
            self.log_error("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
            return

        from tkinter import filedialog

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_dir = "data/output"
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")

        self.log_info(f"üìÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ: {output_dir}")

        file_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[
                ("Excel files", "*.xlsx"),
                ("CSV files", "*.csv"),
                ("All files", "*.*"),
            ],
            initialdir=output_dir,
        )

        if file_path:
            try:
                self.status_var.set("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
                self.root.update()

                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                processed_df = self.preprocess_supplier_data(
                    self.current_df, self.current_config
                )

                if file_path.endswith(".xlsx"):
                    processed_df.to_excel(file_path, index=False)
                elif file_path.endswith(".csv"):
                    processed_df.to_csv(file_path, index=False, encoding="utf-8")

                self.log_info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {file_path}")
                self.log_info(
                    f"–ò—Å—Ö–æ–¥–Ω–æ: {len(self.current_df)} —Å—Ç—Ä–æ–∫ ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_df)} —Å—Ç—Ä–æ–∫"
                )
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}"
                )
                self.status_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

            except Exception as e:
                self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
                self.status_var.set("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

    def compare_with_base(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.log_info("üîç –ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")

        if self.current_df is None:
            self.log_error("–§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
            )
            return

        # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã (–∫–∞–∫ –æ–ø–∏—Å–∞–Ω–æ –≤—ã—à–µ)
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–±–æ–∫—Å
        if self.auto_load_base.get():
            self.status_var.set("–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            self.root.update()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            if self.base_df is None:
                data_dir = "data/input"

                self.base_df = load_largest_file(data_dir, "base")
                if self.base_df is None:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    return

                self.log_info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            # –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤—ã–∫–ª—é—á–µ–Ω, –±–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
            if self.base_df is None:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
                )
                return

        # –ù–û–í–û–ï: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        self.status_var.set("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...")
        self.root.update()

        processed_supplier_df = self.preprocess_supplier_data(
            self.current_df, self.current_config
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.status_var.set("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π...")
        self.root.update()

        comparison_result = self.perform_comparison(processed_supplier_df, self.base_df)
        self.show_comparison_result(comparison_result)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç–∞
        self.comparison_result = comparison_result

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if "error" in comparison_result:
            self.log_error(
                f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {comparison_result['error']}"
            )
            self.log_info("‚ùå –ö–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç' –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
        else:
            self.log_info("üîò –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç'...")
            self.report_button.config(state="normal")
            self.log_info("‚úÖ –ö–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

        self.status_var.set("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def perform_comparison(self, supplier_df, base_df):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if self.current_config == "vitya":
            supplier_article_col = "article_vitya"
            base_article_col = "article_vitya"
            supplier_price_col = "price_usd"
            base_price_col = "price_vitya_usd"
        elif self.current_config == "dimi":
            supplier_article_col = "article_dimi"
            base_article_col = "article_dimi"
            supplier_price_col = "price_usd"
            base_price_col = "price_dimi_usd"
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
            supplier_article_col = "article"
            base_article_col = "article"
            supplier_price_col = "price"
            base_price_col = "price"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if supplier_article_col not in supplier_df.columns:
            return {
                "error": f"–°—Ç–æ–ª–±–µ—Ü {supplier_article_col} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
            }

        if base_article_col not in base_df.columns:
            return {"error": f"–°—Ç–æ–ª–±–µ—Ü {base_article_col} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"}

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç NaN –∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        supplier_clean = supplier_df.dropna(
            subset=[supplier_article_col, supplier_price_col]
        )
        base_clean = base_df.dropna(subset=[base_article_col])

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        supplier_dict = {}
        for _, row in supplier_clean.iterrows():
            article_value = row[supplier_article_col]
            # –î–ª—è article_vitya –∏—Å–ø–æ–ª—å–∑—É–µ–º int –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –¥–ª—è –¥—Ä—É–≥–∏—Ö - —Å—Ç—Ä–æ–∫—É
            if self.current_config == "vitya" and isinstance(article_value, int):
                article = str(article_value)
            else:
                article = str(article_value).strip()

            if article and article != "nan" and article != "None":
                supplier_dict[article] = {
                    "price": (
                        row[supplier_price_col]
                        if pd.notna(row[supplier_price_col])
                        else 0
                    ),
                    "name": row.get("name", ""),
                    "index": row.name,
                }

        base_dict = {}
        for _, row in base_clean.iterrows():
            article_value = row[base_article_col]
            # –î–ª—è article_vitya –∏—Å–ø–æ–ª—å–∑—É–µ–º int –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –¥–ª—è –¥—Ä—É–≥–∏—Ö - —Å—Ç—Ä–æ–∫—É
            if self.current_config == "vitya" and isinstance(article_value, int):
                article = str(article_value)
            else:
                article = str(article_value).strip()

            if article and article != "nan" and article != "None":
                base_dict[article] = {
                    "price": (
                        row[base_price_col] if pd.notna(row[base_price_col]) else 0
                    ),
                    "name": row.get("name", ""),
                    "index": row.name,
                }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        matches = []
        price_changes = []
        new_items = []

        for article, supplier_data in supplier_dict.items():
            if article in base_dict:
                base_data = base_dict[article]
                match_info = {
                    "article": article,
                    "supplier_price": supplier_data["price"],
                    "base_price": base_data["price"],
                    "name": supplier_data["name"] or base_data["name"],
                    "price_diff": supplier_data["price"] - base_data["price"],
                    "price_change_percent": 0,
                }

                if base_data["price"] > 0:
                    match_info["price_change_percent"] = (
                        (supplier_data["price"] - base_data["price"])
                        / base_data["price"]
                        * 100
                    )

                matches.append(match_info)

                # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–±–æ–ª—å—à–µ 5%)
                if abs(match_info["price_change_percent"]) > 5:
                    price_changes.append(match_info)
            else:
                new_items.append(
                    {
                        "article": article,
                        "price": supplier_data["price"],
                        "name": supplier_data["name"],
                    }
                )

        # –ù–û–í–û–ï: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö, –µ—Å–ª–∏ –º–∞–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        code_matches = []
        if len(matches) < len(supplier_dict) * 0.3:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 30% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            self.log_info(
                "üîç –ú–∞–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º..."
            )
            code_matches = self.compare_by_product_code(
                supplier_df, base_df, self.current_config
            )

        return {
            "supplier_total": len(supplier_dict),
            "base_total": len(base_dict),
            "matches": matches,
            "price_changes": price_changes,
            "new_items": new_items,
            "code_matches": code_matches,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "match_rate": (
                len(matches) / len(supplier_dict) * 100 if supplier_dict else 0
            ),
        }

    def show_comparison_result(self, result):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if "error" in result:
            messagebox.showerror("–û—à–∏–±–∫–∞", result["error"])
            return

        self.clear_info()

        info = f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•\n"
        info += f"{'='*60}\n"
        info += f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.current_config}\n"
        info += f"–î–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        info += f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        info += f"{'-'*40}\n"
        info += f"–¢–æ–≤–∞—Ä–æ–≤ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {result['supplier_total']:,}\n"
        info += f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {result['base_total']:,}\n"
        info += f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(result['matches']):,}\n"
        info += f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['match_rate']:.1f}%\n\n"

        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        if result["price_changes"]:
            info += f"üí∞ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù (>5%):\n"
            info += f"{'-'*50}\n"
            for i, item in enumerate(result["price_changes"][:10], 1):
                change_sign = "üìà" if item["price_diff"] > 0 else "üìâ"
                info += f"{i:2d}. {item['article']}: {item['base_price']:.2f} ‚Üí {item['supplier_price']:.2f} "
                info += f"({item['price_change_percent']:+.1f}%) {change_sign}\n"
            if len(result["price_changes"]) > 10:
                info += f"... –∏ –µ—â–µ {len(result['price_changes']) - 10} –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        else:
            info += f"üí∞ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚úÖ\n"

        info += "\n"

        # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        if result["new_items"]:
            info += f"üÜï –ù–û–í–´–ï –¢–û–í–ê–†–´ –£ –ü–û–°–¢–ê–í–©–ò–ö–ê:\n"
            info += f"{'-'*40}\n"
            for i, item in enumerate(result["new_items"][:10], 1):
                info += f"{i:2d}. {item['article']}: {item['price']:.2f} - {item['name'][:30]}\n"
            if len(result["new_items"]) > 10:
                info += f"... –∏ –µ—â–µ {len(result['new_items']) - 10} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        else:
            info += f"üÜï –ù–û–í–´–ï –¢–û–í–ê–†–´: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n"

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥–∞–º
        if result.get("code_matches"):
            info += f"\nüîç –°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–û –ö–û–î–ê–ú –í –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–Ø–•:\n"
            info += f"{'-'*50}\n"
            for i, match in enumerate(result["code_matches"][:10], 1):
                info += f"{i:2d}. –ö–æ–¥: {match['code']}\n"
                info += f"    –ü–æ—Å—Ç–∞–≤—â–∏–∫: {match['supplier_name'][:40]}...\n"
                info += f"    –ë–∞–∑–∞: {match['base_name'][:40]}...\n"
                info += f"    –¶–µ–Ω—ã: {match['supplier_price']:.2f} ‚Üî {match['base_price']:.2f}\n\n"
            if len(result["code_matches"]) > 10:
                info += f"... –∏ –µ—â–µ {len(result['code_matches']) - 10} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º\n"

        info += f"\nüéâ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"

        self.info_text.insert(tk.END, info)
        self.log_info(
            f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(result['matches'])} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ {result['supplier_total']} —Ç–æ–≤–∞—Ä–æ–≤"
        )

    def clean_invisible_chars(self, text):
        """–£–±–∏—Ä–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if pd.isna(text):
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        text_str = str(text).strip()

        # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        # import unicodedata
        # cleaned = "".join(
        #     char
        #     for char in text_str
        #     if unicodedata.category(char)[0]
        #     in ("L", "N", "P", "S", "M")  # –ë—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏, —Å–∏–º–≤–æ–ª—ã, –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏
        #     or char in (" ", "\t", "\n")  # –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        #     or unicodedata.category(char) == "Zs"  # –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã (Space separators)
        # )
        # cleaned = " ".join(cleaned.split())

        # –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = " ".join(text_str.split())

        return cleaned if cleaned else None

    def clean_article_vitya_simple(self, article):
        """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –í–∏—Ç–∏ - —É–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–µ—Ñ–∏–∫—Å '000, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í–°–ï–ì–î–ê int"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏–ª–∏ None
        if pd.isna(article) or article is None:
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        cleaned = str(article).strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∞—Å—å –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ 'nan'
        if not cleaned or cleaned.lower() == "nan":
            return None

        # 1. –£–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
        cleaned = cleaned.replace("'", "")

        # 2. –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '000 –µ—Å–ª–∏ –µ—Å—Ç—å
        if cleaned.startswith("000"):
            cleaned = cleaned[3:]

        # 3. –í–°–ï–ì–î–ê –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        if cleaned.isdigit():
            return int(cleaned) if cleaned else 0
        elif cleaned == "":
            return 0
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            import re

            digits = re.findall(r"\d+", cleaned)
            if digits:
                return int("".join(digits))
            else:
                return 0

    def filter_by_price(self, df, price_column="price_usd"):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ price_usd —è–≤–ª—è–µ—Ç—Å—è NaN, –ø—É—Å—Ç–æ–π –∏–ª–∏ <= 0

        Args:
            df: DataFrame –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            price_column: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ü–µ–Ω–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'price_usd')

        Returns:
            DataFrame —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if price_column not in df.columns:
            self.log_info(
                f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{price_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )
            return df

        initial_count = len(df)

        # –§–∏–ª—å—Ç—Ä—É–µ–º: —É–±–∏—Ä–∞–µ–º NaN, –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ü–µ–Ω—ã <= MIN_PRICE_THRESHOLD
        filtered_df = df[
            (df[price_column].notna()) & (df[price_column] > MIN_PRICE_THRESHOLD)
        ].copy()

        final_count = len(filtered_df)
        removed_count = initial_count - final_count

        if removed_count > 0:
            self.log_info(f"üí∞ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ ({price_column}):")
            self.log_info(f"   –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {removed_count}")
            self.log_info(f"   –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {final_count}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            nan_count = df[price_column].isna().sum()
            zero_count = (df[price_column] == 0).sum()
            low_price_count = (
                (df[price_column] > 0) & (df[price_column] <= MIN_PRICE_THRESHOLD)
            ).sum()

            self.log_info(f"   üìä –ü—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è:")
            if nan_count > 0:
                self.log_info(f"      NaN/–ø—É—Å—Ç—ã–µ: {nan_count}")
            if zero_count > 0:
                self.log_info(f"      –ù—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã: {zero_count}")
            if low_price_count > 0:
                self.log_info(
                    f"      –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–µ (<={MIN_PRICE_THRESHOLD}): {low_price_count}"
                )
        else:
            self.log_info(
                f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ: –≤—Å–µ {final_count} —Å—Ç—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä"
            )

        return filtered_df

    def preprocess_vitya_fixed_v3(self, df):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –í–∏—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ü–µ–Ω–µ –∏ –±–∞–ª–∞–Ω—Å—É"""
        self.log_info("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –í–∏—Ç—è...")

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        processed_df = df.copy()
        initial_count = len(processed_df)

        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN, –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        self.log_info("üí∞ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ...")
        processed_df = self.filter_by_price(processed_df, "price_usd")

        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏
        if "balance" in processed_df.columns:
            self.log_info(
                f"üì¶ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ '{VITYA_BALANCE_AVAILABLE}')..."
            )

            balance_before = len(processed_df)
            processed_df = processed_df[
                processed_df["balance"] == VITYA_BALANCE_AVAILABLE
            ].copy()
            balance_after = len(processed_df)

            removed_balance = balance_before - balance_after
            if removed_balance > 0:
                self.log_info(f"   üì¶ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ –±–µ–∑ –Ω–∞–ª–∏—á–∏—è: {removed_balance}")
                self.log_info(f"   üì¶ –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫ –≤ –Ω–∞–ª–∏—á–∏–∏: {balance_after}")
            else:
                self.log_info(f"   üì¶ –í—Å–µ {balance_after} —Å—Ç—Ä–æ–∫ –∏–º–µ—é—Ç —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏")
        else:
            self.log_info(
                "‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü 'balance' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )

        # 3. –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        if "article_vitya" in processed_df.columns:
            self.log_info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –í–∏—Ç—è...")

            processed_df["article_vitya"] = processed_df["article_vitya"].apply(
                self.clean_article_vitya_simple
            )

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        processed_df["supplier_name"] = "–í–∏—Ç—è"

        # 5. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if "article_vitya" in processed_df.columns:
            valid_articles = processed_df["article_vitya"].notna().sum()
            self.log_info(f"üî¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –í–∏—Ç—è: {valid_articles}")
            if valid_articles > 0:
                sample_articles = (
                    processed_df["article_vitya"].dropna().head(5).tolist()
                )
                self.log_info(f"üìù –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {sample_articles}")

        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_count = len(processed_df)
        total_removed = initial_count - final_count

        self.log_info(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –í–∏—Ç—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        self.log_info(f"   üìä –ò—Å—Ö–æ–¥–Ω–æ: {initial_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –ò—Ç–æ–≥–æ: {final_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –£–¥–∞–ª–µ–Ω–æ: {total_removed} —Å—Ç—Ä–æ–∫")

        return processed_df

    def preprocess_dimi_fixed(self, df):
        """–£–ü–†–û–©–ï–ù–ù–ê–Ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –î–∏–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        self.log_info("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –î–∏–º–∞...")

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        processed_df = df.copy()
        initial_count = len(processed_df)

        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN, –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        self.log_info("üí∞ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ...")
        processed_df = self.filter_by_price(processed_df, "price_usd")

        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ balance –∏–ª–∏ balance1 = "–û–∂–∏–¥–∞–µ—Ç—Å—è"
        balance_columns = ["balance", "balance1"]
        found_balance_columns = [
            col for col in balance_columns if col in processed_df.columns
        ]

        if found_balance_columns:
            self.log_info(
                f"üì¶ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (—É–±–∏—Ä–∞–µ–º '{DIMI_BALANCE_EXPECTED}')..."
            )

            balance_before = len(processed_df)

            # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ: –ù–ò balance, –ù–ò balance1 –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "–û–∂–∏–¥–∞–µ—Ç—Å—è"
            for col in found_balance_columns:
                processed_df = processed_df[processed_df[col] != DIMI_BALANCE_EXPECTED]

            processed_df = processed_df.copy()
            balance_after = len(processed_df)

            removed_balance = balance_before - balance_after
            if removed_balance > 0:
                self.log_info(
                    f"   üì¶ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å '{DIMI_BALANCE_EXPECTED}': {removed_balance}"
                )
                self.log_info(f"   üì¶ –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫ –≤ –Ω–∞–ª–∏—á–∏–∏: {balance_after}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
                for col in found_balance_columns:
                    expected_count = (df[col] == DIMI_BALANCE_EXPECTED).sum()
                    if expected_count > 0:
                        self.log_info(
                            f"      {col}: {expected_count} —Å—Ç—Ä–æ–∫ —Å '{DIMI_BALANCE_EXPECTED}'"
                        )
            else:
                self.log_info(
                    f"   üì¶ –í—Å–µ {balance_after} —Å—Ç—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –±–∞–ª–∞–Ω—Å—É"
                )
        else:
            self.log_info(
                "‚ö†Ô∏è –°—Ç–æ–ª–±—Ü—ã balance/balance1 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )

        # 3. –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        if "article_dimi" in processed_df.columns:
            self.log_info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –î–∏–º–∞...")

            def clean_article_dimi_simple(article):
                """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –î–∏–º—ã - –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–µ—Ñ–∏–∫—Å '000"""
                if pd.isna(article):
                    return None

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                cleaned = str(article).strip()

                if not cleaned or cleaned.lower() == "nan":
                    return None

                # –£–±–∏—Ä–∞–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
                cleaned = cleaned.replace("'", "")

                # –î–õ–Ø –î–ò–ú–´: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '000 –µ—Å–ª–∏ –µ—Å—Ç—å
                if cleaned.startswith("000"):
                    cleaned = cleaned[3:]

                return cleaned if cleaned else None

            processed_df["article_dimi"] = processed_df["article_dimi"].apply(
                clean_article_dimi_simple
            )

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        processed_df["supplier_name"] = "–î–∏–º–∞"

        # 5. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if "article_dimi" in processed_df.columns:
            valid_articles = processed_df["article_dimi"].notna().sum()
            self.log_info(f"üî¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –î–∏–º–∞: {valid_articles}")
            if valid_articles > 0:
                sample_articles = processed_df["article_dimi"].dropna().head(5).tolist()
                self.log_info(f"üìù –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {sample_articles}")

        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_count = len(processed_df)
        total_removed = initial_count - final_count

        self.log_info(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –î–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        self.log_info(f"   üìä –ò—Å—Ö–æ–¥–Ω–æ: {initial_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –ò—Ç–æ–≥–æ: {final_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –£–¥–∞–ª–µ–Ω–æ: {total_removed} —Å—Ç—Ä–æ–∫")

        return processed_df

    def preprocess_supplier_data(self, df, config_name):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥–∞"""

        if config_name == "vitya":
            return self.preprocess_vitya_fixed_v3(df)
        elif config_name == "dimi":
            return self.preprocess_dimi_fixed(df)
        else:
            self.log_info(f"üìã –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {config_name} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return df

    def detect_config_by_filename(self, file_path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""

        filename = os.path.basename(file_path).upper()  # –ò–º—è —Ñ–∞–π–ª–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

        self.log_info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {filename}")

        # –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        if "JHT" in filename:
            detected_config = "vitya"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å –í–∏—Ç–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç JHT)")

        elif "DIMI" in filename or "DIMA" in filename:
            detected_config = "dimi"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å –î–∏–º—ã (—Å–æ–¥–µ—Ä–∂–∏—Ç DiMi/DiMa)")

        elif "BASE" in filename or "–ë–ê–ó–ê" in filename:
            detected_config = "base"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–¥–µ—Ä–∂–∏—Ç BASE/–ë–ê–ó–ê)")

        else:
            detected_config = "auto"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.log_info("‚ÑπÔ∏è –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AUTO")

        return detected_config

    def find_product_code_in_name(self, product_name):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        # –ë–û–õ–í–ê–ù–ö–ê –î–õ–Ø –ë–£–î–£–©–ï–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏

        if pd.isna(product_name) or not isinstance(product_name, str):
            return None

        import re

        # –ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤:
        patterns = [
            r"\b\d{6,}\b",  # 6+ —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
            r"[A-Z]{2,}\d{3,}",  # –ë—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã (XM123)
            r"\d{3,}[A-Z]{1,2}",  # –¶–∏—Ñ—Ä—ã + –±—É–∫–≤—ã (123XM)
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        ]

        for pattern in patterns:
            matches = re.findall(pattern, product_name.upper())
            if matches:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                return matches[0]

        return None

    def compare_by_product_code(self, supplier_df, base_df, supplier_config):
        """–ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö"""
        # –ë–û–õ–í–ê–ù–ö–ê –î–õ–Ø –ë–£–î–£–©–ï–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö

        self.log_info("üîç –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö...")

        code_matches = []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_codes = {}
        for idx, row in supplier_df.iterrows():
            if "name" in row and pd.notna(row["name"]):
                code = self.find_product_code_in_name(row["name"])
                if code:
                    supplier_codes[code] = {
                        "index": idx,
                        "name": row["name"],
                        "price": (
                            row.get("price_usd", 0)
                            if supplier_config == "vitya"
                            else row.get("price", 0)
                        ),
                    }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –±–∞–∑—ã
        base_codes = {}
        for idx, row in base_df.iterrows():
            if "name" in row and pd.notna(row["name"]):
                code = self.find_product_code_in_name(row["name"])
                if code:
                    base_codes[code] = {
                        "index": idx,
                        "name": row["name"],
                        "price": row.get("price", 0),
                    }

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for code, supplier_data in supplier_codes.items():
            if code in base_codes:
                base_data = base_codes[code]
                code_matches.append(
                    {
                        "code": code,
                        "supplier_name": supplier_data["name"],
                        "base_name": base_data["name"],
                        "supplier_price": supplier_data["price"],
                        "base_price": base_data["price"],
                    }
                )

        self.log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º: {len(code_matches)}")
        return code_matches

    def auto_select_config(self, file_path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞"""

        detected_config = self.detect_config_by_filename(file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–æ–Ω—Ñ–∏–≥ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        available_configs = self.config_combo["values"]

        if detected_config in available_configs:
            self.config_combo.set(detected_config)
            self.log_info(f"üéØ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {detected_config}")
            return detected_config
        else:
            self.log_info(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {detected_config} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π")
            return self.config_var.get()

    def clear_info(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        self.info_text.delete(1.0, tk.END)

    def log_info(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
        self.logger.info(message)

        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ GUI
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.info_text.insert(tk.END, log_message)
        self.info_text.see(tk.END)

    def log_error(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
        self.logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {message}")

        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ GUI
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] ‚ùå –û–®–ò–ë–ö–ê: {message}\n"
        self.info_text.insert(tk.END, log_message)
        self.info_text.see(tk.END)

    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤ Excel"""
        self.log_info("üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç'")

        if self.comparison_result is None:
            self.log_info("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π"
            )
            return

        self.log_info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")

        try:
            from tkinter import filedialog
            import os

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            output_dir = "data/output"
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)
                self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            default_filename = f"summary_report_{timestamp}.xlsx"
            self.log_info(f"üìÅ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {default_filename}")

            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
                initialfile=default_filename,
                initialdir=output_dir,
            )

            self.log_info(
                f"üìÅ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å: {file_path if file_path else '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}"
            )
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return

        if file_path:
            try:
                self.log_info("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
                self.status_var.set("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
                self.root.update()

                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                self.log_info("üìä –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
                summary_data = [
                    {
                        "–ü–æ—Å—Ç–∞–≤—â–∏–∫": self.current_config.upper(),
                        "–¢–æ–≤–∞—Ä–æ–≤": self.comparison_result["supplier_total"],
                        "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π": len(self.comparison_result["matches"]),
                        "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π": f"{self.comparison_result['match_rate']:.1f}%",
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω": len(self.comparison_result["price_changes"]),
                        "–ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤": len(self.comparison_result["new_items"]),
                        "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º": len(
                            self.comparison_result.get("code_matches", [])
                        ),
                    }
                ]
                self.log_info(f"‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {summary_data[0]}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
                self.log_info("üìù –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª...")
                with pd.ExcelWriter(file_path, engine="openpyxl") as writer:
                    # –õ–∏—Å—Ç —Å –æ–±—â–µ–π —Å–≤–æ–¥–∫–æ–π
                    self.log_info("üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–≤–æ–¥–∫–∞'...")
                    summary_df = pd.DataFrame(summary_data)
                    summary_df.to_excel(writer, sheet_name="–°–≤–æ–¥–∫–∞", index=False)

                    # –õ–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
                    if self.comparison_result["matches"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è' ({len(self.comparison_result['matches'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        matches_df = pd.DataFrame(self.comparison_result["matches"])
                        matches_df.to_excel(
                            writer, sheet_name="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è", index=False
                        )

                    # –õ–∏—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω
                    if self.comparison_result["price_changes"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω' ({len(self.comparison_result['price_changes'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        price_changes_df = pd.DataFrame(
                            self.comparison_result["price_changes"]
                        )
                        price_changes_df.to_excel(
                            writer, sheet_name="–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω", index=False
                        )

                    # –õ–∏—Å—Ç —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
                    if self.comparison_result["new_items"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã' ({len(self.comparison_result['new_items'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        new_items_df = pd.DataFrame(self.comparison_result["new_items"])
                        new_items_df.to_excel(
                            writer, sheet_name="–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã", index=False
                        )

                    # –õ–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ –ø–æ –∫–æ–¥–∞–º
                    if self.comparison_result.get("code_matches"):
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º' ({len(self.comparison_result['code_matches'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        code_matches_df = pd.DataFrame(
                            self.comparison_result["code_matches"]
                        )
                        code_matches_df.to_excel(
                            writer, sheet_name="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º", index=False
                        )

                self.log_info("‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

                self.log_info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                self.log_info(f"   –õ–∏—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(summary_data)} + –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
                self.status_var.set("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

            except Exception as e:
                self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
                self.status_var.set("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        else:
            self.log_info("‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def add_to_base(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
        self.log_info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        self.log_info("üìã –°–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É!")
        self.log_info("üöÄ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:")
        self.log_info("   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø—Ä–∞–π—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        self.log_info("   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        self.log_info("   - –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        self.log_info("   - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")

        messagebox.showinfo(
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É!\n\n"
            "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω\n"
            "‚Ä¢ –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
        )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è main —Ñ—É–Ω–∫—Ü–∏–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ MiStockSync GUI...")
    print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

    root = tk.Tk()
    app = MiStockSyncApp(root)

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
    root.update_idletasks()
    width = root.winfo_width()
    height = root.winfo_height()
    x = (root.winfo_screenwidth() // 2) - (width // 2)
    y = (root.winfo_screenheight() // 2) - (height // 2)
    root.geometry(f"{width}x{height}+{x}+{y}")

    app.logger.info("üñ•Ô∏è GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")

    root.mainloop()


if __name__ == "__main__":
    main()
