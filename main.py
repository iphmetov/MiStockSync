"""
MiStockSync - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–π—Å–æ–≤
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import sys
import os
import pandas as pd
from datetime import datetime
import logging
import json
import shutil

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–æ—á–µ—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel
try:
    from openpyxl import load_workbook

    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é excel_loader
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "excel_loader"))

try:
    from excel_loader.loader import (
        select_and_load_excel,
        get_available_configs,
        load_largest_file,
    )
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ excel_loader: {e}")
    sys.exit(1)


# –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò –î–ê–ù–ù–´–•
# ================================

# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –í–∏—Ç–∏ - —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
VITYA_BALANCE_AVAILABLE = ["–ò–º–µ—é—Ç—Å—è –≤ –Ω–∞–ª.", "–†–∞—Å–ø—Ä–æ–¥–∞–∂–∞"]

# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –î–∏–º—ã
DIMI_BALANCE_EXPECTED = "–û–∂–∏–¥–∞–µ—Ç—Å—è"

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º 0 –∏ NaN)
MIN_PRICE_THRESHOLD = 0.01

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (–∏–∑ notebook)
MIN_PRICE_CHANGE_PERCENT = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
MAX_PRICE_CHANGE_PERCENT = 100.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
SIGNIFICANT_CHANGE_PERCENT = 20.0  # –ü–æ—Ä–æ–≥ "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ" –∏–∑–º–µ–Ω–µ–Ω–∏—è


class MiStockSyncApp:
    def __init__(self, root):
        self.root = root
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ main()
        self.root.geometry("1000x800")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        self.settings = self.load_settings()

        # –î–∞–Ω–Ω—ã–µ
        self.current_df = None
        self.current_config = None
        self.base_df = None
        self.auto_load_base = tk.BooleanVar(value=True)  # –ß–µ–∫–±–æ–∫—Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã
        self.comparison_result = None  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        self.current_font_size = self.settings.get("font_size", "normal")
        self.auto_load_base_enabled = self.settings.get("auto_load_base", True)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏
        self.load_available_configs()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.logger = logging.getLogger("MiStockSync")
        self.logger.setLevel(logging.INFO)

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in self.logger.handlers[:]:
            self.logger.removeHandler(handler)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)

        # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        console_handler.setFormatter(formatter)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.logger.addHandler(console_handler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logs_dir = "logs"
        if not os.path.exists(logs_dir):
            os.makedirs(logs_dir)

        log_file = os.path.join(
            logs_dir, f"mistocksync_{datetime.now().strftime('%Y%m%d')}.log"
        )
        file_handler = logging.FileHandler(log_file, encoding="utf-8")
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)

        self.logger.info("üöÄ MiStockSync –∑–∞–ø—É—â–µ–Ω")
        self.logger.info("üìã –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ settings.json"""
        settings_file = "settings.json"
        default_settings = {"auto_load_base": True, "font_size": "normal"}

        try:
            if os.path.exists(settings_file):
                with open(settings_file, "r", encoding="utf-8") as f:
                    settings = json.load(f)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
                for key, default_value in default_settings.items():
                    if key not in settings:
                        settings[key] = default_value

                self.logger.info(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {settings_file}")
                return settings
            else:
                self.logger.info(
                    "‚öôÔ∏è –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
                )
                return default_settings

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return default_settings

    def save_settings(self, settings):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª settings.json"""
        settings_file = "settings.json"

        try:
            with open(settings_file, "w", encoding="utf-8") as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)

            self.logger.info(f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {settings_file}")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.create_menu()

        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(3, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="MiStockSync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–π—Å–æ–≤",
            font=("Arial", 16, "bold"),
        )
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 10))

        # –ú–∏–Ω–∏-–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar_frame = ttk.Frame(main_frame)
        toolbar_frame.grid(
            row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10)
        )

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–ø—Ä–∏–∂–∞—Ç—ã–π –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é)
        tools_container = ttk.Frame(toolbar_frame)
        tools_container.grid(row=0, column=0, sticky=tk.W)

        # –û—Å—Ç–∞–≤–ª—è–µ–º toolbar –¥–ª—è –±—É–¥—É—â–∏—Ö –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º

        # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_frame = ttk.LabelFrame(main_frame, text="–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", padding="10")
        config_frame.grid(
            row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10)
        )
        config_frame.columnconfigure(1, weight=1)

        ttk.Label(config_frame, text="–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:").grid(
            row=0, column=0, sticky=tk.W, padx=(0, 10)
        )

        self.config_var = tk.StringVar()
        self.config_combo = ttk.Combobox(
            config_frame, textvariable=self.config_var, state="readonly"
        )
        self.config_combo.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))

        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        buttons_frame = ttk.Frame(config_frame)
        buttons_frame.grid(row=0, column=2, sticky=tk.E)

        ttk.Button(
            buttons_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=self.select_file
        ).grid(row=0, column=0, padx=(0, 5))

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_frame = ttk.LabelFrame(main_frame, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ", padding="10")
        info_frame.grid(
            row=3, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10)
        )
        info_frame.columnconfigure(0, weight=1)
        info_frame.rowconfigure(0, weight=1)

        self.info_text = scrolledtext.ScrolledText(info_frame, width=80, height=15)
        self.info_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        self.apply_font_size(self.current_font_size)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = ttk.Frame(main_frame)
        action_frame.grid(
            row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0)
        )

        self.show_data_button = ttk.Button(
            action_frame,
            text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
            command=self.show_data_sample,
            state="disabled",
        )
        self.show_data_button.grid(row=0, column=0, sticky=tk.W)

        self.save_data_button = ttk.Button(
            action_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π",
            command=self.save_data,
            state="disabled",
        )
        self.save_data_button.grid(row=0, column=1, padx=(10, 0))

        self.compare_button = ttk.Button(
            action_frame,
            text="üîç –°—Ä–∞–≤–Ω–∏—Ç—å —Å –±–∞–∑–æ–π",
            command=self.compare_with_base,
            state="disabled",
        )
        self.compare_button.grid(row=0, column=2, padx=(10, 0))

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.update_prices_button = ttk.Button(
            action_frame,
            text="üè∑Ô∏è –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã",
            command=self.update_prices,
            state="disabled",
        )
        self.update_prices_button.grid(row=0, column=3, padx=(10, 0))

        self.report_button = ttk.Button(
            action_frame,
            text="üìä –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
            command=self.save_report,
            state="disabled",
        )
        self.report_button.grid(row=0, column=4, padx=(10, 0))

        self.add_to_base_button = ttk.Button(
            action_frame,
            text="üì• –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É",
            command=self.add_to_base,
            state="disabled",
        )
        self.add_to_base_button.grid(row=0, column=5, padx=(10, 0))

        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.create_advanced_status_bar(main_frame)

    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.menubar = tk.Menu(self.root)

        # === –ú–ï–ù–Æ "–§–ê–ô–õ" ===
        file_menu = tk.Menu(self.menubar, tearoff=0)
        file_menu.add_command(
            label="üìÅ –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", command=self.select_file, accelerator="Ctrl+O"
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.show_settings, accelerator="Ctrl+,"
        )
        file_menu.add_separator()
        file_menu.add_command(
            label="üö™ –í—ã—Ö–æ–¥", command=self.quit_application, accelerator="Ctrl+Q"
        )
        self.menubar.add_cascade(label="üìÅ –§–∞–π–ª", menu=file_menu)

        # === –ú–ï–ù–Æ "–ü–†–ê–í–ö–ê" ===
        edit_menu = tk.Menu(self.menubar, tearoff=0)
        edit_menu.add_command(
            label="‚úÇÔ∏è –í—ã—Ä–µ–∑–∞—Ç—å", command=self.cut_text, accelerator="Ctrl+X"
        )
        edit_menu.add_command(
            label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=self.copy_text, accelerator="Ctrl+C"
        )
        edit_menu.add_separator()
        edit_menu.add_command(
            label="üîò –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ", command=self.select_all_text, accelerator="Ctrl+A"
        )
        edit_menu.add_command(
            label="üîÑ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ",
            command=self.invert_selection,
            accelerator="Ctrl+I",
        )
        self.menubar.add_cascade(label="‚úèÔ∏è –ü—Ä–∞–≤–∫–∞", menu=edit_menu)

        # === –ú–ï–ù–Æ "–í–ò–î" ===
        view_menu = tk.Menu(self.menubar, tearoff=0)
        view_menu.add_command(
            label="üßπ –û—á–∏—Å—Ç–∏—Ç—å", command=self.clear_info, accelerator="Ctrl+L"
        )
        view_menu.add_command(
            label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_interface, accelerator="F5"
        )
        view_menu.add_separator()

        # –ü–æ–¥–º–µ–Ω—é —Ä–∞–∑–º–µ—Ä–æ–≤ —à—Ä–∏—Ñ—Ç–∞
        font_menu = tk.Menu(view_menu, tearoff=0)
        font_menu.add_command(
            label="üìù –û–±—ã—á–Ω—ã–π —à—Ä–∏—Ñ—Ç", command=lambda: self.change_font_size("normal")
        )
        font_menu.add_command(
            label="üìÑ –°—Ä–µ–¥–Ω–∏–π —à—Ä–∏—Ñ—Ç", command=lambda: self.change_font_size("medium")
        )
        font_menu.add_command(
            label="üìä –ö—Ä—É–ø–Ω—ã–π —à—Ä–∏—Ñ—Ç", command=lambda: self.change_font_size("large")
        )
        view_menu.add_cascade(label="üî§ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞", menu=font_menu)

        self.menubar.add_cascade(label="üëÅÔ∏è –í–∏–¥", menu=view_menu)

        # === –ú–ï–ù–Æ "–°–ü–†–ê–í–ö–ê" ===
        help_menu = tk.Menu(self.menubar, tearoff=0)
        help_menu.add_command(
            label="üìñ –ü–æ–º–æ—â—å", command=self.show_help, accelerator="F1"
        )
        help_menu.add_separator()
        help_menu.add_command(
            label="‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about, accelerator="Ctrl+F1"
        )
        self.menubar.add_cascade(label="‚ùì –°–ø—Ä–∞–≤–∫–∞", menu=help_menu)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∫ –æ–∫–Ω—É
        self.root.config(menu=self.menubar)

        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()

    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # –§–∞–π–ª
        self.root.bind("<Control-o>", lambda e: self.select_file())
        self.root.bind("<Control-comma>", lambda e: self.show_settings())
        self.root.bind("<Control-q>", lambda e: self.quit_application())

        # –ü—Ä–∞–≤–∫–∞
        self.root.bind("<Control-x>", lambda e: self.cut_text())
        self.root.bind("<Control-c>", lambda e: self.copy_text())
        self.root.bind("<Control-a>", lambda e: self.select_all_text())
        self.root.bind("<Control-i>", lambda e: self.invert_selection())

        # –í–∏–¥
        self.root.bind("<Control-l>", lambda e: self.clear_info())
        self.root.bind("<F5>", lambda e: self.refresh_interface())

        # –°–ø—Ä–∞–≤–∫–∞
        self.root.bind("<F1>", lambda e: self.show_help())
        self.root.bind("<Control-F1>", lambda e: self.show_about())

    def load_available_configs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        self.log_info("üìã –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...")
        try:
            configs = get_available_configs()
            self.config_combo["values"] = configs

            # –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "auto" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if "auto" in configs:
                self.config_combo.set("auto")
            elif configs:
                self.config_combo.set(configs[0])

            self.log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(configs)}")
            self.log_info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏: {', '.join(configs)}")
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {e}")

    def select_file(self):
        """–í—ã–±–æ—Ä –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        self.log_info("üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/input –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        input_dir = "data/input"
        if not os.path.exists(input_dir):
            os.makedirs(input_dir)
            self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {input_dir}")

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        from tkinter import filedialog

        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")],
            initialdir=input_dir,
        )

        if not file_path:
            self.log_info("‚ÑπÔ∏è –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω")
            return

        self.log_info(f"üìÅ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {os.path.basename(file_path)}")

        # –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        if self.config_var.get() == "auto":
            detected_config = self.auto_select_config(file_path)
            config_name = detected_config
        else:
            config_name = self.config_var.get()

        if not config_name:
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            )
            return

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            self.start_progress("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", 5, "file")

            # –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            self.update_progress(1, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ")
            from excel_loader.loader import load_with_config

            # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞
            self.update_progress(2, "–ß—Ç–µ–Ω–∏–µ Excel —Ñ–∞–π–ª–∞")
            df = load_with_config(file_path, config_name)

            if df is not None:
                # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                self.update_progress(3, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                self.current_df = df
                self.current_config = config_name

                # –®–∞–≥ 4: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                self.update_progress(4, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                self.show_file_info(df, config_name)

                # –®–∞–≥ 5: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
                self.update_progress(5, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                self.update_buttons_state()

                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –∫—Ä–∞—Å–∏–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                rows = len(df)
                cols = len(df.columns)
                size_mb = df.memory_usage(deep=True).sum() / 1024 / 1024
                self.finish_progress(
                    f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {rows:,} —Å—Ç—Ä–æ–∫, {cols} —Å—Ç–æ–ª–±—Ü–æ–≤ ({size_mb:.1f} –ú–ë)"
                )

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ "auto" –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
                if "auto" in self.config_combo["values"]:
                    self.config_combo.set("auto")
                    self.log_info(
                        "üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ 'auto' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"
                    )
            else:
                self.finish_progress("–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω", auto_reset=False)
                self.set_status("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", "error")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            self.finish_progress("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞", auto_reset=False)
            self.set_status(f"–û—à–∏–±–∫–∞: {str(e)}", "error")

    def load_largest(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞"""

        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏
        data_dir = "data/input"

        try:
            self.set_status("–ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞...", "loading")
            self.root.update()

            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª
            excel_files = []
            for file in os.listdir(data_dir):
                if file.endswith((".xlsx", ".xls")):
                    file_path = os.path.join(data_dir, file)
                    file_size = os.path.getsize(file_path)
                    excel_files.append((file_path, file_size))

            if not excel_files:
                self.log_error("Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ data/input")
                self.set_status("–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "warning")
                return

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
            excel_files.sort(key=lambda x: x[1], reverse=True)
            largest_file_path, largest_size = excel_files[0]

            self.log_info(
                f"–ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {os.path.basename(largest_file_path)} ({largest_size} bytes)"
            )

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            config_name = self.auto_select_config(largest_file_path)

            from excel_loader.loader import load_with_config

            df = load_with_config(largest_file_path, config_name)

            if df is not None:
                self.current_df = df
                self.current_config = config_name
                self.show_file_info(df, config_name)
                self.set_status("–°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", "success")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                self.update_buttons_state()
            else:
                self.set_status("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", "error")

        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            self.set_status("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", "error")

    def show_file_info(self, df, config_name):
        """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
        self.log_info(f"üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ (–∫–æ–Ω—Ñ–∏–≥: {config_name})")
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞—è –¥–∞–Ω–Ω—ã–µ
        self.info_text.delete(1.0, tk.END)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ï\n"
        info += f"{'='*50}\n"
        info += f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}\n"
        info += f"–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        info += f"–°—Ç—Ä–æ–∫: {len(df):,}\n"
        info += f"–°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns):,}\n"
        info += f"–†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏: {df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB\n\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
        info += f"üìã –°–¢–û–õ–ë–¶–´ ({len(df.columns)}):\n"
        info += f"{'-'*30}\n"
        for i, col in enumerate(df.columns, 1):
            info += f"{i:2d}. {col}\n"

        # –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        info += f"\nüìä –¢–ò–ü–´ –î–ê–ù–ù–´–•:\n"
        info += f"{'-'*30}\n"
        for col in df.columns:
            non_null = df[col].notna().sum()
            info += f"{col}: {str(df[col].dtype)} ({non_null:,} –Ω–µ –ø—É—Å—Ç—ã—Ö)\n"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        info += f"\n‚ùå –ü–£–°–¢–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø:\n"
        info += f"{'-'*30}\n"
        null_counts = df.isnull().sum()
        for col in df.columns:
            if null_counts[col] > 0:
                info += f"{col}: {null_counts[col]:,} –ø—É—Å—Ç—ã—Ö\n"

        if null_counts.sum() == 0:
            info += "–ü—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç! ‚úÖ\n"

        self.info_text.insert(tk.END, info)
        self.log_info(
            f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤, {df.memory_usage(deep=True).sum() / 1024 / 1024:.2f} MB"
        )

    def show_data_sample(self):
        """–ü–æ–∫–∞–∑ –æ–±—Ä–∞–∑—Ü–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.current_df is None:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
            return

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞—è –¥–∞–Ω–Ω—ã–µ
        self.info_text.delete(1.0, tk.END)

        df = self.current_df

        info = f"üìã –û–ë–†–ê–ó–ï–¶ –î–ê–ù–ù–´–• (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫)\n"
        info += f"{'='*80}\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
        sample_df = df.head(10)
        info += sample_df.to_string(max_cols=10, max_colwidth=20) + "\n\n"

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        important_cols = [
            "article",
            "name",
            "price",
            "article_vitya",
            "price_usd",
            "price_rub",
        ]
        existing_cols = [col for col in important_cols if col in df.columns]

        if existing_cols:
            info += f"üìä –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø (—Ç–æ–ø-10):\n"
            info += f"{'-'*50}\n"
            for col in existing_cols[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                unique_vals = df[col].value_counts().head(10)
                info += f"\n{col.upper()}:\n"
                for val, count in unique_vals.items():
                    info += f"  {val}: {count:,}\n"

        self.info_text.insert(tk.END, info)

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.log_info("üíæ –ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        if self.current_df is None:
            self.log_error("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª")
            return

        from tkinter import filedialog

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        output_dir = "data/output"
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")

        self.log_info(f"üìÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ: {output_dir}")

        file_path = filedialog.asksaveasfilename(
            defaultextension=".xlsx",
            filetypes=[
                ("Excel files", "*.xlsx"),
                ("CSV files", "*.csv"),
                ("All files", "*.*"),
            ],
            initialdir=output_dir,
        )

        if file_path:
            try:
                self.set_status("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", "save")

                # –ü—Ä–µ–¥–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                processed_df = self.preprocess_supplier_data(
                    self.current_df, self.current_config
                )

                if file_path.endswith(".xlsx"):
                    processed_df.to_excel(file_path, index=False)
                elif file_path.endswith(".csv"):
                    processed_df.to_csv(file_path, index=False, encoding="utf-8")

                self.log_info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {file_path}")
                self.log_info(
                    f"–ò—Å—Ö–æ–¥–Ω–æ: {len(self.current_df)} —Å—Ç—Ä–æ–∫ ‚Üí –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_df)} —Å—Ç—Ä–æ–∫"
                )
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}"
                )
                self.set_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "info")

            except Exception as e:
                self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
                self.set_status("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "error")

    def compare_with_base(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.log_info("üîç –ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")

        if self.current_df is None:
            self.log_error("–§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
            )
            return

        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
        if self.auto_load_base_enabled:
            self.set_status("–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", "loading")
            self.root.update()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
            if self.base_df is None:
                data_dir = "data/input"

                self.base_df = load_largest_file(data_dir, "base")
                if self.base_df is None:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    return

                self.log_info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞, –±–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é
            if self.base_df is None:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
                )
                return

        # –ù–û–í–û–ï: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        self.set_status("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞...", "loading")
        self.root.update()

        processed_supplier_df = self.preprocess_supplier_data(
            self.current_df, self.current_config
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.set_status("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π...", "compare")
        self.root.update()

        comparison_result = self.perform_comparison(processed_supplier_df, self.base_df)
        self.show_comparison_result(comparison_result)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç—á–µ—Ç–∞
        self.comparison_result = comparison_result

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if "error" in comparison_result:
            self.log_error(
                f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {comparison_result['error']}"
            )
            self.log_info("‚ùå –ö–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç' –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
        else:
            self.log_info("üîò –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
            self.update_buttons_state()

        self.set_status("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "success")

    def perform_comparison(self, supplier_df, base_df):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if self.current_config == "vitya":
            supplier_article_col = "article_vitya"
            base_article_col = "article_vitya"
            supplier_price_col = "price_usd"
            base_price_col = "price_vitya_usd"
        elif self.current_config == "dimi":
            supplier_article_col = "article_dimi"
            base_article_col = "article_dimi"
            supplier_price_col = "price_usd"
            base_price_col = "price_dimi_usd"
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
            supplier_article_col = "article"
            base_article_col = "article"
            supplier_price_col = "price"
            base_price_col = "price"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        if supplier_article_col not in supplier_df.columns:
            return {
                "error": f"–°—Ç–æ–ª–±–µ—Ü {supplier_article_col} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
            }

        if base_article_col not in base_df.columns:
            return {"error": f"–°—Ç–æ–ª–±–µ—Ü {base_article_col} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"}

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç NaN –∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        supplier_clean = supplier_df.dropna(
            subset=[supplier_article_col, supplier_price_col]
        )
        base_clean = base_df.dropna(subset=[base_article_col])

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        supplier_dict = {}
        for _, row in supplier_clean.iterrows():
            article_value = row[supplier_article_col]
            # –î–ª—è article_vitya –∏—Å–ø–æ–ª—å–∑—É–µ–º int –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –¥–ª—è –¥—Ä—É–≥–∏—Ö - —Å—Ç—Ä–æ–∫—É
            if self.current_config == "vitya" and isinstance(article_value, int):
                article = str(article_value)
            else:
                article = str(article_value).strip()

            if article and article != "nan" and article != "None":
                supplier_dict[article] = {
                    "price": (
                        row[supplier_price_col]
                        if pd.notna(row[supplier_price_col])
                        else 0
                    ),
                    "name": row.get("name", ""),
                    "index": row.name,
                }

        base_dict = {}
        for _, row in base_clean.iterrows():
            article_value = row[base_article_col]
            # –î–ª—è article_vitya –∏—Å–ø–æ–ª—å–∑—É–µ–º int –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –¥–ª—è –¥—Ä—É–≥–∏—Ö - —Å—Ç—Ä–æ–∫—É
            if self.current_config == "vitya" and isinstance(article_value, int):
                article = str(article_value)
            else:
                article = str(article_value).strip()

            if article and article != "nan" and article != "None":
                base_dict[article] = {
                    "price": (
                        row[base_price_col] if pd.notna(row[base_price_col]) else 0
                    ),
                    "name": row.get("name", ""),
                    "index": row.name,
                }

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        matches = []
        price_changes = []
        new_items = []

        for article, supplier_data in supplier_dict.items():
            if article in base_dict:
                base_data = base_dict[article]
                match_info = {
                    "article": article,
                    "supplier_price": supplier_data["price"],
                    "base_price": base_data["price"],
                    "name": supplier_data["name"] or base_data["name"],
                    "price_diff": supplier_data["price"] - base_data["price"],
                    "price_change_percent": 0,
                }

                if base_data["price"] > 0:
                    match_info["price_change_percent"] = (
                        (supplier_data["price"] - base_data["price"])
                        / base_data["price"]
                        * 100
                    )

                matches.append(match_info)

                # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–±–æ–ª—å—à–µ 5%)
                if abs(match_info["price_change_percent"]) > 5:
                    price_changes.append(match_info)
            else:
                new_items.append(
                    {
                        "article": article,
                        "price": supplier_data["price"],
                        "name": supplier_data["name"],
                    }
                )

        # –ù–û–í–û–ï: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö, –µ—Å–ª–∏ –º–∞–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
        code_matches = []
        if len(matches) < len(supplier_dict) * 0.3:  # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 30% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            self.log_info(
                "üîç –ú–∞–ª–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–¥–∞–º..."
            )
            code_matches = self.compare_by_product_code(
                supplier_df, base_df, self.current_config
            )

        return {
            "supplier_total": len(supplier_dict),
            "base_total": len(base_dict),
            "matches": matches,
            "price_changes": price_changes,
            "new_items": new_items,
            "code_matches": code_matches,  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "match_rate": (
                len(matches) / len(supplier_dict) * 100 if supplier_dict else 0
            ),
        }

    def show_comparison_result(self, result):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if "error" in result:
            messagebox.showerror("–û—à–∏–±–∫–∞", result["error"])
            return

        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ, –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞—è –¥–∞–Ω–Ω—ã–µ
        self.info_text.delete(1.0, tk.END)

        info = f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•\n"
        info += f"{'='*60}\n"
        info += f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.current_config}\n"
        info += f"–î–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        info += f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        info += f"{'-'*40}\n"
        info += f"–¢–æ–≤–∞—Ä–æ–≤ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {result['supplier_total']:,}\n"
        info += f"–¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {result['base_total']:,}\n"
        info += f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(result['matches']):,}\n"
        info += f"–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {result['match_rate']:.1f}%\n\n"

        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        if result["price_changes"]:
            info += f"üí∞ –ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù (>5%):\n"
            info += f"{'-'*50}\n"
            for i, item in enumerate(result["price_changes"][:10], 1):
                change_sign = "üìà" if item["price_diff"] > 0 else "üìâ"
                info += f"{i:2d}. {item['article']}: {item['base_price']:.2f} ‚Üí {item['supplier_price']:.2f} "
                info += f"({item['price_change_percent']:+.1f}%) {change_sign}\n"
            if len(result["price_changes"]) > 10:
                info += f"... –∏ –µ—â–µ {len(result['price_changes']) - 10} –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        else:
            info += f"üí∞ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –¶–ï–ù: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚úÖ\n"

        info += "\n"

        # –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        if result["new_items"]:
            info += f"üÜï –ù–û–í–´–ï –¢–û–í–ê–†–´ –£ –ü–û–°–¢–ê–í–©–ò–ö–ê:\n"
            info += f"{'-'*40}\n"
            for i, item in enumerate(result["new_items"][:10], 1):
                info += f"{i:2d}. {item['article']}: {item['price']:.2f} - {item['name'][:30]}\n"
            if len(result["new_items"]) > 10:
                info += f"... –∏ –µ—â–µ {len(result['new_items']) - 10} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
        else:
            info += f"üÜï –ù–û–í–´–ï –¢–û–í–ê–†–´: –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n"

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–¥–∞–º
        if result.get("code_matches"):
            info += f"\nüîç –°–û–í–ü–ê–î–ï–ù–ò–Ø –ü–û –ö–û–î–ê–ú –í –ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–Ø–•:\n"
            info += f"{'-'*50}\n"
            for i, match in enumerate(result["code_matches"][:10], 1):
                info += f"{i:2d}. –ö–æ–¥: {match['code']}\n"
                info += f"    –ü–æ—Å—Ç–∞–≤—â–∏–∫: {match['supplier_name'][:40]}...\n"
                info += f"    –ë–∞–∑–∞: {match['base_name'][:40]}...\n"
                info += f"    –¶–µ–Ω—ã: {match['supplier_price']:.2f} ‚Üî {match['base_price']:.2f}\n\n"
            if len(result["code_matches"]) > 10:
                info += f"... –∏ –µ—â–µ {len(result['code_matches']) - 10} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º\n"

        info += f"\nüéâ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"

        self.info_text.insert(tk.END, info)
        self.log_info(
            f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(result['matches'])} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ {result['supplier_total']} —Ç–æ–≤–∞—Ä–æ–≤"
        )

    def clean_invisible_chars(self, text):
        """–£–±–∏—Ä–∞–µ—Ç –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if pd.isna(text):
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        text_str = str(text).strip()

        # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –£–±–∏—Ä–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –∏ –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        # import unicodedata
        # cleaned = "".join(
        #     char
        #     for char in text_str
        #     if unicodedata.category(char)[0]
        #     in ("L", "N", "P", "S", "M")  # –ë—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏, —Å–∏–º–≤–æ–ª—ã, –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏
        #     or char in (" ", "\t", "\n")  # –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        #     or unicodedata.category(char) == "Zs"  # –û–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã (Space separators)
        # )
        # cleaned = " ".join(cleaned.split())

        # –£–ü–†–û–©–ï–ù–û: –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = " ".join(text_str.split())

        return cleaned if cleaned else None

    def clean_article_vitya_simple(self, article):
        """–ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –í–∏—Ç–∏ - —É–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–µ—Ñ–∏–∫—Å '000, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –í–°–ï–ì–î–ê int"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏–ª–∏ None
        if pd.isna(article) or article is None:
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        cleaned = str(article).strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∞—Å—å –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –Ω–µ 'nan'
        if not cleaned or cleaned.lower() == "nan":
            return None

        # 1. –£–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
        cleaned = cleaned.replace("'", "")

        # 2. –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '000 –µ—Å–ª–∏ –µ—Å—Ç—å
        if cleaned.startswith("000"):
            cleaned = cleaned[3:]

        # 3. –í–°–ï–ì–î–ê –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        if cleaned.isdigit():
            return int(cleaned) if cleaned else 0
        elif cleaned == "":
            return 0
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            import re

            digits = re.findall(r"\d+", cleaned)
            if digits:
                return int("".join(digits))
            else:
                return 0

    def filter_by_price(self, df, price_column="price_usd"):
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ price_usd —è–≤–ª—è–µ—Ç—Å—è NaN, –ø—É—Å—Ç–æ–π –∏–ª–∏ <= 0

        Args:
            df: DataFrame –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            price_column: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å —Ü–µ–Ω–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'price_usd')

        Returns:
            DataFrame —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if price_column not in df.columns:
            self.log_info(
                f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{price_column}' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )
            return df

        initial_count = len(df)

        # –§–∏–ª—å—Ç—Ä—É–µ–º: —É–±–∏—Ä–∞–µ–º NaN, –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ü–µ–Ω—ã <= MIN_PRICE_THRESHOLD
        filtered_df = df[
            (df[price_column].notna()) & (df[price_column] > MIN_PRICE_THRESHOLD)
        ].copy()

        final_count = len(filtered_df)
        removed_count = initial_count - final_count

        if removed_count > 0:
            self.log_info(f"üí∞ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ ({price_column}):")
            self.log_info(f"   –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {removed_count}")
            self.log_info(f"   –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫: {final_count}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            nan_count = df[price_column].isna().sum()
            zero_count = (df[price_column] == 0).sum()
            low_price_count = (
                (df[price_column] > 0) & (df[price_column] <= MIN_PRICE_THRESHOLD)
            ).sum()

            self.log_info(f"   üìä –ü—Ä–∏—á–∏–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è:")
            if nan_count > 0:
                self.log_info(f"      NaN/–ø—É—Å—Ç—ã–µ: {nan_count}")
            if zero_count > 0:
                self.log_info(f"      –ù—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã: {zero_count}")
            if low_price_count > 0:
                self.log_info(
                    f"      –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–µ (<={MIN_PRICE_THRESHOLD}): {low_price_count}"
                )
        else:
            self.log_info(
                f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ: –≤—Å–µ {final_count} —Å—Ç—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä"
            )

        return filtered_df

    def preprocess_vitya_fixed_v3(self, df):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –í–∏—Ç–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ü–µ–Ω–µ –∏ –±–∞–ª–∞–Ω—Å—É"""
        self.log_info("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –í–∏—Ç—è...")

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        processed_df = df.copy()
        initial_count = len(processed_df)

        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN, –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        self.log_info("üí∞ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ...")
        processed_df = self.filter_by_price(processed_df, "price_usd")

        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏ –ò –Ω–∞ —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–µ
        if "balance" in processed_df.columns:
            self.log_info(
                f"üì¶ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ {VITYA_BALANCE_AVAILABLE})..."
            )

            balance_before = len(processed_df)
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–ø–∏—Å–∫—É –∑–Ω–∞—á–µ–Ω–∏–π
            processed_df = processed_df[
                processed_df["balance"].isin(VITYA_BALANCE_AVAILABLE)
            ].copy()
            balance_after = len(processed_df)

            removed_balance = balance_before - balance_after
            if removed_balance > 0:
                self.log_info(f"   üì¶ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ –±–µ–∑ –Ω–∞–ª–∏—á–∏—è: {removed_balance}")
                self.log_info(f"   üì¶ –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫ –≤ –Ω–∞–ª–∏—á–∏–∏: {balance_after}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É –±–∞–ª–∞–Ω—Å–∞
                for status in VITYA_BALANCE_AVAILABLE:
                    status_count = (processed_df["balance"] == status).sum()
                    if status_count > 0:
                        self.log_info(f"      '{status}': {status_count} —Ç–æ–≤–∞—Ä–æ–≤")
            else:
                self.log_info(f"   üì¶ –í—Å–µ {balance_after} —Å—Ç—Ä–æ–∫ –∏–º–µ—é—Ç —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏")
        else:
            self.log_info(
                "‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü 'balance' –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )

        # 3. –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        if "article_vitya" in processed_df.columns:
            self.log_info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –í–∏—Ç—è...")

            processed_df["article_vitya"] = processed_df["article_vitya"].apply(
                self.clean_article_vitya_simple
            )

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        processed_df["supplier_name"] = "–í–∏—Ç—è"

        # 5. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if "article_vitya" in processed_df.columns:
            valid_articles = processed_df["article_vitya"].notna().sum()
            self.log_info(f"üî¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –í–∏—Ç—è: {valid_articles}")
            if valid_articles > 0:
                sample_articles = (
                    processed_df["article_vitya"].dropna().head(5).tolist()
                )
                self.log_info(f"üìù –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {sample_articles}")

        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_count = len(processed_df)
        total_removed = initial_count - final_count

        self.log_info(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –í–∏—Ç—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        self.log_info(f"   üìä –ò—Å—Ö–æ–¥–Ω–æ: {initial_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –ò—Ç–æ–≥–æ: {final_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –£–¥–∞–ª–µ–Ω–æ: {total_removed} —Å—Ç—Ä–æ–∫")

        return processed_df

    def preprocess_dimi_fixed(self, df):
        """–£–ü–†–û–©–ï–ù–ù–ê–Ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –î–∏–º–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        self.log_info("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –î–∏–º–∞...")

        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        processed_df = df.copy()
        initial_count = len(processed_df)

        # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å NaN, –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        self.log_info("üí∞ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ...")
        processed_df = self.filter_by_price(processed_df, "price_usd")

        # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ balance –∏–ª–∏ balance1 = "–û–∂–∏–¥–∞–µ—Ç—Å—è"
        balance_columns = ["balance", "balance1"]
        found_balance_columns = [
            col for col in balance_columns if col in processed_df.columns
        ]

        if found_balance_columns:
            self.log_info(
                f"üì¶ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É (—É–±–∏—Ä–∞–µ–º '{DIMI_BALANCE_EXPECTED}')..."
            )

            balance_before = len(processed_df)

            # –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏–µ: –ù–ò balance, –ù–ò balance1 –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "–û–∂–∏–¥–∞–µ—Ç—Å—è"
            for col in found_balance_columns:
                processed_df = processed_df[processed_df[col] != DIMI_BALANCE_EXPECTED]

            processed_df = processed_df.copy()
            balance_after = len(processed_df)

            removed_balance = balance_before - balance_after
            if removed_balance > 0:
                self.log_info(
                    f"   üì¶ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å '{DIMI_BALANCE_EXPECTED}': {removed_balance}"
                )
                self.log_info(f"   üì¶ –û—Å—Ç–∞–ª–æ—Å—å —Å—Ç—Ä–æ–∫ –≤ –Ω–∞–ª–∏—á–∏–∏: {balance_after}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
                for col in found_balance_columns:
                    expected_count = (df[col] == DIMI_BALANCE_EXPECTED).sum()
                    if expected_count > 0:
                        self.log_info(
                            f"      {col}: {expected_count} —Å—Ç—Ä–æ–∫ —Å '{DIMI_BALANCE_EXPECTED}'"
                        )
            else:
                self.log_info(
                    f"   üì¶ –í—Å–µ {balance_after} —Å—Ç—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ –±–∞–ª–∞–Ω—Å—É"
                )
        else:
            self.log_info(
                "‚ö†Ô∏è –°—Ç–æ–ª–±—Ü—ã balance/balance1 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é –ø—Ä–æ–ø—É—â–µ–Ω–∞"
            )

        # 3. –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        if "article_dimi" in processed_df.columns:
            self.log_info("üßπ –û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –î–∏–º–∞...")

            def clean_article_dimi_simple(article):
                """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ –î–∏–º—ã - –¢–û–õ–¨–ö–û –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–µ—Ñ–∏–∫—Å '000"""
                if pd.isna(article):
                    return None

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                cleaned = str(article).strip()

                if not cleaned or cleaned.lower() == "nan":
                    return None

                # –£–±–∏—Ä–∞–µ–º –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã
                cleaned = cleaned.replace("'", "")

                # –î–õ–Ø –î–ò–ú–´: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å '000 –µ—Å–ª–∏ –µ—Å—Ç—å
                if cleaned.startswith("000"):
                    cleaned = cleaned[3:]

                return cleaned if cleaned else None

            processed_df["article_dimi"] = processed_df["article_dimi"].apply(
                clean_article_dimi_simple
            )

        # 4. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        processed_df["supplier_name"] = "–î–∏–º–∞"

        # 5. –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if "article_dimi" in processed_df.columns:
            valid_articles = processed_df["article_dimi"].notna().sum()
            self.log_info(f"üî¢ –í–∞–ª–∏–¥–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –î–∏–º–∞: {valid_articles}")
            if valid_articles > 0:
                sample_articles = processed_df["article_dimi"].dropna().head(5).tolist()
                self.log_info(f"üìù –ü—Ä–∏–º–µ—Ä—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {sample_articles}")

        # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_count = len(processed_df)
        total_removed = initial_count - final_count

        self.log_info(f"‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –î–∏–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        self.log_info(f"   üìä –ò—Å—Ö–æ–¥–Ω–æ: {initial_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –ò—Ç–æ–≥–æ: {final_count} —Å—Ç—Ä–æ–∫")
        self.log_info(f"   üìä –£–¥–∞–ª–µ–Ω–æ: {total_removed} —Å—Ç—Ä–æ–∫")

        return processed_df

    def preprocess_supplier_data(self, df, config_name):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥–∞"""

        if config_name == "vitya":
            return self.preprocess_vitya_fixed_v3(df)
        elif config_name == "dimi":
            return self.preprocess_dimi_fixed(df)
        else:
            self.log_info(f"üìã –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è {config_name} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return df

    def detect_config_by_filename(self, file_path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""

        filename = os.path.basename(file_path).upper()  # –ò–º—è —Ñ–∞–π–ª–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

        self.log_info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {filename}")

        # –ü—Ä–∞–≤–∏–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
        if "JHT" in filename:
            detected_config = "vitya"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å –í–∏—Ç–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç JHT)")

        elif "DIMI" in filename or "DIMA" in filename:
            detected_config = "dimi"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∞–π—Å –î–∏–º—ã (—Å–æ–¥–µ—Ä–∂–∏—Ç DiMi/DiMa)")

        elif "BASE" in filename or "–ë–ê–ó–ê" in filename:
            detected_config = "base"
            self.log_info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–¥–µ—Ä–∂–∏—Ç BASE/–ë–ê–ó–ê)")

        else:
            detected_config = "auto"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.log_info("‚ÑπÔ∏è –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è AUTO")

        return detected_config

    def find_product_code_in_name(self, product_name):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è"""
        # –ë–û–õ–í–ê–ù–ö–ê –î–õ–Ø –ë–£–î–£–©–ï–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏

        if pd.isna(product_name) or not isinstance(product_name, str):
            return None

        import re

        # –ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤:
        patterns = [
            r"\b\d{6,}\b",  # 6+ —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥
            r"[A-Z]{2,}\d{3,}",  # –ë—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã (XM123)
            r"\d{3,}[A-Z]{1,2}",  # –¶–∏—Ñ—Ä—ã + –±—É–∫–≤—ã (123XM)
            # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        ]

        for pattern in patterns:
            matches = re.findall(pattern, product_name.upper())
            if matches:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                return matches[0]

        return None

    def compare_by_product_code(self, supplier_df, base_df, supplier_config):
        """–ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö"""
        # –ë–û–õ–í–ê–ù–ö–ê –î–õ–Ø –ë–£–î–£–©–ï–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ò
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö

        self.log_info("üîç –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö...")

        code_matches = []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        supplier_codes = {}
        for idx, row in supplier_df.iterrows():
            if "name" in row and pd.notna(row["name"]):
                code = self.find_product_code_in_name(row["name"])
                if code:
                    supplier_codes[code] = {
                        "index": idx,
                        "name": row["name"],
                        "price": (
                            row.get("price_usd", 0)
                            if supplier_config == "vitya"
                            else row.get("price", 0)
                        ),
                    }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –±–∞–∑—ã
        base_codes = {}
        for idx, row in base_df.iterrows():
            if "name" in row and pd.notna(row["name"]):
                code = self.find_product_code_in_name(row["name"])
                if code:
                    base_codes[code] = {
                        "index": idx,
                        "name": row["name"],
                        "price": row.get("price", 0),
                    }

        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for code, supplier_data in supplier_codes.items():
            if code in base_codes:
                base_data = base_codes[code]
                code_matches.append(
                    {
                        "code": code,
                        "supplier_name": supplier_data["name"],
                        "base_name": base_data["name"],
                        "supplier_price": supplier_data["price"],
                        "base_price": base_data["price"],
                    }
                )

        self.log_info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º: {len(code_matches)}")
        return code_matches

    def auto_select_config(self, file_path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞"""

        detected_config = self.detect_config_by_filename(file_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–æ–Ω—Ñ–∏–≥ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        available_configs = self.config_combo["values"]

        if detected_config in available_configs:
            self.config_combo.set(detected_config)
            self.log_info(f"üéØ –ö–æ–Ω—Ñ–∏–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {detected_config}")
            return detected_config
        else:
            self.log_info(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {detected_config} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π")
            return self.config_var.get()

    def clear_info(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.info_text.delete(1.0, tk.END)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.current_df = None
        self.base_df = None
        self.comparison_result = None
        self.current_config = None

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        self.update_buttons_state()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.set_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "info")

        self.log_info("üßπ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—á–∏—â–µ–Ω, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")

    def update_buttons_state(self, log_changes=True):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
        file_loaded = self.current_df is not None
        file_state = "normal" if file_loaded else "disabled"

        self.show_data_button.config(state=file_state)
        self.save_data_button.config(state=file_state)
        self.compare_button.config(state=file_state)
        self.update_prices_button.config(state=file_state)

        # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        comparison_done = self.comparison_result is not None
        comparison_state = "normal" if comparison_done else "disabled"

        self.report_button.config(state=comparison_state)

        # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É" –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        has_new_items = False
        new_items_count = 0
        if self.comparison_result is not None:
            new_items = self.comparison_result.get("new_items", [])
            new_items_count = len(new_items)
            has_new_items = new_items_count > 0

        add_to_base_state = "normal" if has_new_items else "disabled"
        self.add_to_base_button.config(state=add_to_base_state)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if log_changes:
            if file_loaded:
                self.log_info("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω - –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã")
            if comparison_done:
                self.log_info("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - –∫–Ω–æ–ø–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã")
            if has_new_items:
                self.log_info(
                    f"üì• –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {new_items_count} - –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞"
                )
            elif comparison_done and not has_new_items:
                self.log_info(
                    "‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
                )
            if not file_loaded and not comparison_done:
                self.log_info("‚ö™ –î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –∫–Ω–æ–ø–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")

    def log_info(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
        self.logger.info(message)

        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ GUI
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.info_text.insert(tk.END, log_message)
        self.info_text.see(tk.END)

    def log_error(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
        self.logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {message}")

        # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ GUI
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] ‚ùå –û–®–ò–ë–ö–ê: {message}\n"
        self.info_text.insert(tk.END, log_message)
        self.info_text.see(tk.END)

    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –≤ Excel"""
        self.log_info("üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç'")

        if self.comparison_result is None:
            self.log_info("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π"
            )
            return

        self.log_info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")

        try:
            from tkinter import filedialog
            import os

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data/output –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            output_dir = "data/output"
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)
                self.log_info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            default_filename = f"summary_report_{timestamp}.xlsx"
            self.log_info(f"üìÅ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {default_filename}")

            file_path = filedialog.asksaveasfilename(
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
                initialfile=default_filename,
                initialdir=output_dir,
            )

            self.log_info(
                f"üìÅ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å: {file_path if file_path else '–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}"
            )
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return

        if file_path:
            try:
                self.log_info("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
                self.set_status("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...", "save")
                self.root.update()

                # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                self.log_info("üìä –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...")
                summary_data = [
                    {
                        "–ü–æ—Å—Ç–∞–≤—â–∏–∫": self.current_config.upper(),
                        "–¢–æ–≤–∞—Ä–æ–≤": self.comparison_result["supplier_total"],
                        "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π": len(self.comparison_result["matches"]),
                        "–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π": f"{self.comparison_result['match_rate']:.1f}%",
                        "–ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω": len(self.comparison_result["price_changes"]),
                        "–ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤": len(self.comparison_result["new_items"]),
                        "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º": len(
                            self.comparison_result.get("code_matches", [])
                        ),
                    }
                ]
                self.log_info(f"‚úÖ –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {summary_data[0]}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
                self.log_info("üìù –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª...")
                with pd.ExcelWriter(file_path, engine="openpyxl") as writer:
                    # –õ–∏—Å—Ç —Å –æ–±—â–µ–π —Å–≤–æ–¥–∫–æ–π
                    self.log_info("üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–≤–æ–¥–∫–∞'...")
                    summary_df = pd.DataFrame(summary_data)
                    summary_df.to_excel(writer, sheet_name="–°–≤–æ–¥–∫–∞", index=False)

                    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –°–≤–æ–¥–∫–∏
                    worksheet = writer.sheets["–°–≤–æ–¥–∫–∞"]
                    worksheet.column_dimensions["A"].width = 20  # –ü–æ—Å—Ç–∞–≤—â–∏–∫
                    worksheet.column_dimensions["B"].width = 12  # –¢–æ–≤–∞—Ä–æ–≤
                    worksheet.column_dimensions["C"].width = 15  # –°–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    worksheet.column_dimensions["D"].width = 18  # –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    worksheet.column_dimensions["E"].width = 15  # –ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
                    worksheet.column_dimensions["F"].width = 15  # –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                    worksheet.column_dimensions["G"].width = 20  # –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º

                    # –õ–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
                    if self.comparison_result["matches"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è' ({len(self.comparison_result['matches'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        matches_df = pd.DataFrame(self.comparison_result["matches"])
                        matches_df.to_excel(
                            writer, sheet_name="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π
                        worksheet = writer.sheets["–°–æ–≤–ø–∞–¥–µ–Ω–∏—è"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        if "name" in matches_df.columns:
                            name_col_index = matches_df.columns.get_loc("name")
                            name_col_letter = chr(
                                65 + name_col_index
                            )  # A=65, B=66, C=67...
                            worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(matches_df.columns):
                            col_letter = chr(65 + i)
                            if col != "name":  # name —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤—ã—à–µ
                                if "article" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "price" in col.lower() or "diff" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "color" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 20
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω
                    if self.comparison_result["price_changes"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω' ({len(self.comparison_result['price_changes'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        price_changes_df = pd.DataFrame(
                            self.comparison_result["price_changes"]
                        )
                        price_changes_df.to_excel(
                            writer, sheet_name="–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω
                        worksheet = writer.sheets["–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        if "name" in price_changes_df.columns:
                            name_col_index = price_changes_df.columns.get_loc("name")
                            name_col_letter = chr(65 + name_col_index)
                            worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(price_changes_df.columns):
                            col_letter = chr(65 + i)
                            if col != "name":
                                if "article" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif (
                                    "price" in col.lower()
                                    or "diff" in col.lower()
                                    or "percent" in col.lower()
                                ):
                                    worksheet.column_dimensions[col_letter].width = 15
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å –Ω–æ–≤—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
                    if self.comparison_result["new_items"]:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã' ({len(self.comparison_result['new_items'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        new_items_df = pd.DataFrame(self.comparison_result["new_items"])
                        new_items_df.to_excel(
                            writer, sheet_name="–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                        worksheet = writer.sheets["–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±–µ—Ü —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        if "name" in new_items_df.columns:
                            name_col_index = new_items_df.columns.get_loc("name")
                            name_col_letter = chr(65 + name_col_index)
                            worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(new_items_df.columns):
                            col_letter = chr(65 + i)
                            if col != "name":
                                if "article" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "price" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "color" in col.lower() or "balance" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 20
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏ –ø–æ –∫–æ–¥–∞–º
                    if self.comparison_result.get("code_matches"):
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º' ({len(self.comparison_result['code_matches'])} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        code_matches_df = pd.DataFrame(
                            self.comparison_result["code_matches"]
                        )
                        code_matches_df.to_excel(
                            writer, sheet_name="–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–æ–¥–∞–º
                        worksheet = writer.sheets["–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∫–æ–¥–∞–º"]
                        # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å name –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É 110
                        for col_name in ["name", "supplier_name", "base_name"]:
                            if col_name in code_matches_df.columns:
                                name_col_index = code_matches_df.columns.get_loc(
                                    col_name
                                )
                                name_col_letter = chr(65 + name_col_index)
                                worksheet.column_dimensions[name_col_letter].width = 110

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(code_matches_df.columns):
                            col_letter = chr(65 + i)
                            if col not in ["name", "supplier_name", "base_name"]:
                                if "article" in col.lower() or "code" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                elif "confidence" in col.lower():
                                    worksheet.column_dimensions[col_letter].width = 15
                                else:
                                    worksheet.column_dimensions[col_letter].width = 18

                    # –õ–∏—Å—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω)
                    warnings_data = []

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∫–∞–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                    for change in self.comparison_result.get("price_changes", []):
                        if (
                            abs(change.get("price_change_percent", 0))
                            > SIGNIFICANT_CHANGE_PERCENT
                        ):
                            warnings_data.append(
                                {
                                    "–¢–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è": "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã",
                                    "–ê—Ä—Ç–∏–∫—É–ª": change.get("article", ""),
                                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": change.get("name", ""),
                                    "–¶–µ–Ω–∞ –±–∞–∑—ã": change.get("base_price", 0),
                                    "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": change.get("supplier_price", 0),
                                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %": f"{change.get('price_change_percent', 0):+.1f}%",
                                    "–†–∞–∑–Ω–∏—Ü–∞": change.get("price_diff", 0),
                                    "–û–ø–∏—Å–∞–Ω–∏–µ": f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç {SIGNIFICANT_CHANGE_PERCENT}%",
                                }
                            )

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –±–µ–∑ —Ü–µ–Ω—ã –≤ –±–∞–∑–µ
                    for match in self.comparison_result.get("matches", []):
                        if (
                            match.get("base_price", 0) <= 0
                            and match.get("supplier_price", 0) > 0
                        ):
                            warnings_data.append(
                                {
                                    "–¢–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–∞ –≤ –±–∞–∑–µ",
                                    "–ê—Ä—Ç–∏–∫—É–ª": match.get("article", ""),
                                    "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": match.get("name", ""),
                                    "–¶–µ–Ω–∞ –±–∞–∑—ã": match.get("base_price", 0),
                                    "–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": match.get("supplier_price", 0),
                                    "–ò–∑–º–µ–Ω–µ–Ω–∏–µ %": "–ù–æ–≤–∞—è —Ü–µ–Ω–∞",
                                    "–†–∞–∑–Ω–∏—Ü–∞": match.get("supplier_price", 0),
                                    "–û–ø–∏—Å–∞–Ω–∏–µ": "–í –±–∞–∑–µ –Ω–µ—Ç —Ü–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞",
                                }
                            )

                    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    if warnings_data:
                        self.log_info(
                            f"üìÑ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è' ({len(warnings_data)} –∑–∞–ø–∏—Å–µ–π)..."
                        )
                        warnings_df = pd.DataFrame(warnings_data)
                        warnings_df.to_excel(
                            writer, sheet_name="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", index=False
                        )

                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                        worksheet = writer.sheets["–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"]
                        worksheet.column_dimensions["A"].width = (
                            25  # –¢–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                        )
                        worksheet.column_dimensions["B"].width = 15  # –ê—Ä—Ç–∏–∫—É–ª
                        worksheet.column_dimensions["C"].width = (
                            110  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (—à–∏—Ä–æ–∫–∏–π)
                        )
                        worksheet.column_dimensions["D"].width = 15  # –¶–µ–Ω–∞ –±–∞–∑—ã
                        worksheet.column_dimensions["E"].width = 18  # –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                        worksheet.column_dimensions["F"].width = 15  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ %
                        worksheet.column_dimensions["G"].width = 12  # –†–∞–∑–Ω–∏—Ü–∞
                        worksheet.column_dimensions["H"].width = 40  # –û–ø–∏—Å–∞–Ω–∏–µ
                    else:
                        self.log_info("‚ÑπÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                self.log_info("‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

                self.log_info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                self.log_info(f"   –õ–∏—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(summary_data)} + –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
                self.set_status("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", "success")

            except Exception as e:
                self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
                self.set_status("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞", "error")
        else:
            self.log_info("‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def update_prices(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.log_info("üîÑ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if self.current_df is None:
            self.log_error("‚ùå –§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            messagebox.showwarning(
                "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"
            )
            return

        if self.base_df is None:
            self.log_info("üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É...")

            # –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–∞–∫–∞—è –∂–µ –ª–æ–≥–∏–∫–∞, –∫–∞–∫ –≤ compare_with_base)
            self.set_status("–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...", "loading")
            self.root.update()

            data_dir = "data/input"
            self.base_df = load_largest_file(data_dir, "base")

            if self.base_df is None:
                self.log_error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ data/input"
                )
                return

            self.log_info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω")

        if self.comparison_result is None:
            self.log_info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            self.set_status("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω...", "compare")
            self.root.update()

            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            processed_supplier_df = self.preprocess_supplier_data(
                self.current_df, self.current_config
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
            comparison_result = self.perform_comparison(
                processed_supplier_df, self.base_df
            )

            if "error" in comparison_result:
                self.log_error(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {comparison_result['error']}"
                )
                messagebox.showerror(
                    "–û—à–∏–±–∫–∞",
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {comparison_result['error']}",
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            self.comparison_result = comparison_result
            self.show_comparison_result(comparison_result)
            self.update_buttons_state()

            self.log_info("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω")

        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_choice = messagebox.askyesnocancel(
            "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è",
            "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ü–µ–Ω?\n\n"
            "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–î–∞ - –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–ª—è backup\n"
            "–ù–µ—Ç - –æ–±–Ω–æ–≤–∏—Ç—å –±–µ–∑ backup\n"
            "–û—Ç–º–µ–Ω–∞ - –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é",
        )

        if backup_choice is None:  # –û—Ç–º–µ–Ω–∞
            self.log_info("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return

        backup_path = None
        if backup_choice:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–∞"
            from tkinter import filedialog

            # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ backup
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            default_name = f"BACKUP_base_{self.current_config}_{timestamp}.xlsx"

            backup_path = filedialog.asksaveasfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
                initialfile=default_name,
                initialdir="data/output",
            )

            if not backup_path:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏
                self.log_info(
                    "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω–æ - –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è backup"
                )
                return

        # –ó–∞–ø—É—Å–∫–∞–µ–º progress bar
        self.start_progress("–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω", 7, "update")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.update_progress(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        matches = self.comparison_result.get("matches", [])
        if not matches:
            self.log_info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω")
            self.finish_progress("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", auto_reset=True)
            messagebox.showinfo(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω"
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –±–æ–ª—å—à–µ MIN_PRICE_CHANGE_PERCENT
        price_updates = []
        for match in matches:
            supplier_price = match.get("supplier_price")
            base_price = match.get("base_price")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ü–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–π
            if supplier_price is not None and supplier_price > 0:
                base_price = base_price if base_price is not None else 0

                # –ï—Å–ª–∏ —Ü–µ–Ω—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –∏–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç —Ü–µ–Ω—ã (0)
                if supplier_price != base_price:
                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if base_price > 0:
                        price_change_percent = abs(
                            (supplier_price - base_price) / base_price * 100
                        )
                    else:
                        price_change_percent = (
                            100  # –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –≤–º–µ—Å—Ç–æ 0 - –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º!
                        )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
                    # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å base_price = 0 –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º
                    if (
                        price_change_percent >= MIN_PRICE_CHANGE_PERCENT
                        or base_price == 0
                    ):
                        price_updates.append(match)
                        if base_price == 0:
                            self.log_info(
                                f"üìå –î–æ–±–∞–≤–ª–µ–Ω {match.get('article')}: –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ –±–∞–∑–µ (–±—ã–ª–æ 0 ‚Üí {supplier_price})"
                            )
                    else:
                        self.log_info(
                            f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω {match.get('article')}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ ({price_change_percent:.1f}%)"
                        )

        self.update_progress(2, f"–ù–∞–π–¥–µ–Ω–æ {len(price_updates)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

        if not price_updates:
            self.log_info("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            self.finish_progress("–í—Å–µ —Ü–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã", auto_reset=True)
            messagebox.showinfo(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—Å–µ —Ü–µ–Ω—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            )
            return

        self.log_info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(price_updates)} —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        backup_message = (
            "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.\n\n"
            if backup_path
            else "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ù–ï –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.\n\n"
        )
        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            f"–ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(price_updates)} —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
            f"{backup_message}"
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω?",
            icon="question",
        )

        if result:
            self.log_info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
            try:
                self.update_progress(3, "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                self.root.update()

                # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
                if backup_path:
                    self.log_info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã...")
                    try:
                        import shutil

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –±–∞–∑—ã
                        base_file_path = "data/input"
                        original_path = None

                        if os.path.exists(base_file_path):
                            base_files = []
                            for file in os.listdir(base_file_path):
                                if file.endswith(
                                    (".xlsx", ".xls")
                                ) and not file.startswith("~"):
                                    full_path = os.path.join(base_file_path, file)
                                    file_size = os.path.getsize(full_path)
                                    base_files.append((full_path, file_size, file))

                            if base_files:
                                base_files.sort(key=lambda x: x[1], reverse=True)
                                original_path = base_files[0][0]

                        if original_path:
                            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            os.makedirs(os.path.dirname(backup_path), exist_ok=True)
                            shutil.copy(original_path, backup_path)
                            self.log_info(f"üíæ Backup —Å–æ–∑–¥–∞–Ω: {backup_path}")
                        else:
                            self.log_error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–ª—è backup")

                    except Exception as backup_error:
                        self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: {backup_error}")
                        messagebox.showerror(
                            "–û—à–∏–±–∫–∞",
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {backup_error}",
                        )
                        self.finish_progress("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup", auto_reset=True)
                        return
                else:
                    self.log_info(
                        "‚ÑπÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è (–≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)"
                    )

                # 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                self.update_progress(4, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏")
                self.log_info("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω...")
                updates_applied = 0
                updates_skipped = 0
                warnings = []

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if self.current_config == "vitya":
                    base_price_col = "price_vitya_usd"
                    article_col = "article_vitya"
                elif self.current_config == "dimi":
                    base_price_col = "price_dimi_usd"
                    article_col = "article_dimi"
                else:
                    base_price_col = "price"
                    article_col = "article"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
                if base_price_col not in self.base_df.columns:
                    self.log_error(
                        f"‚ùå –°—Ç–æ–ª–±–µ—Ü {base_price_col} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    )
                    messagebox.showerror(
                        "–û—à–∏–±–∫–∞", f"–°—Ç–æ–ª–±–µ—Ü {base_price_col} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                    )
                    self.set_status("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "error")
                    return

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                for update in price_updates:
                    article = update.get("article")
                    supplier_price = update.get("supplier_price", 0)
                    base_price = update.get("base_price", 0)

                    if not article or supplier_price <= 0:
                        continue

                    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if base_price > 0:
                        price_change_percent = abs(
                            (supplier_price - base_price) / base_price * 100
                        )
                    else:
                        price_change_percent = 100  # –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –≤–º–µ—Å—Ç–æ 0

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    if price_change_percent < MIN_PRICE_CHANGE_PERCENT:
                        updates_skipped += 1
                        self.log_info(
                            f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {article}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ ({price_change_percent:.1f}%)"
                        )
                        continue

                    if price_change_percent > MAX_PRICE_CHANGE_PERCENT:
                        warnings.append(
                            {
                                "article": article,
                                "old_price": base_price,
                                "new_price": supplier_price,
                                "change_percent": price_change_percent,
                                "reason": f"–ë–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ({price_change_percent:.1f}%)",
                            }
                        )
                        updates_skipped += 1
                        self.log_info(
                            f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {article}: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({price_change_percent:.1f}%)"
                        )
                        continue

                    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤ –±–∞–∑–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    try:
                        if self.current_config == "vitya":
                            # –î–ª—è –í–∏—Ç–∏ –∏—â–µ–º –ø–æ int –∑–Ω–∞—á–µ–Ω–∏—é
                            base_matches = self.base_df[
                                self.base_df[article_col] == int(article)
                            ]
                        else:
                            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—â–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ
                            base_matches = self.base_df[
                                self.base_df[article_col].astype(str).str.strip()
                                == str(article).strip()
                            ]

                        if len(base_matches) > 0:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –ø–µ—Ä–≤–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                            base_idx = base_matches.index[0]
                            old_price = self.base_df.loc[base_idx, base_price_col]
                            self.base_df.loc[base_idx, base_price_col] = supplier_price
                            updates_applied += 1

                            self.log_info(
                                f"üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ {article}: {old_price} ‚Üí {supplier_price} ({price_change_percent:+.1f}%)"
                            )
                        else:
                            self.log_info(
                                f"‚ùì –ê—Ä—Ç–∏–∫—É–ª {article} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
                            )
                            updates_skipped += 1

                    except Exception as e:
                        self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {article}: {e}")
                        updates_skipped += 1

                # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.update_progress(5, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                self.log_info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                self.log_info(f"   üí∞ –¶–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updates_applied}")
                self.log_info(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {updates_skipped}")
                self.log_info(f"   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")

                # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                result_message = f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                result_message += f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: {updates_applied}\n"
                result_message += f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {updates_skipped}\n"
                result_message += f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}\n\n"
                if backup_path:
                    result_message += (
                        f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {os.path.basename(backup_path)}\n"
                    )
                else:
                    result_message += f"‚ÑπÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å\n"
                result_message += f"üîÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

                if warnings:
                    result_message += (
                        f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: {len(warnings)} —Ç–æ–≤–∞—Ä–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
                    )

                messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", result_message)

                # 5. –°–û–•–†–ê–ù–Ø–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í EXCEL –§–ê–ô–õ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if updates_applied > 0:
                    self.update_progress(6, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel —Ñ–∞–π–ª")
                    self.log_info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Excel —Ñ–∞–π–ª...")

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É –±–∞–∑—ã
                    base_file_path = "data/input"
                    original_path = None

                    # –ò—â–µ–º —Ñ–∞–π–ª –±–∞–∑—ã (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π .xlsx —Ñ–∞–π–ª)
                    if os.path.exists(base_file_path):
                        base_files = []
                        for file in os.listdir(base_file_path):
                            if file.endswith((".xlsx", ".xls")) and not file.startswith(
                                "~"
                            ):
                                full_path = os.path.join(base_file_path, file)
                                file_size = os.path.getsize(full_path)
                                base_files.append((full_path, file_size, file))

                        if base_files:
                            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª (—ç—Ç–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∞–∑–∞)
                            base_files.sort(key=lambda x: x[1], reverse=True)
                            original_path = base_files[0][0]

                    if original_path:
                        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π backup –¥–ª—è Excel —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞)
                        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                        excel_backup_filename = (
                            f"EXCEL_backup_{self.current_config}_{timestamp}.xlsx"
                        )
                        excel_backup_path = os.path.join(
                            "data/output", excel_backup_filename
                        )

                        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Excel (–≤—Å–µ–≥–¥–∞!)
                        success = self.update_excel_prices_preserve_formatting(
                            original_path,
                            excel_backup_path,
                            price_updates,
                            self.current_config,
                        )

                        if success:
                            self.log_info(
                                "‚úÖ Excel —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                            )
                        else:
                            self.log_error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞")
                    else:
                        self.log_error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

                # 6. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                self.update_progress(7, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
                self.finish_progress("–¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", auto_reset=True)
                self.update_buttons_state()

            except Exception as e:
                self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
                self.finish_progress("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω", auto_reset=True)
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")
        else:
            self.log_info("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω")
            self.finish_progress("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", auto_reset=True)

    def refresh_interface(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.log_info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        self.load_available_configs()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.set_status("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª—ë–Ω", "success")
        self.root.update()

        self.log_info("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        help_text = """üöÄ MiStockSync - –°–ø—Ä–∞–≤–∫–∞

üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:
‚Ä¢ –§–∞–π–ª—ã –í–∏—Ç–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'JHT' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
‚Ä¢ –§–∞–π–ª—ã –î–∏–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'DiMi' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏  
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'BASE' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏

üîç –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–∏–ª–∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É '–∞–≤—Ç–æ')
2. –ù–∞–∂–º–∏—Ç–µ '–°—Ä–∞–≤–Ω–∏—Ç—å —Å –±–∞–∑–æ–π' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç' –¥–ª—è Excel –æ—Ç—á—ë—Ç–∞
4. '–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã' –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

‚öôÔ∏è –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:
‚Ä¢ –í–∏—Ç—è: —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã "–ò–º–µ—é—Ç—Å—è –≤ –Ω–∞–ª."
‚Ä¢ –î–∏–º–∞: –∏—Å–∫–ª—é—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã "–û–∂–∏–¥–∞–µ—Ç—Å—è"
‚Ä¢ –¶–µ–Ω—ã: –∏—Å–∫–ª—é—á–∞–µ—Ç NaN, –ø—É—Å—Ç—ã–µ –∏ –Ω—É–ª–µ–≤—ã–µ

üìä –ü–∞–ø–∫–∏:
‚Ä¢ data/input - –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
‚Ä¢ data/output - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
‚Ä¢ logs/ - —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤"""

        messagebox.showinfo("–°–ø—Ä–∞–≤–∫–∞", help_text)
        self.log_info("‚ùì –ü–æ–∫–∞–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    def create_advanced_status_bar(self, main_frame):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –º–Ω–æ–≥–æ—Å–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞
        self.status_frame = ttk.Frame(main_frame, relief=tk.SUNKEN, borderwidth=1)
        self.status_frame.grid(
            row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(5, 0)
        )
        self.status_frame.columnconfigure(0, weight=1)

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        inner_frame = ttk.Frame(self.status_frame)
        inner_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=5, pady=2)
        inner_frame.columnconfigure(0, weight=1)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å —Å –∏–∫–æ–Ω–∫–æ–π
        self.status_main = tk.StringVar(value="üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label = ttk.Label(
            inner_frame, textvariable=self.status_main, anchor=tk.W
        )
        self.status_label.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))

        # –¶–µ–Ω—Ç—Ä - –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Å–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(
            inner_frame, variable=self.progress_var, length=200, mode="determinate"
        )
        self.progress_bar.grid(row=0, column=1, padx=(10, 10))
        self.progress_bar.grid_remove()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.status_info = tk.StringVar(value="")
        self.info_label = ttk.Label(
            inner_frame, textvariable=self.status_info, anchor=tk.E
        )
        self.info_label.grid(row=0, column=2, padx=(10, 0))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚ìò
        self.is_progress_visible = False
        self.current_operation = None

    def set_status(self, message, status_type="info", show_time=True):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏"""
        icons = {
            "loading": "‚è≥",
            "success": "‚úÖ",
            "error": "‚ùå",
            "warning": "‚ö†Ô∏è",
            "info": "üöÄ",
            "file": "üìÅ",
            "save": "üíæ",
            "compare": "üîç",
            "update": "üè∑Ô∏è",
            "report": "üìä",
            "backup": "üõ°Ô∏è",
        }

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
        colors = {
            "loading": "#9932CC",  # Orange
            "success": "#228B22",  # ForestGreen
            "error": "#DC143C",  # Crimson
            "warning": "#FFD700",  # Gold
            "info": "#4169E1",  # RoyalBlue
            "file": "#9932CC",  # DarkOrchid
            "save": "#9932CC",  # LimeGreen #32CD32
            "compare": "#9932CC",  # DodgerBlue #1E90FF
            "update": "#9932CC",  # BlueViolet
            "report": "#20B2AA",  # LightSeaGreen
            "backup": "#CD853F",  # Peru
        }

        icon = icons.get(status_type, "üöÄ")
        color = colors.get(status_type, "#000000")

        formatted_message = f"{icon} {message}"
        self.status_main.set(formatted_message)
        self.status_label.config(foreground=color)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if show_time:
            current_time = datetime.now().strftime("%H:%M:%S")
            self.status_info.set(f"üïê {current_time}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
        self.root.update_idletasks()

    def start_progress(self, message, total_steps, operation_type="loading"):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        self.current_operation = {
            "message": message,
            "total": total_steps,
            "current": 0,
            "type": operation_type,
        }

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var.set(0)
        self.progress_bar.config(maximum=total_steps)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.grid()
        self.is_progress_visible = True

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        self.set_status(f"{message} (0/{total_steps})", operation_type, show_time=True)

        self.root.update_idletasks()

    def update_progress(self, step, message=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if not self.is_progress_visible or not self.current_operation:
            return

        self.current_operation["current"] = step
        self.progress_var.set(step)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if message:
            display_message = message
        else:
            display_message = self.current_operation["message"]

        total = self.current_operation["total"]
        operation_type = self.current_operation["type"]

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
        percent = int((step / total) * 100) if total > 0 else 0

        self.set_status(
            f"{display_message} ({step}/{total}) - {percent}%",
            operation_type,
            show_time=True,
        )

        self.root.update_idletasks()

    def finish_progress(self, success_message="–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", auto_reset=True):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if not self.is_progress_visible:
            return

        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_bar.grid_remove()
        self.is_progress_visible = False

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.set_status(success_message, "success", show_time=True)

        # –ê–≤—Ç–æ—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        if auto_reset:
            self.root.after(3000, lambda: self.set_status("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "info"))

        self.current_operation = None
        self.root.update_idletasks()

    def set_temp_status(self, message, status_type="info", duration=2000):
        """–í—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –∞–≤—Ç–æ—Å–±—Ä–æ—Å–æ–º"""
        old_status = self.status_main.get()
        old_color = self.status_label.cget("foreground")

        self.set_status(message, status_type)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å
        def reset_status():
            self.status_main.set(old_status)
            self.status_label.config(foreground=old_color)

        self.root.after(duration, reset_status)

    def add_to_base(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)"""
        self.log_info("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        self.log_info("üìã –°–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É!")
        self.log_info("üöÄ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:")
        self.log_info("   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ø—Ä–∞–π—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        self.log_info("   - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        self.log_info("   - –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        self.log_info("   - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")

        messagebox.showinfo(
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É!\n\n"
            "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è:\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω\n"
            "‚Ä¢ –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
        )

    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π –±–∞–∑—ã"""
        self.log_info("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_window = tk.Toplevel(self.root)
        settings_window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MiStockSync")
        settings_window.resizable(False, False)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ–∫–Ω–∞
        self.set_window_icon(settings_window)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        window_width = 450
        window_height = 420  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 350 –∏–∑-–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à—Ä–∏—Ñ—Ç–∞
        self.center_window(settings_window, window_width, window_height)

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        settings_window.transient(self.root)
        settings_window.grab_set()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            settings_window, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", font=("Arial", 14, "bold")
        ).pack(pady=10)

        # –†–∞–º–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_frame = ttk.LabelFrame(
            settings_window, text="–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10"
        )
        settings_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã
        auto_load_frame = ttk.Frame(settings_frame)
        auto_load_frame.pack(fill="x", pady=10)

        ttk.Label(
            auto_load_frame,
            text="üìä –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:",
            font=("Arial", 10, "bold"),
        ).pack(anchor="w")

        auto_load_var = tk.BooleanVar(value=self.auto_load_base_enabled)
        auto_load_check = ttk.Checkbutton(
            auto_load_frame,
            text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–∞–∑—É –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏",
            variable=auto_load_var,
        )
        auto_load_check.pack(anchor="w", padx=20, pady=5)

        ttk.Label(
            auto_load_frame,
            text="–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –±–∞–∑–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n–ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º.",
            font=("Arial", 8),
            foreground="gray",
        ).pack(anchor="w", padx=20)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(settings_frame, orient="horizontal").pack(fill="x", pady=15)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
        font_frame = ttk.Frame(settings_frame)
        font_frame.pack(fill="x", pady=10)

        ttk.Label(
            font_frame,
            text="üî§ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
            font=("Arial", 10, "bold"),
        ).pack(anchor="w")

        font_size_var = tk.StringVar(value=self.current_font_size)

        font_options = [
            ("üìù –û–±—ã—á–Ω—ã–π", "normal"),
            ("üìÑ –°—Ä–µ–¥–Ω–∏–π", "medium"),
            ("üìä –ö—Ä—É–ø–Ω—ã–π", "large"),
        ]

        for text, value in font_options:
            ttk.Radiobutton(
                font_frame, text=text, variable=font_size_var, value=value
            ).pack(anchor="w", padx=20, pady=2)

        ttk.Label(
            font_frame,
            text="–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
            font=("Arial", 8),
            foreground="gray",
        ).pack(anchor="w", padx=20, pady=(5, 0))

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(settings_frame, orient="horizontal").pack(fill="x", pady=15)

        # –§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        ttk.Label(
            settings_frame, text="üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:", font=("Arial", 10, "bold")
        ).pack(anchor="w")

        planned_features = [
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            "‚Ä¢ –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–Ω",
            "‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
            "‚Ä¢ –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
        ]

        for feature in planned_features:
            ttk.Label(settings_frame, text=feature, font=("Arial", 9)).pack(
                anchor="w", padx=10
            )

        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(settings_window)
        button_frame.pack(pady=10)

        def save_settings():
            """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –±–∞–∑—ã
            self.auto_load_base_enabled = auto_load_var.get()
            self.settings["auto_load_base"] = auto_load_var.get()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            new_font_size = font_size_var.get()
            if new_font_size != self.current_font_size:
                self.current_font_size = new_font_size
                self.settings["font_size"] = new_font_size
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —Å—Ä–∞–∑—É
                self.apply_font_size(new_font_size)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª
            if self.save_settings(self.settings):
                self.log_info(
                    f"üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞={auto_load_var.get()}, —à—Ä–∏—Ñ—Ç={new_font_size}"
                )
                messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

            settings_window.destroy()

        def cancel_settings():
            """–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
            self.log_info("‚Ü©Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            settings_window.destroy()

        ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_settings).pack(
            side="left", padx=5
        )
        ttk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=cancel_settings).pack(
            side="left", padx=5
        )

    def quit_application(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
        self.log_info("üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        result = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞",
            "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ MiStockSync?\n\n"
            "–í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.",
            icon="question",
        )

        if result:
            self.log_info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            self.logger.info("üìã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.root.quit()
        else:
            self.log_info("‚Ü©Ô∏è –í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        self.log_info("‚ÑπÔ∏è –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ...")

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ messagebox
        about_window = tk.Toplevel(self.root)
        about_window.title("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_window.resizable(False, False)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ–∫–Ω–∞
        self.set_window_icon(about_window)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        window_width = 320  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 300 –∏–∑-–∑–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        window_height = 350  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 240 –∏–∑-–∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        self.center_window(about_window, window_width, window_height)

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        about_window.transient(self.root)
        about_window.grab_set()

        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(about_window, padding="20")
        main_frame.pack(fill="both", expand=True)

        # –ë–æ–ª—å—à–∞—è –∏–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—ç–º–æ–¥–∑–∏)
        ttk.Label(main_frame, text="üöÄ", font=("Arial", 48)).pack()

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Ä—Å–∏—è
        ttk.Label(
            main_frame, text="MiStockSync v0.0.9", font=("Arial", 14, "bold")
        ).pack(pady=5)

        # –î–∞—Ç–∞
        ttk.Label(
            main_frame,
            text=f"üìÖ {datetime.now().strftime('%Y-%m-%d')}",
            font=("Arial", 9),
        ).pack()

        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        ttk.Label(
            main_frame,
            text="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤\n—Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n\n‚Ä¢ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            font=("Arial", 9),
            justify="center",
        ).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(
            main_frame, text="‚úÖ –û–ö", command=about_window.destroy, width=10
        ).pack(pady=10)

        self.log_info("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–∫–∞–∑–∞–Ω–∞")

    # === –§–£–ù–ö–¶–ò–ò –ú–ï–ù–Æ "–ü–†–ê–í–ö–ê" ===
    def cut_text(self):
        """–í—ã—Ä–µ–∑–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            focused_widget = self.root.focus_get()
            if hasattr(focused_widget, "selection_get"):
                text = focused_widget.selection_get()
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
                focused_widget.delete("sel.first", "sel.last")
                self.log_info("‚úÇÔ∏è –¢–µ–∫—Å—Ç –≤—ã—Ä–µ–∑–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except tk.TclError:
            self.log_info("‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è")

    def copy_text(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            focused_widget = self.root.focus_get()
            if hasattr(focused_widget, "selection_get"):
                text = focused_widget.selection_get()
                self.root.clipboard_clear()
                self.root.clipboard_append(text)
                self.log_info("üìã –¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except tk.TclError:
            self.log_info("‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")

    def select_all_text(self):
        """–í—ã–¥–µ–ª–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–ª–µ"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.info_text:
                # –î–ª—è ScrolledText
                focused_widget.tag_add("sel", "1.0", "end")
                self.log_info("üîò –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
            elif hasattr(focused_widget, "select_range"):
                # –î–ª—è Entry
                focused_widget.select_range(0, tk.END)
                self.log_info("üîò –í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
        except:
            self.log_info("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è")

    def invert_selection(self):
        """–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)"""
        self.log_info("üîÑ –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è")
        messagebox.showinfo(
            "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            "–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö",
        )

    # === –§–£–ù–ö–¶–ò–ò –†–ê–ó–ú–ï–†–ê –®–†–ò–§–¢–ê ===
    def change_font_size(self, size_type):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        if size_type in ["normal", "medium", "large"]:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
            self.apply_font_size(size_type)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.current_font_size = size_type
            self.settings["font_size"] = size_type
            self.save_settings(self.settings)

            size_names = {"normal": "–æ–±—ã—á–Ω—ã–π", "medium": "—Å—Ä–µ–¥–Ω–∏–π", "large": "–∫—Ä—É–ø–Ω—ã–π"}

            self.log_info(f"üî§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {size_names[size_type]} —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞")
        else:
            self.log_info("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞")

    def apply_font_size(self, size_type):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é"""
        sizes = {
            "normal": ("Arial", 9),
            "medium": ("Arial", 11),
            "large": ("Arial", 13),
        }

        if size_type in sizes and hasattr(self, "info_text"):
            font_family, font_size = sizes[size_type]
            self.info_text.configure(font=(font_family, font_size))

    def center_window(self, window, width, height, parent=None):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞ –∏–ª–∏ —ç–∫—Ä–∞–Ω–∞"""
        if parent is None:
            parent = self.root

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        parent.update_idletasks()
        parent_x = parent.winfo_x()
        parent_y = parent.winfo_y()
        parent_width = parent.winfo_width()
        parent_height = parent.winfo_height()

        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–∫–Ω–∞
        x = parent_x + (parent_width - width) // 2
        y = parent_y + (parent_height - height) // 2

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—é
        window.geometry(f"{width}x{height}+{x}+{y}")

    def set_window_icon(self, window):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –¥–æ—á–µ—Ä–Ω–µ–≥–æ –æ–∫–Ω–∞"""
        try:
            from PIL import Image, ImageTk

            icon = ImageTk.PhotoImage(Image.open("assets/icon.png"))
            window.iconphoto(False, icon)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass

    def create_backup_base(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ü–µ–Ω"""

        if self.base_df is None:
            self.log_error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è backup")
            return False

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è backup –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            backup_dir = "data/output"
            os.makedirs(backup_dir, exist_ok=True)

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ backup
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_filename = f"BACKUP_base_{self.current_config}_{timestamp}.xlsx"
            backup_path = os.path.join(backup_dir, backup_filename)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º backup
            self.base_df.to_excel(backup_path, index=False)

            self.log_info(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}")
            self.log_info(f"üìÅ –ü—É—Ç—å: {backup_path}")

            return True

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False

    def update_excel_prices_preserve_formatting(
        self, original_path, backup_path, price_updates, supplier_config
    ):
        """
        –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –≤ Excel —Ñ–∞–π–ª–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        –ò–∑–º–µ–Ω—è—é—Ç—Å—è –¢–û–õ–¨–ö–û –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω–æ–≤—ã—Ö —è—á–µ–µ–∫, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –±—ã–ª–æ
        """

        self.log_info("üîß –¢–æ—á–µ—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ openpyxl
            if not OPENPYXL_AVAILABLE:
                self.log_error(
                    "‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install openpyxl"
                )
                return False

            # 1. –°–æ–∑–¥–∞–µ–º backup
            os.makedirs("data/output", exist_ok=True)
            shutil.copy(original_path, backup_path)
            self.log_info(f"üíæ Backup —Å–æ–∑–¥–∞–Ω: {os.path.basename(backup_path)}")

            # 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª —á–µ—Ä–µ–∑ openpyxl (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
            workbook = load_workbook(original_path)
            worksheet = workbook.active  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω (—Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –±–∞–∑–µ)
            if supplier_config == "vitya":
                price_column_name = "–¶–µ–Ω–∞ –í–∏—Ç—è –≤ $"
                article_column_name = "–ê—Ä—Ç–∏–∫—É–ª –í–∏—Ç—è"
            elif supplier_config == "dimi":
                price_column_name = "–¶–µ–Ω–∞ –î–∏–º–∞ –≤ $"
                article_column_name = "–ê—Ä—Ç–∏–∫—É–ª –î–∏–º–∞"
            else:
                self.log_error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {supplier_config}")
                return False

            # 4. –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ Excel —Ñ–∞–π–ª–µ
            header_row = 1  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
            price_col_idx = None
            article_col_idx = None

            for col_idx in range(1, worksheet.max_column + 1):
                cell_value = worksheet.cell(row=header_row, column=col_idx).value
                if cell_value == price_column_name:
                    price_col_idx = col_idx
                elif cell_value == article_column_name:
                    article_col_idx = col_idx

            if not price_col_idx or not article_col_idx:
                self.log_error(
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã –≤ Excel: {price_column_name}, {article_column_name}"
                )
                return False

            self.log_info(
                f"üìç –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {article_column_name} (col {article_col_idx}), {price_column_name} (col {price_col_idx})"
            )

            # 5. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            updates_applied = 0

            for update in price_updates:
                article_to_find = str(update.get("article", "")).strip()
                new_price = update.get("supplier_price", 0)

                if not article_to_find or new_price <= 0:
                    continue

                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
                for row_idx in range(2, worksheet.max_row + 1):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                    cell_value = worksheet.cell(
                        row=row_idx, column=article_col_idx
                    ).value

                    if cell_value is not None:
                        if supplier_config == "vitya":
                            # –î–ª—è –í–∏—Ç–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ int
                            try:
                                if isinstance(cell_value, (int, float)) and int(
                                    cell_value
                                ) == int(float(article_to_find)):
                                    found_match = True
                                else:
                                    found_match = False
                            except (ValueError, TypeError):
                                found_match = False
                        else:
                            # –î–ª—è –î–∏–º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                            found_match = str(cell_value).strip() == article_to_find

                        if found_match:
                            # –û–ë–ù–û–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –ó–ù–ê–ß–ï–ù–ò–ï –Ø–ß–ï–ô–ö–ò (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è!)
                            old_value = worksheet.cell(
                                row=row_idx, column=price_col_idx
                            ).value
                            worksheet.cell(
                                row=row_idx, column=price_col_idx, value=new_price
                            )
                            updates_applied += 1

                            self.log_info(
                                f"   ‚úÖ {article_to_find}: {old_value} ‚Üí {new_price}"
                            )
                            break

            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
            workbook.save(original_path)
            workbook.close()

            self.log_info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {updates_applied} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω")
            self.log_info(
                f"üé® –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –í–°–Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Ä–∞–∑–º–µ—Ä—ã —è—á–µ–µ–∫, —Ü–≤–µ—Ç–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç.–¥."
            )

            return True

        except Exception as e:
            self.log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {e}")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ë–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è main —Ñ—É–Ω–∫—Ü–∏–∏
    print("üöÄ –ó–∞–ø—É—Å–∫ MiStockSync GUI...")
    print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")

    root = tk.Tk()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        from PIL import Image, ImageTk

        icon = ImageTk.PhotoImage(Image.open("assets/icon.png"))
        root.iconphoto(False, icon)
        print("‚úÖ –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    root.title("üöÄ MiStockSync - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–π—Å–∞–º–∏")

    app = MiStockSyncApp(root)

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
    root.update_idletasks()
    width = root.winfo_width()
    height = root.winfo_height()
    x = (root.winfo_screenwidth() // 2) - (width // 2)
    y = (root.winfo_screenheight() // 2) - (height // 2)
    root.geometry(f"{width}x{height}+{x}+{y}")

    app.logger.info("üñ•Ô∏è GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")

    root.mainloop()


if __name__ == "__main__":
    main()
