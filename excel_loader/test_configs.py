#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent))

from loader import (
    get_available_configs,
    select_and_load_excel,
    load_largest_file,
    load_with_config,
    get_loader,
)


def test_available_configs():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤...")

    configs = get_available_configs()
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {len(configs)}")

    for config in configs:
        loader = get_loader(config)
        supplier_name = loader.config.get("supplier_name", config)
        description = loader.config.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        column_count = len(loader.config.get("column_mapping", {}))

        print(f"  üìã {config}: {supplier_name}")
        print(f"     üìù {description}")
        print(f"     üè∑Ô∏è –°—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞–ø–ø–∏–Ω–≥–µ: {column_count}")
        print()

    return len(configs) > 0


def test_base_config():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ —Å base –∫–æ–Ω—Ñ–∏–≥–æ–º"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ base –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã...")

    test_dir = "../data/input"

    if os.path.exists(test_dir):
        print(f"üìÅ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.path.abspath(test_dir)}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å base –∫–æ–Ω—Ñ–∏–≥–æ–º
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª —Å base –∫–æ–Ω—Ñ–∏–≥–æ–º...")
        base_df = load_largest_file(test_dir, config_name="base")

        if base_df is not None:
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {base_df.shape}")
            print(f"üè∑Ô∏è –°—Ç–æ–ª–±—Ü—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            for i, col in enumerate(base_df.columns):
                print(f"  {i+1:2d}. {col}")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ base_df")
            return False
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {test_dir}")
        return False


def test_vitya_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø—Ä–∞–π—Å–∞ –í–∏—Ç—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ vitya –∫–æ–Ω—Ñ–∏–≥–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    loader = get_loader("vitya")

    print(f"üìã –ö–æ–Ω—Ñ–∏–≥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {loader.config.get('supplier_name')}")
    print(
        f"üí± –í–∞–ª—é—Ç–∞: {loader.config.get('settings', {}).get('currency', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–æ–ª–±—Ü–æ–≤
    mapping = loader.config.get("column_mapping", {})
    print(f"üîÑ –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–æ–ª–±—Ü–æ–≤ ({len(mapping)} –ø—Ä–∞–≤–∏–ª):")
    for old_col, new_col in mapping.items():
        print(f"  '{old_col}' ‚Üí '{new_col}'")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    ignored = loader.config.get("ignore_columns", [])
    if ignored:
        print(f"üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã ({len(ignored)}):")
        for col in ignored:
            print(f"  - {col}")

    return True


def test_config_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤...")

    configs_to_test = ["base", "vitya", "dima"]

    for config_name in configs_to_test:
        try:
            loader = get_loader(config_name)
            validation = loader.config.get("validation", {})

            required_cols = validation.get("required_columns", [])
            price_range = (
                f"{validation.get('price_min', 0)} - {validation.get('price_max', '‚àû')}"
            )

            print(f"üìã {config_name} ({loader.config.get('supplier_name')}):")
            print(f"  ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {required_cols}")
            print(f"  üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {price_range}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ {config_name}: {e}")

    return True


def test_direct_file_loading():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...")

    test_file = "../data/input/price_2.xlsx"

    if os.path.exists(test_file):
        print(f"üìÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {os.path.basename(test_file)}")

        configs_to_test = ["default", "vitya"]

        for config_name in configs_to_test:
            print(f"\nüîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –∫–æ–Ω—Ñ–∏–≥–æ–º '{config_name}'...")

            df = load_with_config(test_file, config_name)

            if df is not None:
                print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {df.shape}")
                print(f"  üè∑Ô∏è –ü–µ—Ä–≤—ã–µ 5 —Å—Ç–æ–ª–±—Ü–æ–≤: {list(df.columns[:5])}")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º {config_name}")

        return True
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    print("=" * 60)

    tests = [
        ("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤", test_available_configs),
        ("Base –∫–æ–Ω—Ñ–∏–≥ (–æ—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞)", test_base_config),
        ("Vitya –∫–æ–Ω—Ñ–∏–≥", test_vitya_config),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤", test_config_validation),
        ("–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", test_direct_file_loading),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            print(f"\n{'='*20} {test_name} {'='*20}")
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))

    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {status}: {test_name}")
        if result:
            passed += 1

    print(f"\nüìà –ò—Ç–æ–≥–æ: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("- select_and_load_excel(config_name='vitya')  # –î–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º")
        print("- load_largest_file('./data', config_name='base')  # –°–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª")
        print("- load_with_config('file.xlsx', 'vitya')  # –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
        print("- get_available_configs()  # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥–æ–≤")
    else:
        print(f"\n‚ùå {len(results) - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")


if __name__ == "__main__":
    main()
