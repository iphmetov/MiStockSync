"""
Excel Loader Module Enhanced
–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
"""

import os
import json
import logging
import glob
from datetime import datetime
from pathlib import Path
from typing import Optional, Tuple, Dict, Any, List
import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd


class ExcelLoaderEnhanced:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥–∞–º–∏"""

    def __init__(self, config_name: str = "default"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞

        Args:
            config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ .json)
        """
        self.config_name = config_name
        self.config = self._load_config(config_name)
        self._setup_logging()

    def get_available_configs(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        configs_dir = os.path.join(os.path.dirname(__file__), "configs")
        if not os.path.exists(configs_dir):
            return ["default"]

        config_files = glob.glob(os.path.join(configs_dir, "*_config.json"))
        config_names = [
            os.path.basename(f).replace("_config.json", "") for f in config_files
        ]
        return sorted(config_names)

    def _load_config(self, config_name: str = "default") -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏"""
        configs_dir = os.path.join(os.path.dirname(__file__), "configs")
        config_path = os.path.join(configs_dir, f"{config_name}_config.json")

        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º default
        if not os.path.exists(config_path):
            config_path = os.path.join(configs_dir, "default_config.json")
            print(f"–ö–æ–Ω—Ñ–∏–≥ {config_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º default")

        try:
            with open(config_path, "r", encoding="utf-8") as f:
                config = json.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–∏–≥: {config.get('supplier_name', config_name)}")
                return config
        except FileNotFoundError:
            print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return self._get_fallback_config()
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self._get_fallback_config()

    def _get_fallback_config(self) -> dict:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å"""
        return {
            "supplier_name": "–†–µ–∑–µ—Ä–≤–Ω–∞—è",
            "column_mapping": {},
            "ignore_columns": [],
            "settings": {"skip_empty_rows": True},
            "data_types": {},
            "validation": {"required_columns": []},
        }

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)

        log_file = log_dir / f"excel_loader_{datetime.now().strftime('%Y%m%d')}.log"

        self.logger = logging.getLogger(f"excel_loader_{self.config_name}")
        self.logger.setLevel(logging.INFO)

        if not self.logger.handlers:
            file_handler = logging.FileHandler(log_file, encoding="utf-8")
            file_handler.setLevel(logging.INFO)

            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.INFO)

            formatter = logging.Formatter(
                "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
            )
            file_handler.setFormatter(formatter)
            console_handler.setFormatter(formatter)

            self.logger.addHandler(file_handler)
            self.logger.addHandler(console_handler)

    def _get_file_info(self, file_path: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        try:
            stat = os.stat(file_path)
            return {
                "size": stat.st_size,
                "size_mb": round(stat.st_size / (1024 * 1024), 2),
                "created": datetime.fromtimestamp(stat.st_ctime).strftime(
                    "%Y-%m-%d %H:%M:%S"
                ),
                "modified": datetime.fromtimestamp(stat.st_mtime).strftime(
                    "%Y-%m-%d %H:%M:%S"
                ),
                "owner": stat.st_uid if hasattr(stat, "st_uid") else "Unknown",
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return {}

    def _apply_column_mapping(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        if not self.config.get("column_mapping"):
            return df

        mapping = {}
        for old_col in df.columns:
            if not isinstance(old_col, str):
                old_col = str(old_col)

            for config_key, config_value in self.config["column_mapping"].items():
                if old_col.lower().strip() == config_key.lower().strip():
                    mapping[old_col] = config_value
                    break

        if mapping:
            df = df.rename(columns=mapping)
            self.logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤: {mapping}")

        return df

    def _remove_ignored_columns(self, df: pd.DataFrame) -> pd.DataFrame:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"""
        ignore_columns = self.config.get("ignore_columns", [])
        if not ignore_columns:
            return df

        columns_to_drop = []
        for col in df.columns:
            col_str = str(col) if col is not None else ""
            for ignore_pattern in ignore_columns:
                if ignore_pattern.lower() in col_str.lower():
                    columns_to_drop.append(col)
                    break

        if columns_to_drop:
            df = df.drop(columns=columns_to_drop, errors="ignore")
            self.logger.info(f"–£–¥–∞–ª–µ–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {columns_to_drop}")

        return df

    def _fix_unnamed_columns(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Unnamed —Å—Ç–æ–ª–±—Ü–æ–≤"""
        new_columns = []
        for col in df.columns:
            col_str = str(col) if col is not None else "Column"

            if "Unnamed" in col_str:
                first_val = df[col].iloc[0] if len(df) > 0 else None
                if pd.notna(first_val) and str(first_val).strip():
                    new_columns.append(str(first_val).strip())
                else:
                    new_columns.append(f"Column_{len(new_columns) + 1}")
            else:
                new_columns.append(col_str)

        df.columns = new_columns
        return df

    def _apply_data_types(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
        data_types = self.config.get("data_types", {})
        if not data_types:
            return df

        for column, dtype in data_types.items():
            if column in df.columns:
                try:
                    if dtype == "float":
                        df[column] = pd.to_numeric(df[column], errors="coerce")
                    elif dtype == "int":
                        df[column] = pd.to_numeric(df[column], errors="coerce").astype(
                            "Int64"
                        )
                    elif dtype == "string":
                        df[column] = df[column].astype(str)

                    self.logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω —Ç–∏–ø {dtype} –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ {column}")
                except Exception as e:
                    self.logger.warning(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–∏–ø {dtype} –¥–ª—è {column}: {e}"
                    )

        return df

    def _validate_data(self, df: pd.DataFrame) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É"""
        validation = self.config.get("validation", {})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = validation.get("required_columns", [])
        missing_columns = [col for col in required_columns if col not in df.columns]

        if missing_columns:
            error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_columns}"
            self.logger.error(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", error_msg)
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω
        price_columns = [col for col in df.columns if "price" in col.lower()]
        price_min = validation.get("price_min", 0)
        price_max = validation.get("price_max", float("inf"))

        for price_col in price_columns:
            if price_col in df.columns:
                invalid_prices = df[
                    (df[price_col] < price_min) | (df[price_col] > price_max)
                ]
                if not invalid_prices.empty:
                    self.logger.warning(
                        f"–ù–∞–π–¥–µ–Ω—ã —Ü–µ–Ω—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ {price_col}"
                    )

        return True

    def _show_file_info(self, df: pd.DataFrame, file_path: str):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
        file_info = self._get_file_info(file_path)

        info_text = f"""
üìÅ –§–∞–π–ª: {os.path.basename(file_path)}
‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥: {self.config.get('supplier_name', self.config_name)}
üìä –†–∞–∑–º–µ—Ä: {file_info.get('size_mb', 0)} MB
üìã –°—Ç—Ä–æ–∫: {len(df)}
üìã –°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}
üìÖ –°–æ–∑–¥–∞–Ω: {file_info.get('created', 'Unknown')}
üìÖ –ò–∑–º–µ–Ω–µ–Ω: {file_info.get('modified', 'Unknown')}

üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤:
{', '.join(df.columns.tolist())}
        """

        print(info_text)
        self.logger.info(
            f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_path}, —Å—Ç—Ä–æ–∫: {len(df)}, —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}"
        )

    def select_and_load_excel(self, config_name: str = None) -> Optional[pd.DataFrame]:
        """
        –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω—Ñ–∏–≥–∞

        Args:
            config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π)

        Returns:
            pandas.DataFrame –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if config_name and config_name != self.config_name:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∫–æ–Ω—Ñ–∏–≥
            self.config_name = config_name
            self.config = self._load_config(config_name)

        try:
            root = tk.Tk()
            root.withdraw()

            file_path = filedialog.askopenfilename(
                title=f"–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª (–∫–æ–Ω—Ñ–∏–≥: {self.config.get('supplier_name', self.config_name)})",
                filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")],
            )

            if not file_path:
                self.logger.info("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
                return None

            file_path_str = str(file_path) if file_path else ""
            if not file_path_str.lower().endswith((".xlsx", ".xls")):
                error_msg = "–í—ã–±—Ä–∞–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xlsx –∏ .xls —Ñ–∞–π–ª—ã."
                messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
                self.logger.error(error_msg)
                return None

            df = self._load_excel_file(file_path)

            if df is not None:
                self._show_file_info(df, file_path)
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö",
                    f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å –∫–æ–Ω—Ñ–∏–≥–æ–º '{self.config.get('supplier_name')}'!\n–°—Ç—Ä–æ–∫: {len(df)}\n–°—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}",
                )

            return df

        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            self.logger.error(error_msg)
            return None
        finally:
            try:
                root.destroy()
            except:
                pass

    def _load_excel_file(self, file_path: str) -> Optional[pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            df = pd.read_excel(file_path, sheet_name=0)

            # –û–¢–ö–õ–Æ–ß–ï–ù–û: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Unnamed —Å—Ç–æ–ª–±—Ü—ã
            # df = self._fix_unnamed_columns(df)

            # –£–¥–∞–ª—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            df = self._remove_ignored_columns(df)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–æ–ª–±—Ü–æ–≤
            df = self._apply_column_mapping(df)

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            df = self._apply_data_types(df)

            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
            if self.config.get("settings", {}).get("skip_empty_rows", True):
                df = df.dropna(how="all")

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if not self._validate_data(df):
                return None

            return df

        except FileNotFoundError:
            error_msg = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            self.logger.error(error_msg)
            return None
        except PermissionError:
            error_msg = f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {file_path}"
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            self.logger.error(error_msg)
            return None
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}"
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            self.logger.error(error_msg)
            return None

    def load_largest_file(
        self, directory_path: str, config_name: str = None
    ) -> Optional[pd.DataFrame]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ Excel —Ñ–∞–π–ª–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

        Args:
            directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è

        Returns:
            pandas.DataFrame –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        if config_name and config_name != self.config_name:
            self.config_name = config_name
            self.config = self._load_config(config_name)

        try:
            if not os.path.exists(directory_path):
                error_msg = f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory_path}"
                self.logger.error(error_msg)
                return None

            excel_files = []
            for file in os.listdir(directory_path):
                file_str = str(file) if file is not None else ""
                if file_str.lower().endswith((".xlsx", ".xls")):
                    file_path = os.path.join(directory_path, file)
                    file_size = os.path.getsize(file_path)
                    excel_files.append((file_path, file_size))

            if not excel_files:
                error_msg = f"Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}"
                self.logger.warning(error_msg)
                return None

            largest_file = max(excel_files, key=lambda x: x[1])
            file_path, file_size = largest_file

            self.logger.info(
                f"–ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {file_path} ({file_size} bytes)"
            )

            df = self._load_excel_file(file_path)

            if df is not None:
                self._show_file_info(df, file_path)

            return df

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}"
            self.logger.error(error_msg)
            return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤
_loaders = {}


def get_loader(config_name: str = "default") -> ExcelLoaderEnhanced:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ (singleton –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞)"""
    global _loaders
    if config_name not in _loaders:
        _loaders[config_name] = ExcelLoaderEnhanced(config_name)
    return _loaders[config_name]


def select_and_load_excel(config_name: str = "default") -> Optional[pd.DataFrame]:
    """
    –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º

    Args:
        config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (default, base, vitya, dima, ...)

    Returns:
        pandas.DataFrame –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    return get_loader(config_name).select_and_load_excel()


def load_largest_file(
    directory_path: str, config_name: str = "base"
) -> Optional[pd.DataFrame]:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ Excel —Ñ–∞–π–ª–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º

    Args:
        directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (default, base, vitya, dima, ...)

    Returns:
        pandas.DataFrame –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    return get_loader(config_name).load_largest_file(directory_path)


def get_available_configs() -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
    return get_loader().get_available_configs()


def load_with_config(file_path: str, config_name: str) -> Optional[pd.DataFrame]:
    """
    –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        config_name: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    Returns:
        pandas.DataFrame –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    loader = get_loader(config_name)
    return loader._load_excel_file(file_path)
